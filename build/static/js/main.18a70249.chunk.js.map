{"version":3,"sources":["component/Login/LoginPresenter.js","component/Dashboard/Chart.js","component/Dashboard/DashboardPresenter.js","component/User/User.js","component/User/Authorized.js","component/Map/RobotServing.js","component/Map/RobotPosition.js","component/Modal/Modal.js","component/Map/MapController.js","component/Map/TablePosition.js","component/Map/MapPresenter.js","component/Map/ErrorControlButton.js","component/Map/ServingPresenter.js","component/Map/RobotInfo.js","component/Map/MonitoringPresenter.js","component/Call/CallStatus.js","component/Call/CallController.js","component/Call/CallButton.js","component/Call/CallPresenter.js","component/Setting/SettingPresenter.js","component/History/HistoryPresenter.js","component/Error/ErrorController.js","component/Error/ErrorPresenter.js","component/Pickup/PickupItem.js","component/Pickup/PickupPresenter.js","component/SideNav/SideNavPresenter.js","component/Header/HeaderPresenter.js","App.js","index.js","component/Login/LoginController.js"],"names":["LoginPresenter","useState","inputId","setInputId","inputPassword","setInputPassword","showPassword","setshowPassword","isRemember","setIsRemember","useCookies","cookies","setCookie","removeCookie","useEffect","undefined","rememberId","onSubmit","a","expires","Date","now","console","log","document","getElementById","innerText","search","postControllerLogin","valid","result","user_name","sessionStorage","setItem","map_id","user_key","logo_src","axios","defaults","headers","common","location","href","className","id","src","alt","type","autocapitalize","name","placeholder","value","onChange","e","target","onClick","onMouseDown","event","preventDefault","checked","for","LineTimeOrder","testdata","plugins","ChartDataLabels","data","labels","datasets","backgroundColor","borderColor","borderWidth","fill","pointRadius","pointBorderWidth","pointBackgroundColor","context","max","Math","apply","dataIndex","options","layout","padding","left","right","bottom","top","scales","y","suggestedMin","suggestedMax","ticks","font","size","family","weight","color","stepSize","grid","lineWidth","x","tick","borderDash","legend","display","datalabels","anchor","align","offset","borderRadius","textShadowBlur","formatter","chart","DoughnutTypeOrder","hoverBorderWidth","responsive","maintainAspectRatio","cutout","title","DoughnutAvailableRobot","DashboardPresenter","User","onLogout","window","removeItem","userName","getItem","this","bind","Component","RobotServing","robot","clickedRobotId","setClickedRobotId","stateString","final_node","current_node","statusColor","robot_id","destination","tableName","table_name","isNaN","style","RobotItem","props","robotImgSrc","robotId","pageType","state","posX","posY","baseURL","process","post","RobotPosition","robotData","length","map","curr_x","curr_y","Modal","highlight","content","open","onPermit","onCancel","createPortal","getMapTable","userId","apiKey","config","get","response","status","error","message","getDestinationRobot","destinationTable","where","mapName","map_name","postError","postButton","getInitRobot","getHomeRobot","params","method","url","table_id","TableItem","TablePosition","tableData","modalHighlight","setModalHighlight","isModalOpen","setIsModalOpen","clickedTableId","setClickedTableId","tableItem","tableInfo","tableId","highlightString","handleTableClick","ErrorControlButton","modalTitle","setModalTitle","modalContent","setModalContent","alert","ServingPresenter","setRobotData","setTableData","mapId","mapBackgroundSrc","interval","setInterval","then","robot_position","filter","used","catch","getRobotData","clearInterval","getTableData","RobotInfo","battery","MonitoringPresenter","RobotStatus","CallStatus","robotStatusList","setRobotStatusList","getRobotStatus","robot_status","getPickupRobot","robotHome","robot_home","getCallRobot","userNode","user_node","CallButton","responseStatus","buttonStatus","setButtonStatus","calledRobot","setCalledRobot","updateLoading","getIsCall","onClickKitchen","onClickPickup","CallPresenter","loading","input","setState","prevState","error2","message2","handlePickupButtonClick","handleKitchenButtonClick","clickPickupModalPermit","clickKitchenModalPermit","BUTTON_WRAPPER_STYLES","position","zIndex","SettingPresenter","HistoryPresenter","setLabel","setData","React","Object","keys","key","label","width","height","cutoutInnerPercentage","cutoutPercentage","getRobotError","getRobotLog","logId","errorMessage","ErrorPresenter","errorList","setErrorList","logString","robot_path","map_existence","handelErrorClick","errorId","loadLog","clickErrorModalButton","loadErrors","bgcolor","robotError","last_log_id","error_id","error_type","current_node_robot","current_node_server","created_at","PickupContent","pickup","isNull","phone","store","delivery","delay","PickupItem","pickupList","pickupItem","PickupPresenter","SideNavPresenter","isFullNav","lineHeight","dbLogoSrc","to","activeClassName","HeaderPresenter","App","isAuthorized","setIsAuthorized","path","exact","ReactDOM","render","StrictMode","userPassword","token","Buffer","from","toString"],"mappings":"qRAqJeA,MAzIf,WAGI,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAEA,EAAwCJ,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAAoCN,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAA2CC,YAAW,CAAC,eAAvD,mBAAOC,EAAP,KAAgBC,EAAhB,KAA2BC,EAA3B,KAEAC,qBAAU,gBACqBC,IAAvBJ,EAAQK,aACRb,EAAWQ,EAAQK,YACnBP,GAAc,MAEnB,IAiCH,IAAMQ,EAAQ,uCAAG,kCAAAC,EAAA,yDAETV,EACAI,EAAU,aAAcV,EAAS,CAAEiB,QAAS,IAAIC,KAAKA,KAAKC,MAAM,UAEhER,EAAa,cAhBjBS,QAAQC,IAAI,SACG,IAAXrB,GAAkC,IAAjBE,GACjBoB,SAASC,eAAe,gBAAgBC,UAAY,uGAC7C,IAEuB,GAAzBxB,EAAQyB,OAAO,QAA8C,GAA/BvB,EAAcuB,OAAO,QACxDH,SAASC,eAAe,gBAAgBC,UAAY,oFAC7C,GAIE,iEAYeE,YAAoB1B,EAASE,GAZ5C,sCAYRyB,EAZQ,KAYDC,EAZC,MAaTD,EAbS,iBAeTP,QAAQC,IAAI,qCACZD,QAAQC,IAAIO,EAAOC,WACnBC,eAAeC,QAAQ,SAAU/B,GACjC8B,eAAeC,QAAQ,QAASH,EAAOI,QACvCF,eAAeC,QAAQ,UAAWH,EAAOK,UACzCH,eAAeC,QAAQ,WAAYH,EAAOC,WAC1CC,eAAeC,QAAQ,UAAWH,EAAOM,UACzCC,IAAMC,SAASC,QAAQC,OAAS,CAC5B,cAAiB,SAASV,EAAOK,UAErCE,IAAMC,SAASC,QAAQC,OAAvB,cAAiD,SAASV,EAAOK,SAEjEX,SAASiB,SAASC,KAAO,IA3BhB,+BA8BTpB,QAAQC,IAAI,2CAA4CO,GAExDN,SAASC,eAAe,gBAAgBC,UAAYI,EAhC3C,+DAAH,qDAqCd,OACI,sBAAKa,UAAU,UAAUC,GAAG,QAA5B,UACI,sBAAKA,GAAG,MAAR,UACI,qBAAKD,UAAU,iBAAiBC,GAAG,OAAOC,IAAK,oDAAqDC,IAAI,mBACxG,qBAAKF,GAAG,YAAR,SACI,mBAAGA,GAAG,QAAN,sFAGR,sBAAKA,GAAG,SAAR,UAEI,qBAAKA,GAAG,iBAAR,SACI,cAAC,IAAD,CAAeA,GAAG,iBAEtB,qBAAKD,UAAU,YAAf,SACI,sBAAKC,GAAG,OAAR,UACI,mBAAGD,UAAU,QAAb,oBAEA,sBAAKC,GAAG,eAAeD,UAAU,YAAjC,UACI,cAAC,IAAD,CAAeA,UAAU,SACzB,uBAAOC,GAAG,WAAWD,UAAU,QAAQI,KAAK,OAAOC,eAAe,MAAMC,KAAK,UAAUC,YAAY,qBAAMC,MAAOjD,EAASkD,SAtF3H,SAACC,GACnBlD,EAAWkD,EAAEC,OAAOH,aA0FJ,sBAAKP,GAAG,qBAAqBD,UAAU,YAAvC,UACI,cAAC,IAAD,CAAeA,UAAU,SACzB,uBAAOC,GAAG,iBAAiBD,UAAU,QAAQM,KAAK,gBAAgBC,YAAY,2BAAOF,eAAe,MAChGD,KAAMzC,EAAe,OAAS,WAAY6C,MAAO/C,EAAegD,SA3FhE,SAACC,GACzBhD,EAAiBgD,EAAEC,OAAOH,UA2FN,sBAAKP,GAAG,gBAAgBW,QAxFhB,WAC5BhD,GAAiBD,IAuF6DkD,YArFlD,SAACC,GAC7BA,EAAMC,kBAoFc,UACKpD,EAAe,cAAC,IAAD,CAAasC,GAAG,cAAiB,cAAC,IAAD,CAAUA,GAAG,cADlE,UAGJ,qBAAKA,GAAG,iBACR,sBAAKA,GAAG,WAAR,UACI,uBAAOA,GAAG,WAAWG,KAAK,WAAWK,SAtFtC,SAACC,GACpB5C,EAAc4C,EAAEC,OAAOK,UAqF4DA,QAASnD,IACxE,uBAAOoD,IAAI,aACX,sBAAMhB,GAAG,OAAT,gDAEJ,wBAAQA,GAAG,eAAeW,QAAStC,EAAnC,SACI,mBAAG2B,GAAG,cAAN,kCAEJ,qBAAKA,GAAG,SAAR,gCACA,qBAAKD,UAAU,iBAAiBC,GAAG,OAAOC,IAAK,8CAA+CC,IAAI,+B,gCCrInH,SAASe,IACZ,IAAMC,EAAW,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAEhE,OACI,8BACI,cAAC,IAAD,CACIC,QAAS,CAACC,KACVC,KAAM,CACFC,OAAQ,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAC3CC,SAAU,CACN,CAEIC,gBAAiB,uBACjBC,YAAa,UACbC,YAAa,IACbC,MAAM,EACNN,KAAO,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IACtCO,YAAa,EACjBC,iBAAiB,IAEjBC,qBAAsB,SAAUC,GAC5B,IAAMC,EAAMC,KAAKD,IAAIE,MAAM,KAAMhB,GACjC,OAAIA,EAASa,EAAQI,aAAeH,EACzB,UAEJ,WAKvBI,QAAS,CAELC,OAAQ,CACJC,QAAS,CACLC,KAAM,GACNC,MAAO,GACPC,OAAQ,EACRC,IAAK,KAGbC,OAAQ,CACJC,EAAG,CACCC,aAAc,EACdC,aAAcb,KAAKD,IAAIE,MAAM,KAAMhB,GAAY,GAC/C6B,MAAO,CACHC,KAAM,CAACC,KAAM,KAAMC,OAAO,WAAYC,OAAO,QAC7CC,MAAO,UACPC,SAAU,IAEdC,KAAM,CAEF7B,YAAa,YAEb8B,UAAW,EACXH,MAAO,6BAGfI,EAAE,CACEF,KAAM,CAEF7B,YAAa,2BACbC,YAAY,IACZ0B,MAAO,SAAUrB,GACb,IAAMC,EAAMC,KAAKD,IAAIE,MAAM,KAAMhB,GACjC,OAAIA,EAASa,EAAQ0B,KAAKlD,SAAWyB,EAC1B,YAEJ,aAEX0B,WAAW,CAAC,GAAG,GACfH,UAAU,KAEdR,MAAO,CACHC,KAAM,CAACC,KAAM,KAAMC,OAAO,WAAYC,OAAO,QAC7CC,MAAO,UACPC,SAAU,KAItBlC,QAAS,CACLwC,OAAQ,CACJC,SAAS,GAEbC,WAAY,CACRC,OAAQ,MACRC,MAAO,MACPC,OAAQ,GACRZ,MAAO,UACP5B,gBAAiB,UACjBC,YAAa,UACba,QAAQ,CAACI,IAAI,EAAGD,OAAO,EAAGD,MAAM,GAAID,KAAK,IACzCb,YAAa,IACbuC,aAAc,GACdC,eAAe,EACflB,KAAM,CAACC,KAAM,KAAMC,OAAO,WAAYC,OAAO,QAC7CgB,UAAW,SAAU5D,EAAOwB,GACxB,OAAIE,KAAKD,IAAIE,MAAM,KAAMhB,IAAaX,EAC3B,4BAAUwB,EAAQqC,MAAM/C,KAAKC,OAAOS,EAAQI,WAAa,SAE7D,aAUhC,SAASkC,IACZ,OACI,8BACI,cAAC,IAAD,CACQhD,KAAM,CACFE,SAAU,CACN,CACIF,KAAM,CAAC,GAAI,IACXG,gBAAiB,CAAE,UAAU,WAC7BE,YAAa,IAGrB4C,iBAAiB,EACjBnB,OAAQ,GAEZf,QAAS,CACLmC,YAAY,EACZC,qBAAqB,EACrBC,OAAQ,GAERC,MAAO,CACHd,SAAS,GAEbD,OAAQ,CACJC,SAAS,GAEbvB,OAAQ,CACJC,QAAS,QAO9B,SAASqC,IACZ,OACI,gCACI,cAAC,IAAD,CACQtD,KAAM,CACFE,SAAU,CACN,CACIF,KAAM,CAAC,EAAG,IACVG,gBAAiB,CAAC,UAAW,WAC7BE,YAAa,IAGrB4C,iBAAiB,EACjBnB,OAAQ,GAEZf,QAAS,CACLmC,YAAY,EACZC,qBAAqB,EACrBC,OAAQ,GACRC,MAAO,CACHd,SAAS,GAEbD,OAAQ,CACJC,SAAS,GAGbvB,OAAQ,CACJC,QAAS,MAIrB,sBAAKtC,GAAG,gBAAR,UAAwB,sBAAMA,GAAG,OAAT,gBAAyB,sBAAMA,GAAG,MAAT,eAAuB,sBAAMA,GAAG,MAAT,sBCjFzE4E,MA9Ff,WAEI,OACI,8BACI,sBAAK7E,UAAU,UAAUC,GAAG,YAA5B,UACA,sBAAKD,UAAU,gBAAf,UAA+B,cAAC,IAAD,CAAaA,UAAU,SAAtD,8BACA,sBAAKA,UAAU,iBAAf,UACQ,sBAAKA,UAAU,YAAYC,GAAG,aAA9B,UACI,qBAAKD,UAAU,aAAf,oDACA,sBAAKA,UAAU,qBAAf,UACI,sBAAKA,UAAU,gBAAgBC,GAAG,cAAlC,UACI,qBAAKD,UAAU,iBAAf,oDACA,gCACI,sBAAMA,UAAU,cAAhB,gBACA,sBAAMA,UAAU,MAAhB,0BAGR,sBAAKA,UAAU,gBAAgBC,GAAG,mBAAlC,UACA,qBAAKD,UAAU,iBAAf,oDACA,sBAAKA,UAAU,aAAf,UACI,mBAAGA,UAAU,OAAb,0BADJ,IAC+B,mBAAGA,UAAU,QAAb,6BAE/B,gCACQ,sBAAMA,UAAU,cAAhB,iBACA,sBAAMA,UAAU,MAAhB,0BAGR,sBAAKA,UAAU,gBAAgBC,GAAG,aAAlC,UACA,qBAAKD,UAAU,iBAAf,2DACA,sBAAKA,UAAU,aAAf,UACI,mBAAGA,UAAU,OAAb,0BADJ,IAC+B,mBAAGA,UAAU,QAAb,6BAE/B,qBAAKA,UAAU,iBAAf,SAAgC,cAACsE,EAAD,MAChC,sBAAKtE,UAAU,QAAQC,GAAG,WAA1B,UACI,qBAAKD,UAAU,OAAf,0BACA,qBAAKA,UAAU,QAAf,uBACA,qBAAKA,UAAU,UAAf,sBAEJ,sBAAKA,UAAU,QAAQC,GAAG,OAA1B,UACI,qBAAKD,UAAU,OAAf,oBACA,qBAAKA,UAAU,QAAf,uBACA,qBAAKA,UAAU,UAAf,yBAGJ,sBAAKA,UAAU,gBAAgBC,GAAG,aAAlC,UACA,qBAAKD,UAAU,iBAAf,+DACA,sBAAKA,UAAU,aAAf,UACI,mBAAGA,UAAU,OAAb,0BADJ,IAC+B,mBAAGA,UAAU,QAAb,6BAE/B,qBAAKA,UAAU,aAAf,SAA4B,cAACkB,EAAD,CAAejB,GAAG,6BAKtD,sBAAKD,UAAU,YAAYC,GAAG,aAA9B,UACI,qBAAKD,UAAU,aAAf,gEACA,sBAAKA,UAAU,qBAAf,UACI,sBAAKA,UAAU,gBAAgBC,GAAG,kBAAlC,UACA,qBAAKD,UAAU,iBAAf,8EACI,qBAAKA,UAAU,iBAAf,SAAgC,cAAC4E,EAAD,MAChC,sBAAK3E,GAAG,SAAR,UACI,sBAAKA,GAAG,MAAR,UACI,qBAAKA,GAAG,OAAR,sCACA,qBAAKA,GAAG,aAEZ,sBAAKA,GAAG,KAAR,UACI,qBAAKA,GAAG,OAAR,sCACA,qBAAKA,GAAG,mBAIpB,sBAAKD,UAAU,gBAAgBC,GAAG,mBAAlC,UACI,sBAAKD,UAAU,kBAAkBC,GAAG,OAApC,UACI,qBAAKD,UAAU,QAAf,gEACA,qBAAKA,UAAU,QAAf,qBAEJ,sBAAKA,UAAU,kBAAkBC,GAAG,WAApC,UACI,qBAAKD,UAAU,QAAf,gEACA,qBAAKA,UAAU,QAAf,oBAEJ,sBAAKA,UAAU,kBAAkBC,GAAG,UAApC,UACI,qBAAKD,UAAU,QAAf,kEACA,qBAAKA,UAAU,QAAf,oBAEJ,qBAAKC,GAAG,aAAR,sD,8BC5CjB6E,EA1Cf,4MACIC,SAAW,WACPC,OAAO3F,eAAe4F,WAAW,UACjCD,OAAO3F,eAAe4F,WAAW,SACjCD,OAAO3F,eAAe4F,WAAW,YACjCD,OAAO3F,eAAe4F,WAAW,WAEjCpG,SAASiB,SAASC,KAAO,KAPjC,4CAUI,WACI,IAAMmF,EAAW7F,eAAe8F,QAAQ,YAElC1F,EAAW,sBADCJ,eAAe8F,QAAQ,WACY,OAErD,OACI,sBAAKnF,UAAU,UAAUC,GAAG,OAA5B,UACI,sDACA,sBAAKD,UAAU,iBAAf,UACI,sBAAKA,UAAU,YAAYC,GAAG,eAA9B,UACI,oDAEA,qBAAKC,IAAKT,EAAUU,IAAI,cAExB,yDAAa+E,KACb,wBAAQtE,QAASwE,KAAKL,SAASM,KAAKD,MAApC,yCAEJ,qBAAKpF,UAAU,YAAYC,GAAG,SAA9B,SACI,6DAEJ,qBAAKD,UAAU,YAAYC,GAAG,SAA9B,SACI,6DAEJ,qBAAKD,UAAU,YAAYC,GAAG,SAA9B,SACI,gEAlCxB,GAA0BqF,a,WCGMA,Y,MC4DjBC,MA/Df,YAAmE,IAA5CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,eAAgBC,EAAoB,EAApBA,kBACtCC,EAAc,qBAGK,GAApBH,EAAMI,WACLD,EAAc,qBAEVH,EAAMK,cAAgBL,EAAMI,aAAYD,EAAY,4BAE5D,IAEIG,EAAc,YACfN,EAAMO,UAAYN,IACjBK,EAAc,aAGlB,IAAIE,EAAc,GACVC,EAAYT,EAAMU,WAoB1B,OAnBoB,MAAbD,EACCD,EAAc,4BAETG,MAAMF,IAEXD,EAAcC,EACS,GAApBT,EAAMI,YAAgC,UAAbK,IACxBD,EAAc,WAIlBA,EAAc,sBAAOC,EASzB,qBAAIhG,GAAG,qBAAqBW,QANhC,WAEI8E,EAAkBF,EAAMO,WAI+BK,MAAO,CAAE3E,gBAAgBqE,GAAhF,UACI,qBAAK5F,IA9BO,qCA8BWC,IAAI,iBAAiBH,UAAU,yBAClD,sBAAKC,GAAK,eAAeD,UAAU,QAAnC,UAEI,sBAAMC,GAAG,sBAAsBD,UAAU,eAAzC,0BACA,sBAAMC,GAAG,eAAeD,UAAU,eAAlC,SAAmDwF,EAAMO,cAG7D,sBAAK9F,GAAK,eAAeD,UAAU,QAAnC,UACA,sBAAMC,GAAG,cAAcD,UAAU,eAAjC,SAAiDgG,IACjD,uBAAM/F,GAAG,sBAAsBD,UAAU,eAAzC,cAA0D2F,KAC1C,sBAAfA,EACG,qBAAK1F,GAAG,YAAR,SACI,sBAAKA,GAAG,kBAAR,UACA,mBAAGA,GAAG,gBACN,mBAAGA,GAAG,qBAGR,cAAC,IAAD,CAAeD,UAAU,uBChD/C,SAASqG,EAAUC,GACf,IAAIC,EAAc,qCACfD,EAAME,SAAWF,EAAMb,eACtBc,EAAc,sCAEQ,cAAlBD,EAAMG,UAA2C,KAAfH,EAAMI,QAC5CH,EAAc,sCAElB,IAAMI,EAAQL,EAAMK,KAAO,GACrBC,EAAQN,EAAMM,KAAO,GAO3B,OACI,qBAAK5G,UAAU,QAASY,QAL5B,WAEI0F,EAAMZ,kBAAkBY,EAAME,UAGqBJ,MAAO,CAAE5D,KAAMmE,EAAK,KAAMhE,IAAKiE,EAAK,MAAvF,SACI,qBAAK1G,IAAKqG,EAAapG,IAAI,iBAAiBH,UAAU,qBAzBlEN,IAAMC,SAASkH,QAAUC,uCACzBpH,IAAMC,SAASC,QAAQmH,KAAK,gBAAkB,oCA8F/BC,MAnCf,YAAoF,IAA3DvB,EAA0D,EAA1DA,eAAgBwB,EAA0C,EAA1CA,UAAWvB,EAA+B,EAA/BA,kBAAmBe,EAAY,EAAZA,SAKnE,OAAIQ,EAAUC,OAAS,GAAe,WAAVT,EAEpB,8BACKQ,EAAUE,KAAI,SAAA3B,GAAK,OAEhB,cAACa,EAAD,CACyBZ,eAAgBA,EAAgBC,kBAAmBA,EAAmBe,SAAUA,EACrGD,QAAShB,EAAMO,SAAUW,MAAOlB,EAAMkB,MAAOC,KAAMnB,EAAM4B,OAAQR,KAAMpB,EAAM6B,QADxE7B,EAAMO,gBAY3BpH,QAAQC,IAAI,0FAER,0B,MC/DG0I,MAjBf,YAAwE,IAAvD3C,EAAsD,EAAtDA,MAAM4C,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SACzD,OAAKF,EACEG,uBACL,sBAAK3H,GAAG,QAAR,UACE,qBAAKA,GAAG,YACR,sBAAKA,GAAG,YAAYD,UAAU,kCAA9B,UACE,qBAAIC,GAAG,cAAcD,UAAU,eAA/B,UAA8C,cAAC,IAAD,CAAqBA,UAAU,gBAAgB2E,KAC7F,sBAAK1E,GAAG,gBAAgBD,UAAU,eAAlC,UAAiD,sBAAMA,UAAU,eAAhB,SAAgCuH,IAAkBC,KACjG,wBAAQvH,GAAG,gBAAgBD,UAAU,kCAAkCY,QAAS+G,EAAhF,gCACA,wBAAQ1H,GAAG,YAAYD,UAAU,kCAAkCY,QAAS8G,EAA5E,0BAGN7I,SAASC,eAAe,UAXR,MCDb,SAAe+I,IAAtB,+B,4CAAO,kCAAAtJ,EAAA,6DAEGuJ,EAASzI,eAAe8F,QAAQ,UAChC4C,EAAS1I,eAAe8F,QAAQ,WAClC6C,EAAS,CACTpI,QAAS,CACL,cAAiB,SAAUmI,IANhC,kBAawBrI,IAAMuI,IAAI,0BAA0BH,EAAQE,GAbpE,UAwBwB,MAXjBE,EAbP,QAwBcC,OAxBd,0CAyBY,EAAC,EAAOD,EAAS5G,OAzB7B,iCA6BQ,CAAC4G,EAAS5G,KAAK8G,MAAOF,EAAS5G,KAAK+G,UA7B5C,iEAgCC1J,QAAQC,IAAI,6CAA+C,KAAEyJ,SAhC9D,kBAkCQ,EAAC,EAAM,KAAEA,UAlCjB,2D,sBAsCA,SAAeC,EAAtB,oC,4CAAO,WAAmCR,EAAQS,GAA3C,2BAAAhK,EAAA,6DACGwJ,EAAS1I,eAAe8F,QAAQ,WAClC6C,EAAS,CACT,QAAW,CACP,cAAiB,SAAWD,IAJjC,kBAQwBrI,IAAMuI,IAAI,6BAA+BH,EAAQE,GARzE,UAQOE,EARP,OASKE,EAAQF,EAAS5G,KAAK8G,MAC1BzJ,QAAQC,IAAI,sEACZD,QAAQC,IAAIsJ,IAERE,EAbL,wBAeKzJ,QAAQC,IAAIsJ,EAAS5G,KAAK+G,SAC1B1J,QAAQC,IAAIsJ,EAAS5G,KAAKkH,OAhB/B,kBAiBY,CAACJ,EAAOF,EAAS5G,KAAK+G,UAjBlC,eAoBS7B,EAAU0B,EAAS5G,KAAKyE,SACxB0C,EAAUP,EAAS5G,KAAKoH,SACxBC,EAAYC,EAAW,CAACL,EAAkBE,EAASjC,IAtB5D,kBAuBY,CAACmC,EAAWnC,IAvBxB,iEA0BC7H,QAAQC,IAAI,qDAAuD,KAAEyJ,SA1BtE,kBA4BQ,EAAC,EAAM,KAAEA,UA5BjB,2D,sBA+BA,SAAeQ,EAAtB,oC,4CAAO,WAA4Bf,EAAQtB,GAApC,mBAAAjI,EAAA,6DACGwJ,EAAS1I,eAAe8F,QAAQ,WAClC6C,EAAS,CACT,QAAW,CACP,cAAiB,SAAWD,IAJjC,kBAQwBrI,IAAMuI,IAAI,yBAA2BH,EAAQ,IAAItB,EAASwB,GARlF,cAQOE,EARP,OASCvJ,QAAQC,IAAI,mDACZD,QAAQC,IAAIsJ,GAVb,kBAWQ,CAACA,EAAS5G,KAAK8G,MAAOF,EAAS5G,KAAK+G,UAX5C,yCAcC1J,QAAQC,IAAI,iDAAmD,KAAEyJ,SAdlE,kBAgBQ,EAAC,EAAM,KAAEA,UAhBjB,2D,sBAoBA,SAAeS,EAAtB,oC,4CAAO,WAA4BhB,EAAQtB,GAApC,yBAAAjI,EAAA,6DACGwJ,EAAS1I,eAAe8F,QAAQ,WAClC6C,EAAS,CACT,QAAW,CACP,cAAiB,SAAWD,IAJjC,kBAQwBrI,IAAMuI,IAAI,sBAAwBH,EAAS,IAAMtB,EAASwB,GARlF,UAQOE,EARP,OASKE,EAAQF,EAAS5G,KAAK8G,MAC1BzJ,QAAQC,IAAI,wDACZD,QAAQC,IAAIsJ,IAERE,EAbL,wBAeKzJ,QAAQC,IAAIsJ,EAAS5G,KAAK+G,SAf/B,kBAgBY,CAACD,EAAOF,EAAS5G,KAAK+G,UAhBlC,eAmBSI,EAAUP,EAAS5G,KAAKoH,SACxBC,EAAYC,EAAW,CAAC,EAAGH,EAASjC,IApB7C,kBAqBY,CAACmC,EAAWT,EAASC,SArBjC,iEAwBCxJ,QAAQC,IAAI,8CAAgD,KAAEyJ,SAxB/D,kBA0BQ,EAAC,EAAM,KAAEA,UA1BjB,2D,sBA8BP,SAASO,EAAWG,GAChB,IAAMhB,EAAS1I,eAAe8F,QAAQ,WAEtCxG,QAAQC,IAAI,oCAAqCmK,GACjD,IACI,IAAMb,EAAWxI,IAAM,CACnBsJ,OAAQ,OAERC,IAAK,mBACL3H,KAAM,CACF4H,SAAUH,EAAO,GACjBL,SAAUK,EAAO,GACjBhD,SAAUgD,EAAO,IAEnBnJ,QAAS,CAAE,cAAiB,SAAUmI,KAK5C,OAFApJ,QAAQC,IAAI,gDACZD,QAAQC,IAAIsJ,IACL,EAET,MAAOxH,GAGL,OAFA/B,QAAQC,IAAI,iJAA8D8B,EAAE2H,UAErE,GCnJf,SAASc,EAAU7C,GACf,IAAML,EAAYK,EAAMhF,KAAN,WACZqF,EAAQL,EAAMhF,KAAN,EAAmB,GAC3BsF,EAAQN,EAAMhF,KAAN,EAAkB,GAEhC,OACI,qBAAKtB,UAAU,mCAAmCY,QAAS0F,EAAM1F,QAASwF,MAAO,CAAC5D,KAAKmE,EAAK,KAAMhE,IAAIiE,EAAK,MAA3G,SACI,qBAAK5G,UAAU,iCAAf,SAAiDiG,MDV7DvG,IAAMC,SAASkH,QAAUC,uCAIzBpH,IAAMC,SAASC,QAAQmH,KAAK,gBAAkB,oCCsE/BqC,MA1Df,YAAqC,IAAbC,EAAY,EAAZA,UAKpB,EAA4C/L,mBAAS,IAArD,mBAAOgM,EAAP,KAAuBC,EAAvB,KAEA,EAAsCjM,oBAAS,GAA/C,mBAAOkM,EAAP,KAAoBC,EAApB,KACA,EAA4CnM,mBAAS,GAArD,mBAAOoM,EAAP,KAAuBC,EAAvB,KARgC,4CA6BhC,oCAAApL,EAAA,6DACUuJ,EAASzI,eAAe8F,QAAQ,UAD1C,SAGiCmD,EAAoBR,EAAQ4B,GAH7D,mCAGStB,EAHT,KAGgBC,EAHhB,KAISD,EAIDzJ,QAAQC,IAAI,+CAAgDyJ,GAH5D1J,QAAQC,IAAI,iDAAkDyJ,GAMlEoB,GAAe,GACfF,EAAkB,IAClBI,EAAkB,GAbtB,6CA7BgC,sBA8ChC,OACI,gCACKN,EAAUlC,KAAI,SAAAyC,GAAS,OACpB,cAACT,EAAD,CAAW7H,KAAMsI,EAAuChJ,QAAS,kBAvC7E,SAA0BiJ,GACtB,IAAOC,EAAUD,EAAU,GACpB5D,EAAY4D,EAAU,GACzBE,EAAkB,GAGlBA,EAFA5D,MAAMF,GAEYA,EAAU,eAGV,qBAAMA,EAAU,SAGtCwD,GAAe,GACfF,EAAkBQ,GAClBJ,EAAkBG,GAElBnL,QAAQC,IAAI,sBAuBmEoL,CAAiB,CAACJ,EAAS,SAAcA,EAAS,eAAxFA,EAAS,aAE9C,cAAC,EAAD,CAAOjF,MAlDI,yCAkDe4C,UAAW+B,EAAiB9B,QAjDzC,kEAiDgEC,KAAM+B,EAAa7B,SAAU,kBAAI8B,GAAe,IACrH/B,SApDgB,iD,QCNFpC,Y,MC8EnB2E,MAjFf,YAAiE,IAApCxE,EAAmC,EAAnCA,eAAeC,EAAoB,EAApBA,kBAExC,EAAoCpI,mBAAS,gBAA7C,mBAAO4M,EAAP,KAAmBC,EAAnB,KACA,EAAwC7M,mBAAS,gBAAjD,mBAAO8M,EAAP,KAAqBC,EAArB,KACA,EAA4C/M,mBAAS,gBAArD,mBAAOgM,EAAP,KAAuBC,EAAvB,KACA,EAAsCjM,oBAAS,GAA/C,mBAAOkM,EAAP,KAAoBC,EAApB,KAL4D,4CA0C5D,oCAAAlL,EAAA,6DACUuJ,EAASzI,eAAe8F,QAAQ,UAD1C,SAEiC0D,EAAaf,EAAQrC,GAFtD,mCAES2C,EAFT,KAEgBC,EAFhB,KAGSD,EAIDkC,MAAM,uCAAwCjC,GAH9C1J,QAAQC,IAAI,yCAA0CyJ,GAKtDoB,GAAe,GACf/D,EAAkB,GAV1B,6CA1C4D,kEAuD5D,oCAAAnH,EAAA,6DACUuJ,EAASzI,eAAe8F,QAAQ,UAD1C,SAEiC2D,EAAahB,EAAQrC,GAFtD,mCAES2C,EAFT,KAEgBC,EAFhB,KAGSD,EAIDkC,MAAM,uCAAwCjC,GAH9C1J,QAAQC,IAAI,yCAA0CyJ,GAK1DoB,GAAe,GACf/D,EAAkB,GAVtB,6CAvD4D,sBAoE5D,OACI,sBAAKzF,GAAG,gBAAR,UACI,wBAAQA,GAAG,SAASD,UAAU,kCAAkCY,QA9CxE,WAGI,GAFAjC,QAAQC,IAAI,2BAEU,GAAlB6G,EAKY,OAJZgE,EAAe,WACfU,EAAc,mCACdZ,EAAkB,wCAClBc,EAAgB,6DAIpBZ,EAAe,UACfU,EAAc,mCACdZ,EAAkB9D,EAAe,uBACjC4E,EAAgB,6DAgCZ,0BACA,wBAAQpK,GAAG,OAAOD,UAAU,kCAAkCY,QAhEtE,WAGI,GAFAjC,QAAQC,IAAI,yBAEU,GAAlB6G,EAKA,OAJAgE,EAAe,WACfU,EAAc,mCACdZ,EAAkB,wCAClBc,EAAgB,6DAIpBZ,EAAe,QACfU,EAAc,mCACdZ,EAAkB9D,EAAe,uBACjC4E,EAAgB,mEAkDZ,gCACA,cAAC,EAAD,CAAO1F,MAAOuF,EAAY3C,UAAW+B,EAAgB9B,QAAS4C,EAAc3C,KAAM+B,EAAa7B,SAAU,kBAAI8B,GAAe,IACpH/B,SAAyB,UAAf8B,EAzEkC,2CA0E3B,QAAfA,EA1E0C,2CA2EtC,kBAAIC,GAAe,U,gBCjE7C/J,IAAMC,SAASkH,QAAUC,uCACzBpH,IAAMC,SAASC,QAAQmH,KAAK,gBAAkB,oCAuG/BwD,MApGf,WAEI,MAA4CjN,mBAAS,GAArD,mBAAOmI,EAAP,KAAuBC,EAAvB,KACA,EAAkCpI,mBAAS,IAA3C,mBAAO2J,EAAP,KAAkBuD,EAAlB,KACA,EAAkClN,mBAAS,IAA3C,mBAAO+L,EAAP,KAAkBoB,EAAlB,KAEMC,EAAQrL,eAAe8F,QAAQ,SAC/BwF,EAAmB,wCAA0CD,EAAQ,OAGvE1C,EAAS,CACTpI,QAAS,CACL,cAAiB,SAJVP,eAAe8F,QAAQ,aARd,4CA+BxB,kCAAA5G,EAAA,sEACgCsJ,IADhC,sCACSO,EADT,KACgBjJ,EADhB,MAEQiJ,EAFR,uBAGQkC,MAAM,sEAAyClC,GAHvD,0BAMIqC,EAAatL,GANjB,6CA/BwB,sBA2DxB,OAjBAhB,qBAAU,WACN,IAAMyM,EA5BV,WACI,IAAM9C,EAASzI,eAAe8F,QAAQ,UAElCyF,EAAWC,aAAY,WACvBlM,QAAQC,IAAI,sCACZc,IAAMuI,IAAI,sBAAwByC,EAAO1C,GACpC8C,MAAK,SAAC5C,GACHsC,EAAatC,EAAS5G,KAAKyJ,eAAeC,QAAO,SAAAxF,GAAK,OAAIA,EAAMyF,MAAQnD,SAE3EoD,OAAM,SAAC9C,GAEJ,OADAzJ,QAAQC,IAAI,mCACLgM,OAEhB,KACH,OAAOA,EAcUO,GACjB,OAAO,kBAAMC,cAAcR,MAC5B,IAIHzM,qBAAU,WACNQ,QAAQC,IAAI,cAlDQ,mCAmDpByM,KAED,IAOC,8BACI,sBAAKrL,UAAU,UAAUC,GAAG,MAA5B,UAGI,sBAAKD,UAAU,gBAAf,cAAgC,cAAC,IAAD,CAAgBA,UAAU,SAA1D,+BAEA,sBAAKA,UAAU,iBAAf,UACI,sBAAKA,UAAU,wBAAwBC,GAAG,WAA1C,UACI,qBAAKA,GAAG,UAAR,SACI,qBAAKA,GAAG,cAAR,SACI,oBAAGD,UAAU,eAAb,UACI,sBAAMA,UAAU,8BAAhB,SAA8C,cAAC,IAAD,CAAYA,UAAU,aADxE,mCAEW,sBAAMA,UAAU,eAAhB,mDAFX,gDAEkE,sBAAMA,UAAU,eAAhB,6CAFlE,4BAKR,sBAAKC,GAAG,gBAAR,UACI,cAAC,EAAD,CAAewF,eAAgBA,EAAgBwB,UAAWA,EAAWvB,kBAAmBA,EAAmBe,SAAU,YACrH,cAAC,EAAD,CAAe4C,UAAWA,IAC1B,qBAAKnJ,IAAKyK,EAAkBxK,IAAI,qBAAqBH,UAAU,qBAAqBY,QAvB5G,WACI8E,EAAkB,YA0BN,sBAAK1F,UAAU,YAAYC,GAAG,eAA9B,UACI,sBAAKD,UAAU,0BAAf,UAAyC,cAAC,IAAD,CAAiBA,UAAU,gBAApE,4CACA,6BACKiH,EAAUE,KAAI,SAAA3B,GAAK,OAChB,aADwB,CACvB,EAAD,CAAcA,MAAOA,EAA4BC,eAAgBA,EAAgBC,kBAAmBA,GAAnEF,EAAMO,eAG/C,cAAC,EAAD,CAAoBN,eAAgBA,EAAgBC,kBAAmBA,gBCzEhF4F,MApCf,YAA6C,IAAzB9F,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,eACvB,GAAY,MAATD,EAAe,OAAO,KACpB,GAAIA,EAAMO,UAAYN,EAAgB,OAAO,KAE9C,IACIO,EAAc,GACdC,EAAYT,EAAMU,WAYtB,OAVIF,EADY,MAAbC,EACe,4BAETE,MAAMF,GAEGA,EAAU,eAGV,sBAAOA,EAAU,SAK/B,sBAAKhG,GAAG,aAAR,UACI,qBAAKA,GAAG,sBAAR,SACA,qBAAKC,IAlBO,gCAkBWC,IAAI,kBAAkBH,UAAU,sBAEvD,sBAAKC,GAAG,YAAR,UACI,sBAAKD,UAAU,eAAf,+BAAsC,sBAAMA,UAAU,eAAhB,SAAgCwF,EAAMO,cAC5E,sBAAK/F,UAAU,eAAf,kCAAoC,sBAAMA,UAAU,eAAhB,SAAgCgG,OACpE,sBAAKhG,UAAU,eAAf,kCAAqCwF,EAAM+F,kB,SChB/D7L,IAAMC,SAASkH,QAAUC,uCACzBpH,IAAMC,SAASC,QAAQmH,KAAK,gBAAkB,oCAuF/ByE,OArFf,WAEI,MAA4ClO,mBAAS,GAArD,mBAAOmI,EAAP,KAAuBC,EAAvB,KACA,EAAgDpI,qBAAhD,mBACA,GADA,UACkCA,mBAAS,KAA3C,mBAAO2J,EAAP,KAAkBuD,EAAlB,KAEME,EAAQrL,eAAe8F,QAAQ,SAC/BwF,EAAmB,wCAA0CD,EAAQ,kBAGvE1C,EAAS,CACTpI,QAAS,CACL,cAAiB,SAJVP,eAAe8F,QAAQ,aAqCtC,OAZAhH,qBAAU,WACN,IAAMyM,EAnBV,WACmBvL,eAAe8F,QAAQ,UAAtC,IAEIyF,EAAWC,aAAY,WACvBlM,QAAQC,IAAI,sCACZc,IAAMuI,IAAI,sBAAwByC,EAAO1C,GACpC8C,MAAK,SAAC5C,GACHsC,EAAatC,EAAS5G,KAAKyJ,mBAE9BG,OAAM,SAAC9C,GAEJ,OADAzJ,QAAQC,IAAI,mCACLgM,OAEhB,KACH,OAAOA,EAKUO,GACjB,OAAO,kBAAMC,cAAcR,MAC5B,IAUC,8BACI,sBAAK5K,UAAU,UAAUC,GAAG,MAA5B,UACI,sBAAKD,UAAU,6BAAf,UAA4C,cAAC,IAAD,CAAeA,UAAU,SAArE,8BAEA,sBAAKA,UAAU,iBAAf,UACI,sBAAKA,UAAU,wBAAwBC,GAAG,WAA1C,UACI,qBAAKA,GAAG,UAAR,SACI,qBAAKA,GAAG,cAAR,SACA,oBAAGD,UAAU,eAAb,UACQ,sBAAMA,UAAU,8BAAhB,SAA8C,cAAC,IAAD,CAAeA,UAAU,aACvE,sBAAMA,UAAU,eAAhB,sEAFR,yCAMJ,sBAAKC,GAAG,gBAAR,UACI,cAAC,EAAD,CAAewF,eAAgBA,EAAgBwB,UAAWA,EAAWvB,kBAAmBA,EAAmBe,SAAU,eACrH,qBAAKvG,IAAKyK,EAAkBxK,IAAI,qBAAqBH,UAAU,qBAAsBY,QArB7G,WACI8E,EAAkB,YAwBN,sBAAK1F,UAAU,YAAYC,GAAG,aAA9B,UACI,sBAAKD,UAAU,0BAAf,UAAyC,cAAC,KAAD,CAAQA,UAAU,gBAA3D,+BACA,cAAC,EAAD,CAAWyF,eAAgBA,EAAgBwB,UAAWA,IACtD,8BACCA,EAAUE,KAAI,SAAA3B,GAAK,OAChB,aADwB,CACvB,EAAD,CAAWA,MAAOA,EAA6BC,eAAgBA,GAAjCD,EAAMO,eAGxC,cAAC,EAAD,CAAoBN,eAAgBA,EAAgBC,kBAAmBA,gB,MC7E/F,SAAS+F,GAAT,GAA8B,IAARjG,EAAO,EAAPA,MAClB,OACI,+BACI,qCAAQA,EAAMO,YACd,uCAAwB,KAAdP,EAAMyF,KAAc,eAAOzF,EAAMyF,QAC3C,uCAAUzF,EAAM+F,QAAhB,YAbZ7L,IAAMC,SAASkH,QAAUC,uCAKzBpH,IAAMC,SAASC,QAAQmH,KAAK,gBAAkB,oCAwF/B2E,OA1Ef,WACI,MAA8CpO,mBAAS,IAAvD,mBAAOqO,EAAP,KAAwBC,EAAxB,KAEMlB,EAAQrL,eAAe8F,QAAQ,SAErC,SAAS0G,IACLnM,IAAMuI,IAAI,4BAA4ByC,GACrCI,MAAK,SAAC5C,GACH0D,EAAmB1D,EAAS5G,KAAKwK,iBAEpCZ,OAAM,SAAC9C,GACJzJ,QAAQC,IAAI,mCAuBpB,OAPAT,qBAAU,WACN0N,MACD,CAACF,IAKAA,EAAgBzE,OAAS,EAErB,sBAAKlH,UAAU,6BAAf,UACI,sBAAKA,UAAU,YAAYC,GAAG,iBAA9B,UACI,8EACA,8BAvBE0L,EAAgBX,QAAO,SAAAxF,GAAK,MAAmB,MAAfA,EAAMyF,QACvC/D,YAwBL,sBAAKlH,UAAU,uBAAf,UACI,2DACA,8BACI,6BACK2L,EAAgBxE,KAAI,SAAA3B,GAAK,OACtB,cAACiG,GAAD,CAAajG,MAAOA,GAAYA,EAAMO,wBAS9DpH,QAAQC,IAAI,yDAER,sBAAKoB,UAAU,6BAAf,UACI,sBAAKA,UAAU,YAAYC,GAAG,iBAA9B,UACI,8EACA,uCAEJ,sBAAKD,UAAU,uBAAf,UACI,2DACA,8BACI,wBAAQA,UAAU,cAAcY,QAASiL,EAAzC,uDClFjB,SAAeE,GAAtB,mC,8CAAO,WAA8BjE,GAA9B,yBAAAvJ,EAAA,+EAGwBmB,IAAMuI,IAAI,gCAAkCH,GAHpE,UAGOI,EAHP,OAIKE,EAAQF,EAAS5G,KAAK8G,MAC1BzJ,QAAQC,IAAI,6DACZD,QAAQC,IAAIsJ,IAERE,EARL,wBAUKzJ,QAAQC,IAAIsJ,EAAS5G,KAAK+G,SAV/B,kBAWY,CAACD,EAAOF,EAAS5G,KAAK+G,UAXlC,eAcS7B,EAAU0B,EAAS5G,KAAKyE,SACxBiG,EAAY9D,EAAS5G,KAAK2K,WAC1BxD,EAAUP,EAAS5G,KAAKoH,SACxBC,EAAYC,GAAW,CAACoD,EAAWvD,EAASjC,IAjBrD,kBAkBY,CAACmC,EAAWnC,IAlBxB,iEAqBC7H,QAAQC,IAAI,iDAAmD,KAAEyJ,SArBlE,kBAuBQ,EAAC,EAAM,KAAEA,UAvBjB,2D,sBA0BA,SAAe6D,GAAtB,mC,8CAAO,WAA4BpE,GAA5B,yBAAAvJ,EAAA,sEAuBCmB,IAAMuI,IAAI,8BAAgCH,GACrCgD,MAAK,SAAC5C,GAGH,GAFAvJ,QAAQC,IAAI,2DACZD,QAAQC,IAAIsJ,GACW,KAAnBA,EAASC,OAAe,CAExB,MAAO,EAAC,EADM,4DAIrB+C,OAAM,SAAC9C,GAGJ,OAFAzJ,QAAQC,IAAI,6DACZD,QAAQC,IAAIwJ,GACL,CAACA,EAAOF,EAAS5G,KAAK+G,YAnCtC,SAwCwB3I,IAAMuI,IAAI,8BAAgCH,GAxClE,UAwCOI,EAxCP,OAyCKE,EAAQF,EAAS5G,KAAK8G,MAC1BzJ,QAAQC,IAAI,4DACZD,QAAQC,IAAIsJ,IACRE,EA5CL,wBA6CKzJ,QAAQC,IAAIsJ,EAAS5G,KAAK+G,SA7C/B,kBA8CY,CAACD,EAAOF,EAAS5G,KAAK+G,UA9ClC,eAiDS7B,EAAU0B,EAAS5G,KAAKyE,SACxBoG,EAAWjE,EAAS5G,KAAK8K,UACzB3D,EAAUP,EAAS5G,KAAKoH,SACxBC,EAAYC,GAAW,CAACuD,EAAU1D,EAASjC,IApDpD,kBAqDY,CAACmC,EAAWnC,IArDxB,iEAwDC7H,QAAQC,IAAI,qJAA6D,KAAEyJ,SAxD5E,kBAyDQ,EAAC,EAAM,KAAEA,UAzDjB,2D,sBA4DP,SAASO,GAAWG,GAChBpK,QAAQC,IAAI,qCAAsCmK,GAClD,IACI,IAAMb,EAAWxI,IAAM,CACnBsJ,OAAQ,OACRC,IAAK,eACL3H,KAAM,CACF4H,SAAUH,EAAO,GACjBL,SAAUK,EAAO,GACjBhD,SAAUgD,EAAO,MAKzB,OAFApK,QAAQC,IAAI,iDACZD,QAAQC,IAAIsJ,IACL,EAET,MAAOxH,GAEL,OADA/B,QAAQC,IAAI,kJAA+D8B,EAAE2H,SACtE,EAAC,EAAM3H,EAAE2H,UA9GxB3I,IAAMC,SAASkH,QAAUC,uCAIzBpH,IAAMC,SAASC,QAAQmH,KAAK,gBAAkB,oCCH9CrH,IAAMC,SAASkH,QAAUC,uCAIzBpH,IAAMC,SAASC,QAAQmH,KAAK,gBAAkB,oCAyF/BsF,OAvFf,SAAoB/F,GAChB,IAAMwB,EAASzI,eAAe8F,QAAQ,UAClCmH,EAAiB,EACrB,EAAwChP,mBAAS,GAAjD,mBAAOiP,EAAP,KAAqBC,EAArB,KACA,EAAsClP,mBAAS,GAA/C,mBAAOmP,EAAP,KAAoBC,EAApB,KAgEA,OALAvO,qBAAU,WACN,IAAMyM,EA1DV,WACI,IAAIA,EAAWC,aAAY,WACvBnL,IAAMuI,IAAI,8BAAgCH,GACrCgD,MAAK,SAAC5C,GAEH,OADAoE,EAAiBpE,EAASC,QAEtB,KAAK,IACDxJ,QAAQC,IAAI,kFAAkC0N,GAC1B,GAAhBC,IAEAjG,EAAMqG,cAAc,GACpBH,EAAgB,IAEpBE,EAAexE,EAAS5G,KAAKyE,UAC7ByG,EAAgB,GAChB,MACJ,KAAK,IACD7N,QAAQC,IAAI,4EAAiC0N,GACzB,GAAhBC,IAEAjG,EAAMqG,cAAc,GACpBH,EAAgB,IAEpBE,EAAexE,EAAS5G,KAAKyE,UAC7ByG,EAAgB,GAChB,MACJ,KAAK,IACD7N,QAAQC,IAAI,wFAAmC0N,GAC3B,GAAhBC,IAEAjG,EAAMqG,cAAc,GACpBH,EAAgB,IAEhBA,EAAgB,OAO/BtB,OAAM,SAAC9C,GAKJ,OAJAzJ,QAAQC,IAAI,mDACZD,QAAQC,IAAIwJ,GACZgD,cAAcR,GAEP,OAOhB,KACH,OAAOA,EAKUgC,GACjB,OAAO,kBAAMxB,cAAcR,MAC5B,CAAC2B,IAGA,gCACI,qBAAKtM,GAAG,eAAR,SACqB,GAAhBsM,EACG,gCAAK,+BAAOE,IAAZ,wCAEA,sCAKY,GAAhBF,EAAoB,wBAAQtM,GAAG,cAAeW,QAAS0F,EAAMuG,eAAzC,0BACF,GAAhBN,EAAoB,wBAAQtM,GAAG,cAAeW,QAAS0F,EAAMwG,cAAzC,gCACpB,wBAAQ7M,GAAG,cAAX,oCCsDH8M,GAzIf,kDACI,WAAYzG,GAAQ,IAAD,8BACf,cAAMA,IAEDI,MAAQ,CACTsG,QAAS,EACTxD,aAAY,EACZU,WAAW,eACXE,aAAc,gBAPH,EADvB,iDAcI,SAAc6C,GACV7H,KAAK8H,UAAS,SAAAC,GAAS,kCAChBA,GADgB,IAEnBH,QAASC,SAjBrB,2EAsBI,WAA6BnF,GAA7B,qBAAAvJ,EAAA,sEAGiCwN,GAAejE,GAHhD,mCAGSM,EAHT,KAGgBC,EAHhB,KAISD,GASDzJ,QAAQC,IAAI,oDAAqDyJ,GAEjEjD,KAAK8H,UAAS,SAAAC,GAAS,kCAChBA,GADgB,IAEnBH,QAAS,EAETxD,aAAa,SAdjB7K,QAAQC,IAAI,sDAAuDyJ,GACnEjD,KAAK8H,UAAS,SAAAC,GAAS,kCAChBA,GADgB,IAEnBH,QAAS,EACTxD,aAAa,QATzB,gDAtBJ,mIA8CI,WAA8B1B,GAA9B,qBAAAvJ,EAAA,sEAEmC2N,GAAapE,GAFhD,mCAESsF,EAFT,KAEiBC,EAFjB,KAGSD,GAUDzO,QAAQC,IAAI,oDAAqDyO,GAEjEjI,KAAK8H,UAAS,SAAAC,GAAS,kCAChBA,GADgB,IAEnBH,QAAS,EACTxD,aAAa,SAdjB7K,QAAQC,IAAI,sDAAuDwO,GACnEhI,KAAK8H,UAAS,SAAAC,GAAS,kCAChBA,GADgB,IAEnBH,QAAS,EACTxD,aAAa,QARzB,gDA9CJ,4FAwEI,WACI7K,QAAQC,IAAI,sEAERwG,KAAKsB,MAAMsG,QACXrO,QAAQC,IAAI,8BAIhBwG,KAAK8H,UAAS,SAAAC,GAAS,kCAChBA,GADgB,IAEnB3D,YAAa,SACbU,WAAY,2BACZE,aAAc,2HApF1B,sCAuFI,WACIzL,QAAQC,IAAI,0DAERwG,KAAKsB,MAAMsG,QACXrO,QAAQC,IAAI,8BAIhBwG,KAAK8H,UAAS,SAAAC,GAAS,kCAChBA,GADgB,IAEnB3D,YAAa,UACbU,WAAY,4BACZE,aAAc,uGAnG1B,oBAyGI,WAAU,IAAD,OACCtC,EAASzI,eAAe8F,QAAQ,UAChCqE,EAAcpE,KAAKsB,MAAM8C,YAE/B,OACI,sBAAKxJ,UAAU,UAAUC,GAAG,OAA5B,UACI,4DACA,sBAAKD,UAAU,iBAAf,UACI,sBAAKA,UAAU,YAAYC,GAAG,cAA9B,UACI,wEACA,sBAAKA,GAAG,mBAAR,UACK6H,EADL,6CAII,cAAC,GAAD,CAAYA,OAAQA,EAAQgF,cAAe,kBAAM,EAAKQ,2BAA2BT,eAAgB,kBAAM,EAAKU,4BACxGZ,cAAe,SAACM,GAAD,OAAW,EAAKN,cAAcM,SAEzD,qBAAKjN,UAAU,mBAAf,SACI,cAAC,GAAD,SAKR,cAAC,EAAD,CAAO2E,MAAOS,KAAKsB,MAAMwD,WAAY1C,QAASpC,KAAKsB,MAAM0D,aAAc3C,KAAM+B,EAAa7B,SAAU,kBAAM,EAAKuF,UAAS,SAAAC,GAAS,MAAK,CAAE3D,aAAa,OACjJ9B,SAAyB,UAAf8B,EAA0B,kBAAM,EAAKgE,uBAAuB1F,IACxD,kBAAM,EAAK2F,wBAAwB3F,aAlIrE,GAAmCxC,aCJ7BoI,GAAwB,CAC1BC,SAAU,WACVC,OAAQ,GAgDGC,GA5Cf,kDACI,WAAYvH,GAAO,IAAD,8BACd,cAAMA,IAMVvB,SAAW,WACPC,OAAO3F,eAAe4F,WAAW,UACjCD,OAAO3F,eAAe4F,WAAW,SACjCD,OAAO3F,eAAe4F,WAAW,YACjCD,OAAO3F,eAAe4F,WAAW,WACjCD,OAAO3F,eAAe4F,WAAW,WAEjCpG,SAASiB,SAASC,KAAO,KAXzB,EAAK2G,MAAQ,CACT8C,aAAa,GAJH,EADtB,0CAkBI,WAAU,IAAD,OACCA,EAAcpE,KAAKsB,MAAM8C,YAG/B,OAFA7K,QAAQC,IAAI,gCACZD,QAAQC,IAAIS,eAAe8F,QAAQ,aAE/B,sBAAKnF,UAAU,kBAAf,UACI,8CACA,qBAAKA,UAAU,iBAAf,SACI,sBAAKA,UAAU,YAAf,8DAEA,wBAAQY,QAASwE,KAAKL,SAASM,KAAKD,MAApC,sCACI,sBAAKgB,MAAOsH,GAAuB9M,QAAS,kBAAMjC,QAAQC,IAAI,YAA9D,UACI,wBAAQgC,QAAS,kBAAM,EAAKsM,UAAS,SAAAC,GAAS,MAAK,CAAC3D,aAAY,OAAhE,wBAEA,cAAC,EAAD,CAAO7E,MAAM,eAAK6C,QAAU,iBAAOC,KAAM+B,EAAa7B,SAAU,kBAAM,EAAKuF,UAAS,SAAAC,GAAS,MAAK,CAAC3D,aAAY,OAC/G9B,SAAU,kBAAM,EAAKwF,UAAS,SAAAC,GAAS,MAAK,CAAC3D,aAAY,wBAjCrF,GAAsClE,aCwJvBwI,OA1Jf,WACI,MAA0BxQ,mBAAS,IAAnC,mBAAcyQ,GAAd,WACA,EAAwBzQ,mBAAS,IAAjC,mBAAOgE,EAAP,KAAa0M,EAAb,KACA,EAAkC1Q,mBAAS,IAA3C,6BAEA2Q,IAAM9P,WAAU,WACZuB,IACKuI,IAAI,kEACJ6C,MAAK,SAAA3L,GACF4O,EAASG,OAAOC,KAAKhP,EAAOmC,MAAM6F,KAAI,SAAAiH,GAAG,OAAIjP,EAAOmC,KAAK8M,GAAKC,UAC9DL,EAAQE,OAAOC,KAAKhP,EAAOmC,MAAM6F,KAAI,SAAAiH,GAAG,OAAIjP,EAAOmC,KAAK8M,GAAK5N,UAC7D7B,QAAQC,IAAI0C,QAGrB,IACH,IAAMH,EAAW,CAAC,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACjE,OACI,gCACI,qBAAKnB,UAAU,oBACf,qBAAKA,UAAU,WAAWoG,MAAO,CAAEkI,MAAO,QAASC,OAAQ,SAA3D,SACI,cAAC,IAAD,CAAUvO,UAAU,YAChBsB,KAAM,CACFE,SAAU,CACN,CACIF,KAAM,CAAC,GAAI,IACXG,gBAAiB,CAAC,UAAW,WAC7BE,YAAa,IAGrB4C,iBAAiB,EACjBnB,OAAQ,GAEZf,QAAS,CACLmC,YAAY,EACZC,qBAAqB,EACrB+J,sBAAuB,GACvBC,iBAAkB,GAClB9J,MAAO,CACHd,SAAS,GAEbD,OAAQ,CACJC,SAAS,GAEbvB,OAAQ,CACJC,QAAS,QAKzB,qBAAK6D,MAAO,CAAEkI,MAAO,QAASC,OAAQ,SAAtC,SACI,cAAC,IAAD,CACAnN,QAAS,CAACC,KACVC,KAAM,CACFC,OAAQ,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAC3CC,SAAU,CACN,CACI6M,MAAO,mBACP5M,gBAAiB,uBACjBC,YAAa,UACbC,YAAa,IACbC,MAAM,EACNN,KAAO,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAE3CO,YAAa,EACbC,iBAAiB,IAEjBC,qBAAsB,SAAUC,GAC5B,IAAMC,EAAMC,KAAKD,IAAIE,MAAM,KAAMhB,GACjC,OAAIA,EAASa,EAAQI,aAAeH,EACzB,UAEJ,WAMvBI,QAAS,CACLuB,OAAQ,CACJC,SAAS,GAEbvB,OAAQ,CACJC,QAAS,CACLC,KAAM,GACNC,MAAO,KAGfG,OAAQ,CACJC,EAAG,CACCC,aAAc,EACdC,aAAcb,KAAKD,IAAIE,MAAM,KAAMhB,GAAY,GAC/C6B,MAAO,CACHC,KAAM,CAACC,KAAM,KAAMC,OAAO,WAAYC,OAAO,QAC7CC,MAAO,UACPC,SAAU,IAEdC,KAAM,CAEF7B,YAAa,YAEb8B,UAAW,EACXH,MAAO,6BAGfI,EAAE,CACEF,KAAM,CAEF7B,YAAa,2BACbC,YAAY,IACZ0B,MAAO,SAAUrB,GACb,IAAMC,EAAMC,KAAKD,IAAIE,MAAM,KAAMhB,GACjC,OAAIA,EAASa,EAAQ0B,KAAKlD,SAAWyB,EAC1B,YAEJ,aAEX0B,WAAW,CAAC,GAAG,GACfH,UAAU,KAEdR,MAAO,CACHC,KAAM,CAACC,KAAM,KAAMC,OAAO,WAAYC,OAAO,QAC7CC,MAAO,UACPC,SAAU,KAItBlC,QAAS,CACL0C,WAAY,CACRC,OAAQ,MACRC,MAAO,MACPC,OAAQ,GACRZ,MAAO,UACP5B,gBAAiB,OACjBC,YAAa,UACba,QAAQ,CAACI,IAAI,EAAGD,OAAO,EAAGD,MAAM,GAAID,KAAK,IACzCb,YAAa,IACbuC,aAAc,GACdC,eAAe,EACflB,KAAM,CAACC,KAAM,KAAMC,OAAO,WAAYC,OAAO,QAC7CgB,UAAW,SAAU5D,EAAOwB,GACxB,OAAIE,KAAKD,IAAIE,MAAM,KAAMhB,IAAaX,EAC3B,4BAAUwB,EAAQqC,MAAM/C,KAAKC,OAAOS,EAAQI,WAAa,SAE7D,iBC9IhC,SAAesM,GAAtB,mC,8CAAO,WAA6BhE,GAA7B,eAAAnM,EAAA,+EAGwBmB,IAAMuI,IAAI,qBAAuByC,GAHzD,UAGOxC,EAHP,OAICvJ,QAAQC,IAAI,mDACZD,QAAQC,IAAIsJ,KACCA,EAASC,QACT,KAPd,yCAQY,EAAC,EAAOD,EAAS5G,OAR7B,gCAUQ,EAAC,EAAM,qCAVf,yCAaC3C,QAAQC,IAAI,iDAAmD,KAAEyJ,SAblE,kBAeQ,EAAC,EAAM,KAAEA,UAfjB,2D,sBAkBA,SAAesG,GAAtB,mC,8CAAO,WAA2BC,GAA3B,mBAAArQ,EAAA,+EAGwBmB,IAAMuI,IAAI,eAAiB2G,GAHnD,UAGO1G,EAHP,OAICvJ,QAAQC,IAAI,iDACZD,QAAQC,IAAIsJ,EAAS5G,MACjB6G,EAASD,EAASC,OAClB0G,EAAe,KACf1G,GAAS,KARd,sBASSD,EAAS5G,KAAK4F,OAAS,GAThC,0CAUgB,EAAC,EAAOgB,EAAS5G,KAAK,KAVtC,eAaSuN,EAAe,0CAbxB,kBAcgB,EAAC,EAAMA,IAdvB,yDAkBY,EAAC,EAAM,mCAlBnB,iEAqBClQ,QAAQC,IAAI,+CAAiD,KAAEyJ,SArBhE,kBAuBQ,EAAC,EAAM,KAAEA,UAvBjB,2D,sBAxBP3I,IAAMC,SAASkH,QAAUC,uCAIzBpH,IAAMC,SAASC,QAAQmH,KAAK,gBAAkB,oCC0G/B+H,OAxGf,WACI,MAAiCxR,mBAAS,IAA1C,mBAAOyR,EAAP,KAAkBC,EAAlB,KACA,EAAmC1R,mBAAS,IAA5C,mBAAO4M,EAAP,KAAmBC,EAAnB,KACA,EAAuC7M,mBAAS,IAAhD,mBAAO8M,EAAP,KAAqBC,EAArB,KACA,EAAqC/M,oBAAS,GAA9C,mBAAOkM,EAAP,KAAoBC,EAApB,KACMiB,EAAQrL,eAAe8F,QAAQ,SALf,4CAkBtB,kCAAA5G,EAAA,sEAEgCmQ,GAAchE,GAF9C,mCAEStC,EAFT,KAEgBjJ,EAFhB,KAGSiJ,GACD4G,EAAa7P,GAJrB,4CAlBsB,kEAyBtB,WAAuByP,GAAvB,uBAAArQ,EAAA,sEACgCoQ,GAAYC,GAD5C,sCACSxG,EADT,KACgBjJ,EADhB,KAYQ8P,EAAY,GACX7G,EAbT,wBAcQ6G,EAAY,iBAAiB9P,EAAO0G,aAAxB,qBAA6D1G,EAAO+P,WAApE,wBAA0G/P,EAAOgQ,cAC7H9E,EAAgB4E,GAfxB,mBAgBe,GAhBf,eAkBI5E,EAAgB4E,GAlBpB,mBAmBW,GAnBX,6CAzBsB,sBA8CtB,SAASG,EAAiBR,EAAOS,IA9CX,4CA+CAC,CAAQV,KAEtBzE,EAAckF,EAAQ,4BAAaT,EAAM,KACzCnF,GAAe,IAGvB,SAAS8F,IACD9F,GAAe,GAOvB,OALAtL,qBAAU,YAxDY,mCAyDlBqR,GACA7Q,QAAQC,IAAImQ,KAEb,IAEC,gCACI,sBAAK/O,UAAU,UAAUC,GAAG,QAA5B,UACI,+CACA,qBAAKD,UAAU,iBAAf,SACI,sBAAKA,UAAU,wBAAwBC,GAAG,YAA1C,8DAEI,wBAAOA,GAAG,cAAV,UACI,gCACI,qBAAID,UAAU,qBAAqBgE,MAAM,SAASyL,QAAQ,QAA1D,UACI,gDACA,8CACA,8CACA,yEACA,yEACA,+DAKR,gCACKV,EAAU5H,KAAI,SAAAuI,GAAU,OACrB,qBAAI1L,MAAM,SAASyL,QAAQ,QAAQ7O,QAAS,kBAAIwO,EAAiBM,EAAWC,YAAaD,EAAWE,WAApG,UACI,6BAAKF,EAAWE,WAChB,6BAAKF,EAAW3J,WAChB,6BAAK2J,EAAWG,aAChB,6BAAKH,EAAWI,qBAChB,6BAAKJ,EAAWK,sBAChB,6BAAKL,EAAWM,gCAQ5C,cAAC,EAAD,CAAOrL,MAAOuF,EAAY1C,QAAS4C,EAAc3C,KAAM+B,EACvD7B,SAAU4H,EAAuB7H,SAAU6H,QCvGvD,SAASU,GAAT,GAAoC,IAAXC,EAAU,EAAVA,OACfC,EAA0B,KAAjBD,EAAOE,MACtB,OACI,qBAAIpQ,UAAU,cAAd,UACI,sBAAKA,UAAU,gBAAf,cAAiCkQ,EAAOjQ,MACxC,sBAAKD,UAAU,eAAf,cAAgCkQ,EAAOG,SACvC,qBAAKrQ,UAAU,gBAAf,SACKmQ,EACG,4DAEA,gCACI,gEAAeD,EAAOI,YACtB,yDAAaJ,EAAOE,SACpB,+DAAcF,EAAOK,iBAqB9BC,OAZf,YAAmC,IAAdC,EAAa,EAAbA,WACjB,OACI,8BACI,6BACKA,EAAWtJ,KAAI,SAAAuJ,GAAU,OACtB,cAACT,GAAD,CAAeC,OAAQQ,GAAiBD,EAAWxQ,YCIxD0Q,GA/Bf,kDACI,WAAYrK,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACT+J,WAAa,CACT,CAACxQ,GAAG,EAAGoQ,MAAM,eAAMC,SAAU,uEAAiBF,MAAO,GAAIG,MAAM,GAC/D,CAACtQ,GAAG,EAAGoQ,MAAM,2BAAQC,SAAU,uEAAiBF,MAAO,OAAQG,MAAM,GACrE,CAACtQ,GAAG,EAAGoQ,MAAM,qBAAOC,SAAU,uEAAiBF,MAAO,OAAQG,MAAM,IACpE,CAACtQ,GAAG,EAAGoQ,MAAM,2BAAQC,SAAU,uEAAiBF,MAAO,OAAQG,MAAM,GACrE,CAACtQ,GAAG,EAAGoQ,MAAM,eAAMC,SAAU,uEAAiBF,MAAO,GAAIG,MAAM,GAC/D,CAACtQ,GAAG,EAAGoQ,MAAM,2BAAQC,SAAU,uEAAiBF,MAAO,OAAQG,MAAM,KAT9D,EADvB,0CAgBI,WACI,IAAME,EAAarL,KAAKsB,MAAM+J,WAC9B,OACI,sBAAKzQ,UAAU,UAAUC,GAAG,SAA5B,UACI,kEACA,qBAAKD,UAAU,iBAAf,SACI,qBAAKA,UAAU,wBAAwBC,GAAG,mBAA1C,SACA,cAAC,GAAD,CAAYwQ,WAAYA,eAvB5C,GAAqCnL,a,eC+GtBsL,OAtGf,WAEI,MAAkCtT,oBAAS,GAA3C,mBAAOuT,EAAP,KACA,GADA,KACsCvT,oBAAS,IAA/C,mBAAOkM,EAAP,KAAoBC,EAApB,KACIqH,EAAa,OACbC,EAAY1R,eAAe8F,QAAQ,WACnCD,EAAW7F,eAAe8F,QAAQ,YAEtB,MAAb4L,IACCA,EAAY,wBAEb7L,EAASgC,OAAS,IACjB4J,EAAa,QAEjB,IAAMrR,EAAW,sBAAwBsR,EAAY,OAkBrD,OACI,sBAAK9Q,GAAG,WAAWD,UAAW,aAAe6Q,EAAY,UAAY,0BAArE,UACI,qBAAK7Q,UAAU,eAAeC,GAAG,MAAjC,SASI,sBAAKD,UAAU,WAAf,UACI,qBAAKC,GAAG,oBAAR,SACI,qBAAKA,GAAG,gBAAgBC,IAAKT,EAAUU,IAAI,gBAI/C,sBAAMF,GAAG,gBAAgBmG,MAAO,CAAC0K,WAAWA,GAA5C,SAA0D5L,SAIlE,qBAAKlF,UAAU,0BAAf,uBACA,eAAC,KAAD,CAASgR,GAAG,aAAahR,UAAU,WAAWiR,gBAAgB,aAA9D,UACI,mBAAGjR,UAAU,gBAAb,sCACA,cAAC,IAAD,CAAaA,UAAU,mBAE3B,eAAC,KAAD,CAASgR,GAAG,WAAWhR,UAAU,WAAWiR,gBAAgB,aAA5D,UACI,mBAAGjR,UAAU,gBAAb,uCACA,cAAC,IAAD,CAAcA,UAAU,mBAE5B,eAAC,KAAD,CAASgR,GAAG,cAAchR,UAAU,WAAWiR,gBAAgB,aAA/D,UACI,mBAAGjR,UAAU,gBAAb,sCACA,cAAC,IAAD,CAAYA,UAAU,mBAG1B,eAAC,KAAD,CAASgR,GAAG,WAAWhR,UAAU,WAAWiR,gBAAgB,aAA5D,UACI,mBAAGjR,UAAU,gBAAb,0BACA,cAAC,IAAD,CAAwBA,UAAU,mBAGtC,qBAAKA,UAAU,0BAAf,qBACA,eAAC,KAAD,CAASgR,GAAG,UAAUhR,UAAU,WAAWiR,gBAAgB,aAA3D,UACI,mBAAGjR,UAAU,gBAAb,6CACA,cAAC,KAAD,CAAQA,UAAU,mBAEtB,eAAC,KAAD,CAASgR,GAAG,WAAWhR,UAAU,WAAWiR,gBAAgB,aAA5D,UACI,mBAAGjR,UAAU,gBAAb,2BACA,cAAC,IAAD,CAAiBA,UAAU,mBAI/B,eAAC,KAAD,CAASgR,GAAG,SAAShR,UAAU,WAAWiR,gBAAgB,aAA1D,UACI,mBAAGjR,UAAU,gBAAb,0BACA,cAAC,IAAD,CAAyBA,UAAU,mBAGvC,qBAAKA,UAAU,eAAeC,GAAG,SAAjC,SAEA,yBAAQA,GAAG,YAAYD,UAAU,kCAAkCY,QAvE/E,WACIjC,QAAQC,IAAI,uBACZ6K,GAAe,IAqEP,UACY,mBAAGzJ,UAAU,eAAb,uCACA,cAAC,IAAD,CAAkBA,UAAU,qBAGxC,cAAC,EAAD,CAAO2E,MAhFI,wCAgFe4C,UA/EX,GA+EsCC,QA9ExC,iEA8E+DC,KAAM+B,EAAa7B,SAAU,kBAAM8B,GAAe,IAC1H/B,SAzEhB,WACI1C,OAAO3F,eAAe4F,WAAW,UACjCD,OAAO3F,eAAe4F,WAAW,SACjCD,OAAO3F,eAAe4F,WAAW,YACjCD,OAAO3F,eAAe4F,WAAW,WACjCD,OAAO3F,eAAe4F,WAAW,WAEjCpG,SAASiB,SAASC,KAAO,gB,kBCddmR,OAlBf,WACI,OACI,sBAAKjR,GAAI,SAAT,UACI,qBAAKA,GAAG,WAAR,SACI,qBAAKA,GAAG,OAAOC,IAAK,8CAA+CC,IAAI,qBAE3E,sBAAKF,GAAG,eAAR,UACI,cAAC,IAAD,CAAYA,GAAG,kBACf,qDACA,cAAC,IAAD,CAAgBA,GAAG,kBAEvB,qBAAKA,GAAG,YAAR,SACI,cAAC,KAAD,CAAYD,UAAU,e,SCsEvBmR,OAxEf,WAGE,MAAwC7T,oBAAS,GAAjD,mBAAO8T,EAAP,KAAqBC,EAArB,KAaA,OAXAlT,qBAAU,WAEI,MADCkB,eAAe8F,QAAQ,UAMlCkM,GAAgB,MAMlB,qBAAKrR,UAAU,gBAAf,SACIoR,EACA,eAAC,KAAD,WACE,qBAAKpR,UAAU,cAAf,iFACA,qBAAKA,UAAU,eAAf,SACE,cAAC,GAAD,MAEF,qBAAKA,UAAU,aAAf,SACE,cAAC,GAAD,MAEF,qBAAKA,UAAU,cAAf,SACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAOsR,KAAK,IAAIC,OAAK,EAArB,SACIH,EAA2B,cAAC,GAAD,IAAZ,cAAC,EAAD,MAEnB,cAAC,KAAD,CAAOE,KAAK,aAAaC,OAAK,EAA9B,SACE,cAAC,EAAD,MAEF,cAAC,KAAD,CAAOD,KAAK,WAAWC,OAAK,EAA5B,SACE,cAAC,EAAD,MAEF,cAAC,KAAD,CAAOD,KAAK,cAAcC,OAAK,EAA/B,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOD,KAAK,QAAQC,OAAK,EAAzB,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOD,KAAK,UAAUC,OAAK,EAA3B,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOD,KAAK,WAAWC,OAAK,EAA5B,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOD,KAAK,SAASC,OAAK,EAA1B,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOD,KAAK,WAAWC,OAAK,EAA5B,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOD,KAAK,WAAWC,OAAK,EAA5B,SACIH,EAA2B,cAAC,GAAD,IAAZ,cAAE,EAAF,MAGnB,cAAC,KAAD,CAAUJ,GAAG,cA1CJ,cAAC,EAAD,OClCvBQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEF7S,SAASC,eAAe,U,qKCDnB,SAAeG,EAAtB,oC,4CAAO,WAAmC6I,EAAQ6J,GAA3C,mBAAApT,EAAA,4DACY,OACA,SAETqT,EAJH,UACY,OADZ,YAEY,UAGMC,EAAOC,KAAKF,GAAOG,SAAS,UAL9C,kBAOwBrS,IAAM,CACzBsJ,OAAQ,OACRC,IAAK,wBACL3H,KAAM,CACFwG,OAAQA,EACR6J,aAAcA,KAZvB,UAOOzJ,EAPP,OAgBKhJ,EAAQgJ,EAAS5G,KAAKpC,MAC1BP,QAAQC,IAAIc,IAAMC,SAASkH,SAC3BlI,QAAQC,IAAI,yDACZD,QAAQC,IAAIsJ,GACC,GAAThJ,EApBL,0CAqBY,CAACA,EAAOgJ,EAAS5G,OArB7B,WAuBkB,GAATpC,EAvBT,0CAwBY,CAACA,EAAOgJ,EAAS5G,KAAK+G,UAxBlC,iCA2BY,EAAC,EAAO,mIA3BpB,iEA+BC1J,QAAQC,IAAI,uDAAyD,KAAEyJ,SA/BxE,kBAiCQ,EAAC,EAAO,mIAjChB,2D,sBANP3I,IAAMC,SAASkH,QAAUC,uCAIzBpH,IAAMC,SAASC,QAAQmH,KAAK,gBAAkB,sC","file":"static/js/main.18a70249.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport {postControllerLogin} from './LoginController';\r\nimport { useCookies } from 'react-cookie';  // 쿠키, 아이디 기억하기\r\nimport './style.css';\r\n\r\n// 아이콘   \r\nimport {IoIosEye, IoIosEyeOff} from 'react-icons/io'\r\nimport {AiOutlineLock, AiOutlineUser} from 'react-icons/ai'\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nfunction LoginPresenter() {\r\n    \r\n    // 아이디, 패스워드 입력값 변수. 초기는 null\r\n    const [inputId, setInputId] = useState(\"\");\r\n    const [inputPassword, setInputPassword] = useState(\"\");\r\n\r\n    const [showPassword, setshowPassword] = useState(\"\");   //password 보여줌 여부, 보여준다면 input type:text 아니면 password\r\n    const [isRemember, setIsRemember] = useState(false);    // id 기억 여부 \r\n    const [cookies, setCookie, removeCookie] = useCookies(['rememberId']);  // 쿠키 접근, 기억된 아이디는 rememberId에 저장\r\n\r\n    useEffect(() => {   // 처음 열렸을때 기억된 id가 있는지 확인\r\n        if (cookies.rememberId !== undefined) {\r\n            setInputId(cookies.rememberId);\r\n            setIsRemember(true);\r\n        }\r\n    }, []);\r\n    \r\n    // input에 입력시 변수 갱신\r\n    const handleInputId = (e) => {\r\n        setInputId(e.target.value)\r\n    }\r\n    const handleInputPassword = (e) => {\r\n        setInputPassword(e.target.value)\r\n    }\r\n    // password show 아이콘 눌렀을 때\r\n    const handleClickShowPassword = () => {\r\n        setshowPassword(!showPassword);\r\n    };\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n    // remember 체크박스 눌렀을 때\r\n    const handleRemember = (e) => {\r\n        setIsRemember(e.target.checked);\r\n    }\r\n    // 입력 유효성 검사\r\n    function checkValid(){\r\n        console.log(\"hello\");\r\n        if (inputId == \"\" || inputPassword == \"\" ) { // 입력하지 않았을 시 \r\n            document.getElementById('fail-message').innerText = \"아이디와 비밀번호 모두 입력해주세요.\";\r\n            return false;\r\n        }\r\n        else if (inputId.search(/\\s/) != -1 || inputPassword.search(/\\s/) != -1 ) { // 공백이 존재할 시 || inputPassword.search(/\\s/) != -1\r\n            document.getElementById('fail-message').innerText = \"공백을 제외하고 입력해주세요.\";\r\n            return false;\r\n        }\r\n        return true\r\n    }\r\n    const onSubmit = async () => {\r\n        //아이디 기억 여부\r\n        if (isRemember) {\r\n            setCookie('rememberId', inputId, { expires: new Date(Date.now()+2592000) });\r\n        } else {\r\n            removeCookie('rememberId');\r\n        }\r\n        // 입력에 대한 기본 유효성 판단\r\n        if(!checkValid()){\r\n            return;\r\n        }\r\n        // 서버로 로그인 정보 확인\r\n        let [valid, result] = await postControllerLogin(inputId, inputPassword);\r\n        if (valid) {\r\n            // alert(\"success!\");\r\n            console.log(\"[LoginPresenter] login success : \");\r\n            console.log(result.user_name);\r\n            sessionStorage.setItem('userId', inputId)\r\n            sessionStorage.setItem('mapId', result.map_id)\r\n            sessionStorage.setItem('userKey', result.user_key)\r\n            sessionStorage.setItem('userName', result.user_name)\r\n            sessionStorage.setItem('logoSrc', result.logo_src)\r\n            axios.defaults.headers.common = {\r\n                \"Authorization\": \"Basic \"+result.user_key,\r\n            };\r\n            axios.defaults.headers.common['Authorization'] = \"Basic \"+result.user_key;\r\n                \r\n            document.location.href = '/'\r\n        }\r\n        else {\r\n            console.log(\"[LoginPresenter] login failed, error  : \", result);\r\n            // alert(result);\r\n            document.getElementById('fail-message').innerText = result;\r\n            return;\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div className=\"content\" id=\"login\">\r\n            <div id=\"top\">\r\n                <img className='login-logo-img' id=\"logo\" src={\"/assets/hprobot-logo/hprobot-logo-white-2line.png\"} alt=\"login-logo-img\" />\r\n                <div id=\"title-div\">\r\n                    <a id=\"title\">헬퍼로보틱스 관제시스템</a>\r\n                </div>\r\n            </div>\r\n            <div id=\"middle\">\r\n\r\n                <div id=\"login-icon-div\">\r\n                    <AiOutlineUser id=\"login-icon\" />\r\n                </div>\r\n                <div className=\"login-div\">\r\n                    <div id=\"size\">\r\n                        <a className=\"title\">Log in</a>\r\n\r\n                        <div id=\"id-input-div\" className=\"input-div\">\r\n                            <AiOutlineUser className=\"icon\" />\r\n                            <input id=\"id-input\" className=\"input\" type=\"text\" autocapitalize=\"off\" name=\"inputId\" placeholder=\"아이디\" value={inputId} onChange={handleInputId} />\r\n                        </div>\r\n                        {/* <div class=\"form_text_alert_padding\">\r\n                        <div id=\"alert_username\" class=\"form_text_alert\"></div>\r\n                    </div> */}\r\n                        <div id=\"password-input-div\" className=\"input-div\">\r\n                            <AiOutlineLock className=\"icon\" />\r\n                            <input id=\"password-input\" className=\"input\" name=\"inputPassword\" placeholder=\"패스워드\" autocapitalize=\"off\"\r\n                                type={showPassword ? 'text' : 'password'} value={inputPassword} onChange={handleInputPassword} />\r\n                            <div id=\"show-icon-div\" onClick={handleClickShowPassword} onMouseDown={handleMouseDownPassword}>\r\n                                {showPassword ? <IoIosEyeOff id=\"show-icon\" /> : <IoIosEye id=\"show-icon\" />} </div>\r\n                        </div>\r\n                        <div id=\"fail-message\"></div>\r\n                        <div id=\"remember\">\r\n                            <input id=\"checkbox\" type=\"checkbox\" onChange={handleRemember} checked={isRemember} />\r\n                            <label for=\"checkbox\"></label>\r\n                            <span id=\"text\">아이디 저장</span>\r\n                        </div>\r\n                        <button id=\"login-button\" onClick={onSubmit}>\r\n                            <p id=\"button-text\">로그인</p>\r\n                        </button>\r\n                        <div id=\"forgot\">Forgot Password ? </div>\r\n                        <img className='login-logo-img' id=\"logo\" src={\"/assets/hprobot-logo/hprobot-logo-1line.png\"} alt=\"login-logo-img\" />\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default LoginPresenter\r\n","import React from 'react';\r\nimport { Line, Doughnut  } from \"react-chartjs-2\";\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport './style.css';\r\n\r\nexport function LineTimeOrder() {\r\n    const testdata = [8, 9, 10, 11, 12, 13, 24, 15, 16, 17, 18, 19, 20];\r\n\r\n    return (\r\n        <div>\r\n            <Line \r\n                plugins={[ChartDataLabels]} \r\n                data={{\r\n                    labels: [8,9,10,11,12,13,14,15,16,17,18,19,20],\r\n                    datasets: [\r\n                        {\r\n                            // label: 'My First dataset',\r\n                            backgroundColor: 'rgba(255,99,132,0.2)',\r\n                            borderColor: '#558EFF',\r\n                            borderWidth: 2.7,\r\n                            fill: false,\r\n                            data:  [8,9,10,11,12,13,24,15,16,17,18,19,20],\r\n                                pointRadius: 5,\r\n                            pointBorderWidth:1.3,\r\n\r\n                            pointBackgroundColor: function (context) {\r\n                                const max = Math.max.apply(null, testdata);\r\n                                if (testdata[context.dataIndex] === max) {\r\n                                    return '#49d7e3';\r\n                                }\r\n                                return '#fff'\r\n                            },\r\n                        }\r\n                    ]\r\n                }} \r\n                options={{\r\n                    \r\n                    layout: {\r\n                        padding: {\r\n                            left: 55,\r\n                            right: 85,\r\n                            bottom: 0,\r\n                            top: 70,\r\n                        }\r\n                    },\r\n                    scales: {\r\n                        y: {\r\n                            suggestedMin: 0,\r\n                            suggestedMax: Math.max.apply(null, testdata) + 10,\r\n                            ticks: {\r\n                                font: {size: 18.7, family:'NotoSans', weight:'bold'},\r\n                                color: '#9b9fb6',\r\n                                stepSize: 10\r\n                            },\r\n                            grid: {\r\n                                // borderWidth:2.7,\r\n                                borderColor: '#ffffff00',\r\n\r\n                                lineWidth: 2,\r\n                                color: 'rgba(115, 119, 141, 0.2)'\r\n                            }\r\n                        },\r\n                        x:{\r\n                            grid: {\r\n                                // drawBorder: false,\r\n                                borderColor: 'rgba(115, 119, 141, 0.8)',\r\n                                borderWidth:2.7,\r\n                                color: function (context) {\r\n                                    const max = Math.max.apply(null, testdata);\r\n                                    if (testdata[context.tick.value] === max) {\r\n                                        return '#558EFF55';\r\n                                    }\r\n                                    return '#ffffff00'\r\n                                },\r\n                                borderDash:[15,5],\r\n                                lineWidth:1.9\r\n                            },\r\n                            ticks: {\r\n                                font: {size: 18.7, family:'NotoSans', weight:'bold'},\r\n                                color: '#9b9fb6',\r\n                                stepSize: 2, //??????\r\n                            },\r\n                        }\r\n                    },\r\n                    plugins: {\r\n                        legend: {\r\n                            display: false\r\n                        },\r\n                        datalabels: {   //피크일때 시각 라벨 표기\r\n                            anchor: 'end',\r\n                            align: 'top',\r\n                            offset: 10,\r\n                            color: '#558EFF',\r\n                            backgroundColor: '#f7f9ff',\r\n                            borderColor: '#558EFF',\r\n                            padding:{top:5, bottom:5, right:32, left:32},\r\n                            borderWidth: 2.7,\r\n                            borderRadius: 50,\r\n                            textShadowBlur:1, \r\n                            font: {size: 18.7, family:'NotoSans', weight:'bold'},\r\n                            formatter: function (value, context) {\r\n                                if (Math.max.apply(null, testdata) == value) {\r\n                                    return '피크타임 ' + context.chart.data.labels[context.dataIndex] + '시';\r\n                                }\r\n                                return null;\r\n                            },\r\n                        },\r\n\r\n                    },\r\n                }} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function DoughnutTypeOrder() {\r\n    return (\r\n        <div>\r\n            <Doughnut\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                data: [66, 34],\r\n                                backgroundColor: [ '#558EFF','#49D7E3'],\r\n                                borderWidth: 0,\r\n                            },\r\n                        ],\r\n                        hoverBorderWidth:0,\r\n                        weight: 0,\r\n                    }}\r\n                    options={{\r\n                        responsive: true,\r\n                        maintainAspectRatio: true,\r\n                        cutout: 70,\r\n\r\n                        title: {\r\n                            display: false,\r\n                        },\r\n                        legend: {\r\n                            display: false\r\n                        },\r\n                        layout: {\r\n                            padding: 0\r\n                        },\r\n                    }}\r\n                />\r\n        </div>\r\n    )\r\n}\r\nexport function DoughnutAvailableRobot() {\r\n    return (\r\n        <div>\r\n            <Doughnut \r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                data: [3, 11],\r\n                                backgroundColor: ['#ff7171', '#558EFF'],\r\n                                borderWidth: 0,\r\n                            },\r\n                        ],\r\n                        hoverBorderWidth:0,\r\n                        weight: 0,\r\n                    }}\r\n                    options={{\r\n                        responsive: true,\r\n                        maintainAspectRatio: true,\r\n                        cutout: 70,\r\n                        title: {\r\n                            display: false,\r\n                        },\r\n                        legend: {\r\n                            display: false,\r\n                            \r\n                        },\r\n                        layout: {\r\n                            padding: 0\r\n                        },\r\n                    }}\r\n                />\r\n                <div id=\"doughnut-data\"><span id=\"able\">11</span><span id=\"bar\">/</span><span id=\"all\">14</span></div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {MdDashboard} from 'react-icons/md'\r\nimport './style.css';\r\nimport {DoughnutTypeOrder, LineTimeOrder, DoughnutAvailableRobot} from './Chart'\r\nfunction DashboardPresenter() {\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"content\" id=\"dashboard\">\r\n            <div className=\"content-title\"><MdDashboard className=\"icon\"/>대시보드</div>\r\n            <div className=\"grid-container\">\r\n                    <div className=\"grid-item\" id=\"item-store\">\r\n                        <div className=\"grid-title\">매장 운영 지표</div>\r\n                        <div className=\"sub-grid-container\">\r\n                            <div className=\"sub-grid-item\" id=\"today-order\">\r\n                                <div className=\"sub-grid-title\">오늘 주문 건수</div>\r\n                                <div>\r\n                                    <span className=\"order-count\">50</span>\r\n                                    <span className=\"gun\">건</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"sub-grid-item\" id=\"accumulate-order\">\r\n                            <div className=\"sub-grid-title\">누적 주문 건수</div>\r\n                            <div className=\"period-div\">\r\n                                <p className=\"week\">주간</p>|<p className=\"month\">월간</p>\r\n                            </div>\r\n                            <div>\r\n                                    <span className=\"order-count\">310</span>\r\n                                    <span className=\"gun\">건</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"sub-grid-item\" id=\"type-order\">\r\n                            <div className=\"sub-grid-title\">배달/홀 주문현황 </div>\r\n                            <div className=\"period-div\">\r\n                                <p className=\"week\">주간</p>|<p className=\"month\">월간</p>\r\n                            </div>\r\n                            <div className=\"doughnut-graph\"><DoughnutTypeOrder/></div>\r\n                            <div className=\"value\" id=\"delivery\">\r\n                                <div className=\"type\">배달</div>\r\n                                <div className=\"count\">540건</div>\r\n                                <div className=\"percent\">(56%)</div>\r\n                            </div>\r\n                            <div className=\"value\" id=\"hall\">\r\n                                <div className=\"type\">홀</div>\r\n                                <div className=\"count\">540건</div>\r\n                                <div className=\"percent\">(56%)</div>\r\n                            </div>\r\n                            </div>\r\n                            <div className=\"sub-grid-item\" id=\"time-order\">\r\n                            <div className=\"sub-grid-title\">시간대별 주문현황</div>\r\n                            <div className=\"period-div\">\r\n                                <p className=\"week\">주간</p>|<p className=\"month\">월간</p>\r\n                            </div>\r\n                            <div className=\"line-graph\"><LineTimeOrder id=\"LineTimeOrder\"/></div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-robot\">\r\n                        <div className=\"grid-title\">서빙로봇 운영 지표</div>\r\n                        <div className=\"sub-grid-container\">\r\n                            <div className=\"sub-grid-item\" id=\"available-robot\">\r\n                            <div className=\"sub-grid-title\">현재 사용 가능한 로봇 수</div>\r\n                                <div className=\"doughnut-graph\"><DoughnutAvailableRobot/></div>\r\n                                <div id=\"labels\">\r\n                                    <div id=\"yes\">\r\n                                        <div id=\"text\">사용가능</div>\r\n                                        <div id=\"color\"></div>\r\n                                    </div>\r\n                                    <div id=\"no\">\r\n                                        <div id=\"text\">사용불가</div>\r\n                                        <div id=\"color\"></div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"sub-grid-item\" id=\"statistics-robot\">\r\n                                <div className=\"statistics-item\" id=\"time\">\r\n                                    <div className=\"title\">로봇이 움직인 시간</div>\r\n                                    <div className=\"value\">333h</div>\r\n                                </div>\r\n                                <div className=\"statistics-item\" id=\"distance\">\r\n                                    <div className=\"title\">로봇이 움직인 거리</div>\r\n                                    <div className=\"value\">5km</div>\r\n                                </div>\r\n                                <div className=\"statistics-item\" id=\"average\">\r\n                                    <div className=\"title\">평균 서빙 소요 시간 </div>\r\n                                    <div className=\"value\">22m</div>\r\n                                </div>\r\n                                <div id=\"last-7days\">(최근 7일)</div>\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DashboardPresenter\r\n","import React, { Component } from 'react'\r\n\r\nexport class User extends Component {\r\n    onLogout = () => {\r\n        window.sessionStorage.removeItem('userId');\r\n        window.sessionStorage.removeItem('mapId');\r\n        window.sessionStorage.removeItem('userName');\r\n        window.sessionStorage.removeItem('logoSrc');\r\n\r\n        document.location.href = '/'\r\n\r\n    }\r\n    render() {\r\n        const userName = sessionStorage.getItem('userName')\r\n        const dbLogoSrc = sessionStorage.getItem('logoSrc');\r\n        const logo_src = '/assets/store_logo/' + dbLogoSrc + '.png';\r\n        // const logo_src = '../../assets/store_logo/the_people_burger/the_people_burger_logo.png'\r\n        return (\r\n            <div className=\"content\" id=\"user\">\r\n                <h1 > 내 정보</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item\" id=\"item-profile\">\r\n                        <h4>프로필</h4>\r\n                {/* userid로 user 정보와 img url 불러오기 */}\r\n                        <img src={logo_src} alt=\"user-logo\" />\r\n\r\n                        <div> 매장명 : {userName}</div>\r\n                        <button onClick={this.onLogout.bind(this)}>로그아웃</button>\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-2\">\r\n                        <h4>호출 통계</h4>\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-3\">\r\n                        <h4>최근 주문</h4>\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-4\">\r\n                        <h4>뭐할까</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default User\r\n","import React, { Component } from 'react'\r\n// icon\r\nimport {AiOutlineWarning} from 'react-icons/ai'\r\nimport {BiLogIn} from 'react-icons/bi'\r\n\r\nexport class Authorized extends Component {\r\n    goLogin = () => {\r\n        document.location.href = '/login'\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"content\" id=\"authorized\">\r\n                <div className=\"content-title text-color-1\"> <BiLogIn className=\"icon\" />로그인</div>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item center-align\" id=\"item-authorized\">\r\n                        <AiOutlineWarning className=\"icon\" id=\"warning-icon\" />\r\n                        <p className=\"text-color-2\" id=\"authorized-text\">로그인이 필요합니다</p>\r\n                        <button className=\"round-button text-color-w background-color-1\" onClick={this.goLogin.bind(this)}>로그인하러 가기</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Authorized\r\n","import React from 'react'\r\nimport {BiCheckSquare} from 'react-icons/bi'\r\nfunction RobotServing({robot, clickedRobotId, setClickedRobotId}) {\r\n    var stateString = \"이동중\" \r\n    \r\n    // if (robot.state == 2) return null;  // 물건 없음\r\n    if(robot.final_node == 1){\r\n        stateString = \"복귀중\";\r\n    }\r\n    else if(robot.current_node == robot.final_node) stateString=\"서빙완료\"; //물건 올린 상태에서 목적지 도착\r\n    \r\n    const robotImgSrc = \"/assets/robot/octa_robot_white.png\";   //로봇 이미지\r\n    // serving정보칸 배경 색상 (강조 여부)\r\n    var statusColor = \"#ffffff00\";\r\n    if(robot.robot_id == clickedRobotId){\r\n        statusColor = \"#0000ff11\";\r\n    }\r\n    // 테이블 이름에 따른 목적지 문자열 구분(숫자 / 배달)\r\n    var destination = \"\";\r\n        var tableName = robot.table_name;\r\n        if(tableName == null){\r\n            destination = \"현재 위치\";\r\n        }\r\n        else if (isNaN(tableName)){  // table name 이 숫자가 아닐 때 (ex. 배달)\r\n            //console.log(\"not number!\");\r\n            destination = tableName;\r\n            if(robot.final_node == 1 || tableName == \"홈\" ){\r\n                destination = \"홈\";\r\n            }\r\n        }\r\n        else{\r\n            destination = \"테이블 \"+tableName;\r\n        }\r\n    /*upgradable 함수의 위치? 함수형 컴포넌트에서... */\r\n    function handelRobotClick(){\r\n        // console.log(\"robot click!\");\r\n        setClickedRobotId(robot.robot_id);\r\n    }\r\n\r\n    return (\r\n        <li id=\"robot-serving-item\" onClick={handelRobotClick} style={{ backgroundColor:statusColor}}>\r\n            <img src={robotImgSrc} alt=\"robot-icon-img\" className='robot-icon-img float' />\r\n                <div id = \"serving-info\" className=\"float\">\r\n\r\n                    <span id=\"arrive-robot-string\" className=\"text-color-1\">로봇</span>\r\n                    <span id=\"arrive-robot\" className=\"text-color-1\" >{robot.robot_id}</span>\r\n\r\n                </div>\r\n                <div id = \"serving-info\" className=\"float\">\r\n                <span id=\"arrive-node\" className=\"text-color-2\">{destination}</span>\r\n                <span id=\"arrive-robot-string\" className=\"text-color-1\"> {stateString}</span>\r\n                {stateString == \"이동중\" ?\r\n                    <div id=\"arrow-div\">\r\n                        <div id=\"arrow-right-div\">\r\n                        <p id=\"arrow-right\"></p>\r\n                        <p id=\"arrow-right\"></p>\r\n                        </div>\r\n                    </div>\r\n                    : <BiCheckSquare className=\"icon icon-2\"/>\r\n                }\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default RobotServing\r\n","\r\nimport React, {useState, useEffect} from 'react'\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.10\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'\r\n\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';     //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\n\r\nfunction RobotItem(props) {\r\n    var robotImgSrc = \"/assets/robot/octa_robot_white.png\"; // 로봇 이미지 (색상과 번짐이 다름)\r\n    if(props.robotId == props.clickedRobotId){\r\n        robotImgSrc = \"/assets/robot/octa_robot_yellow.png\";       // 클릭된 로봇이라면 노랑\r\n    }\r\n    else if(props.pageType == \"monitoring\" && props.state == \"1\"){  // 모니터링 페이지에서 이동중이라면 초록\r\n        robotImgSrc = \"/assets/robot/octa_robot_green.png\";\r\n    }\r\n    const posX = (props.posX) -25; //-0.5    // db에 저장된 xy위치는 1rem의 100배의 수치이다.\r\n    const posY = (props.posY) -25;   //중앙에 위치하기 위해 0.5전부터 그림. 이건 상수가 아닌 변수로 /*upgradeable*/\r\n    \r\n\r\n    function handelRobotClick(){\r\n        // console.log(\"robot click!\");\r\n        props.setClickedRobotId(props.robotId);\r\n    }\r\n    return (\r\n        <div className=\"robot\"  onClick={handelRobotClick} style={{ left: posX+\"px\", top: posY+\"px\"}}>\r\n            <img src={robotImgSrc} alt=\"robot-icon-img\" className='robot-icon-img'/>\r\n        </div>\r\n    )\r\n\r\n}\r\nfunction calcAngleDegrees(x, y) {   // 하나의 좌표와 원점사이의 arctan(degree각도) 계산\r\n    return Math.atan2(y, x) * 180 / Math.PI;\r\n}\r\n\r\nfunction TargetItem(props){\r\n\r\n    const ax = props.currX+25;\r\n    const ay = props.currY+25;\r\n    const bx = props.finalX+25;\r\n    const by = props.finalY+25;\r\n    // 선분의 중심은 두 점사이의 중심\r\n    const centerX = (ax+bx)/2;\r\n    const centerY = (ay+by)/2;\r\n\r\n    // 선분의 길이는 두 점 사이의 길이 (width)\r\n    const size = Math.sqrt(Math.pow(ax-bx, 2) + Math.pow(ay-by,2));\r\n\r\n    // target -형태의 div 시작위치는 중점에서 길이의 반절만큼 왼쪽으로 가야함\r\n    const top = centerY;\r\n    const left = centerX - (size)/2;\r\n\r\n    // 수평선으로부터 회전된 각도는 한 점이 원점이라고 할 때 arctan 값\r\n    const degree = calcAngleDegrees(ax-bx, ay-by);\r\n    const transformString = \"rotate(\"+degree.toString() + \"deg)\"\r\n    return (\r\n        <div className=\"target\" style={{ left: left+\"px\", top: top+\"px\", width: size+\"px\", transform:transformString}}>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction RobotPosition({ clickedRobotId, robotData, setClickedRobotId, pageType }) {\r\n    function test() {\r\n        console.log(\"test\");\r\n        return;\r\n    }\r\n    if (robotData.length > 0 || pageType==\"serving\") {\r\n        return (\r\n            <div>\r\n                {robotData.map(robot => (\r\n\r\n                    <RobotItem\r\n                        key={robot.robot_id} clickedRobotId={clickedRobotId} setClickedRobotId={setClickedRobotId} pageType={pageType}\r\n                        robotId={robot.robot_id} state={robot.state} posX={robot.curr_x} posY={robot.curr_y} />\r\n                ))}\r\n                {/* {robotData.filter(robot => robot.state == 1).map(frobot => (\r\n                    <TargetItem\r\n                        currX={frobot.curr_x} currY={frobot.curr_y} finalX={frobot.final_x} finalY={frobot.final_y}\r\n                        key={frobot.robot_id} />\r\n                ))} */}\r\n\r\n            </div>\r\n        )\r\n    } else {  // 조회 데이터 존재하지 않을 경우\r\n        console.log(\" robot data를 불러오는데 실패했습니다.\");\r\n        return (\r\n            <div>\r\n                {/* <button className=\"data-reload\" onClick={test}>데이터 불러오기</button> */}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default RobotPosition\r\n","import React from 'react';\r\nimport {createPortal} from 'react-dom';\r\n// icon\r\nimport { AiOutlineInfoCircle } from 'react-icons/ai';\r\n\r\n//css\r\nimport './style.css';\r\n\r\nfunction Modal({ title,highlight, content, open, onPermit, onCancel }) {\r\n  if (!open) return null;\r\n  return createPortal(\r\n    <div id=\"modal\">\r\n      <div id=\"overlay\" />\r\n      <div id=\"modal-box\" className=\"background-color-w text-color-1\">\r\n        <h3 id=\"modal-title\" className=\"text-color-1\"><AiOutlineInfoCircle className=\"icon icon-2\"/>{title}</h3>\r\n        <div id=\"modal-content\" className=\"text-color-1\"><span className=\"text-color-2\">{highlight}</span>{content}</div>\r\n          <button id=\"cancle-button\" className=\"text-color-1 background-color-w\" onClick={onCancel}>아니오</button>\r\n          <button id=\"ok-button\" className=\"text-color-w background-color-2\" onClick={onPermit}>예</button>\r\n      </div>\r\n    </div>,\r\n    document.getElementById('modal')\r\n\r\n  )\r\n}\r\n\r\nexport default Modal\r\n","import axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n// axios.defaults.headers.common['Authorization'] = \"Basic bk9HbGM5andYc2xrMmFhR3M4bkFSZzp5c3Rwdw==\";\r\n\r\nexport async function getMapTable() {    // map화면에서 목적지 table을 보여주는\r\n    \r\n    const userId = sessionStorage.getItem('userId');\r\n    const apiKey = sessionStorage.getItem('userKey');\r\n    var config = {\r\n        headers: {\r\n            \"Authorization\": \"Basic \"+ apiKey\r\n        }\r\n    };\r\n    // console.log(config);\r\n// axios.defaults.headers.common['Authorization'] = \"Basic bk9HbGM5andYc2xrMmFhR3M4bkFSZzp5c3Rwdw==\";\r\n\r\n    try {\r\n        const response = await axios.get('/api/map-table/display/'+userId, config\r\n        );  \r\n        // const response = axios({\r\n        //     method: 'post',\r\n        //     url: '/src/public/map-tables/display',\r\n        //     data: { \r\n        //         id: userId\r\n        //     }\r\n        //     , headers: { 'Authorization': 'Basic '+ apiKey }\r\n\r\n        // });\r\n        if (response.status == 200) { \r\n            return [false, response.data]\r\n        }\r\n        else {\r\n        // console.log(\"[MapController] getMapTable server error.\\n\");\r\n        return [response.data.error, response.data.message];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[MapController] getMapTable error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\n\r\nexport async function getDestinationRobot(userId, destinationTable) {    // map화면에서 목적지 node를 눌렀을 때, 픽업대의(1번) 로봇을 보내는 함수\r\n    const apiKey = sessionStorage.getItem('userKey');\r\n    var config = {\r\n        \"headers\": {\r\n            \"Authorization\": \"Basic \" + apiKey\r\n        }\r\n    };\r\n    try {\r\n        const response = await axios.get('/api/robot/to-destination/' + userId, config);  // button mqtt post를 위한 정보 얻기 : robot id, map name, (final node =destinationNode)\r\n        let error = response.data.error; \r\n        console.log(\"[MapController] getDestinationRobot to-destination 결과 ->\");\r\n        console.log(response);\r\n\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            // alert(response.data.message);\r\n            console.log(response.data.message)\r\n            console.log(response.data.where)\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            let robotId = response.data.robot_id;\r\n            let mapName = response.data.map_name;\r\n            let postError = postButton([destinationTable, mapName, robotId]);\r\n            return [postError, robotId];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[MapController] getDestinationRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\nexport async function getInitRobot(userId, robotId) {    // 특정 map, robot을 초기화 하는 함수 /robot/initialize/{userId}\r\n    const apiKey = sessionStorage.getItem('userKey');\r\n    var config = {\r\n        \"headers\": {\r\n            \"Authorization\": \"Basic \" + apiKey\r\n        }\r\n    };\r\n    try {\r\n        const response = await axios.get('/api/robot/initialize/' + userId +\"/\"+robotId, config);  // button mqtt post를 위한 정보 얻기 : map name\r\n        console.log(\"[MapController] getInitOneRobot 결과 ->\");\r\n        console.log(response);\r\n        return [response.data.error, response.data.message]\r\n\r\n    } catch (e) {\r\n        console.log(\"[MapController] getInitOneRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\n\r\nexport async function getHomeRobot(userId, robotId) {    // map화면에서 로봇버튼을 눌렀을 때, 해당 번호의 로봇을 픽업대의(1번)로 보내는 함수\r\n    const apiKey = sessionStorage.getItem('userKey');\r\n    var config = {\r\n        \"headers\": {\r\n            \"Authorization\": \"Basic \" + apiKey\r\n        }\r\n    };\r\n    try {\r\n        const response = await axios.get('/api/robot/to-home/' + userId + \"/\" + robotId, config);  // button mqtt post를 위한 정보 얻기 : map name\r\n        let error = response.data.error;\r\n        console.log(\"[MapController] getHomeRobot to-home 결과 ->\");\r\n        console.log(response);\r\n\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            // alert(response.data.message);\r\n            console.log(response.data.message)\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            let mapName = response.data.map_name;\r\n            let postError = postButton([0, mapName, robotId]);\r\n            return [postError, response.status];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[MapController] getHomeRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\n\r\nfunction postButton(params) {\r\n    const apiKey = sessionStorage.getItem('userKey');\r\n\r\n    console.log(\"[MapController] postButton param \", params);\r\n    try {\r\n        const response = axios({\r\n            method: 'post',\r\n            // url: '/src/public/mqtt/button',\r\n            url: '/api/mqtt/button',\r\n            data: {\r\n                table_id: params[0],\r\n                map_name: params[1],\r\n                robot_id: params[2]\r\n            }\r\n            , headers: { 'Authorization': 'Basic '+ apiKey }\r\n\r\n        });\r\n        console.log(\"[MapController] postButton   결과 ->\");\r\n        console.log(response);\r\n        return false;\r\n\r\n    } catch (e) {\r\n        console.log(\"[MapController] postButton button 정보를 로봇으로 보내는데 실패했습니다.\\n\" + e.message);\r\n        // return [true, e.message]\r\n        return true;\r\n    }\r\n}","import React, {useState} from 'react'\r\nimport Modal from './../Modal/Modal';\r\nimport {getDestinationRobot} from './MapController';\r\n\r\nfunction TableItem(props) {\r\n    const tableName = props.data['table_name'];\r\n    const posX = (props.data['x']) - 64;\r\n    const posY = (props.data['y'])- 43;\r\n\r\n    return (\r\n        <div className=\"table-button background-color-3 \" onClick={props.onClick} style={{left:posX+\"px\", top:posY+\"px\"}}>\r\n            <div className=\"table-button-name text-color-w\">{tableName}</div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction TablePosition({tableData}) {\r\n    const modalTitle = \"서빙 시작 안내\";\r\n    const modalContent = \"으로 서빙을 시작할까요?\";\r\n    \r\n    // const [modalContent, setModalContent] = useState(\"테이블을 클릭하지 않았습니다.\");\r\n    const [modalHighlight, setModalHighlight] = useState(\"\");\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [clickedTableId, setClickedTableId] = useState(0);\r\n\r\n    function handleTableClick(tableInfo) {   // 테이블 버튼을 눌렀을 때 모달을 띄우는 함수\r\n        const  tableId = tableInfo[0];\r\n        const  tableName = tableInfo[1];\r\n        var highlightString = \"\";\r\n        if (isNaN(tableName)){  // table name 이 숫자가 아닐 때 (ex. 배달)\r\n            //console.log(\"not number!\");\r\n            highlightString = tableName+\"구역\";\r\n        }\r\n        else{\r\n            highlightString = \"테이블\"+tableName+\"번\";\r\n        }\r\n        // 선택된 로봇이 존재 할 때\r\n        setIsModalOpen(true);\r\n        setModalHighlight(highlightString);\r\n        setClickedTableId(tableId);\r\n        // nothing do\r\n        console.log(\"table modal click!\");\r\n    }\r\n    \r\n    async function clickTableModalPermit(){    //모달에서 확인을 눌렀을 때 동작\r\n        const userId = sessionStorage.getItem('userId');\r\n\r\n        let [error, message] = await getDestinationRobot(userId, clickedTableId);\r\n        if (!error) {\r\n            console.log(\"[TablePosition] getDestinationRobot success : \", message);\r\n        }\r\n        else {\r\n            console.log(\"[TablePosition] getDestinationRobot fail  : \", message);\r\n        }\r\n        //모달 데이터 초기화\r\n        setIsModalOpen(false);\r\n        setModalHighlight(\"\");\r\n        setClickedTableId(0);\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {tableData.map(tableItem => (\r\n                <TableItem data={tableItem} key={tableItem['table_id']} onClick={() => handleTableClick([tableItem['table_id'], tableItem['table_name']])}/>\r\n            ))}\r\n            <Modal title={modalTitle} highlight={modalHighlight}  content={modalContent} open={isModalOpen} onCancel={()=>setIsModalOpen(false)}\r\n                    onPermit={clickTableModalPermit}>\r\n                </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TablePosition\r\n","import React, { Component } from 'react'\r\nimport RobotServing from './RobotServing';\r\nimport RobotPosition from './RobotPosition';\r\nimport TablePosition from './TablePosition';\r\nimport Modal from './../Modal/Modal';\r\n// import {getDestinationRobot, getHomeRobot, getAllHomeRobot} from '../Call/CallController';\r\nimport {getMapTable, getInitRobot, getDestinationRobot, getHomeRobot} from './MapController';\r\n// 아이콘   AiOutlineLock\r\nimport {GrMap} from 'react-icons/gr'\r\nimport {MdErrorOutline} from 'react-icons/md'\r\n\r\nexport class MapPresenter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        // this.mapContainer = React.createRef()\r\n        this.state = {\r\n            mapTable:[], // componenteDidMount에서 저장\r\n            robotStatus:[], //RobotPosition에서 1초마다 저장\r\n            clickedTableId:0,   //table 클릭 시 저장\r\n            clickedRobotId:0,   //로봇 클릭시 저장\r\n            isModalOpen:false,  // 모달 열림 여부 저장\r\n            modalTitle:\"제목\",  // 모달에 들어갈 정보 \r\n            modalContent: \"내용\",   //          저장\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n\r\n        let [error, result] = await getMapTable();  //table 위치 불러오기. 한번만 불러옴\r\n        if (error) {\r\n            alert(\"[MapPresenter] getMapTable 불러오기 실패 : \", error);\r\n            return;\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            mapTable: result\r\n        }))\r\n    }\r\n\r\n    setRobotStatus(props){\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            robotStatus: props\r\n        }))\r\n    }\r\n    \r\n\r\n    handelTableClick(tableInfo){\r\n        const  tableId = tableInfo[0];\r\n        const  tableName = tableInfo[1];\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isModalOpen: \"table\",\r\n            clickedTableId: tableId,\r\n            modalTitle: \"로봇 보내기\",\r\n            modalContent: tableName+\"번 테이블로 로봇을 보내겠습니까?\",\r\n            clickedRobotId: 0\r\n        }))\r\n        // nothing do\r\n        console.log(\"table modal click! \"+tableId);\r\n    }\r\n    \r\n    handelRobotClick(i){\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            clickedRobotId: i,\r\n        }))\r\n        // nothing do\r\n        console.log(\"robot click! \"+i);\r\n    }\r\n    handelNotRobotClick=()=>{\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            clickedRobotId: 0,\r\n        }))\r\n    }\r\n    handleInitClick = () => {   // 로봇 초기화 버튼\r\n        const clickedRobotId = this.state.clickedRobotId;\r\n        if (clickedRobotId == 0){   // 로봇이 선택되지 않았을 때\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: \"message\",\r\n                modalTitle: \"로봇 초기화\",\r\n                modalContent: \"선택된 로봇이 존재하지 않습니다.\"\r\n            }))\r\n            return;\r\n        }\r\n        // 선택된 로봇이 존재 할 때\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isModalOpen: \"init\",\r\n            modalTitle: \"로봇 초기화\",\r\n            modalContent: clickedRobotId+\"번 로봇을 초기화하시겠습니까?\"\r\n        }))\r\n        // nothing do\r\n        // console.log(\"init one modal click!\");\r\n    }\r\n    handleReturnClick = () => {   // 로봇 복귀 버튼\r\n        const clickedRobotId = this.state.clickedRobotId;\r\n        if (clickedRobotId == 0){   // 로봇이 선택되지 않았을 때\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: \"message\",\r\n                modalTitle: \"로봇 복귀\",\r\n                modalContent: \"선택된 로봇이 존재하지 않습니다.\"\r\n            }))\r\n            return;\r\n        }\r\n        // 선택된 로봇이 존재 할 때\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isModalOpen: \"return\",\r\n            modalTitle: \"로봇 복귀\",\r\n            modalContent: clickedRobotId+\"번 로봇을 복귀시키겠습니까?\"\r\n        }))\r\n        // nothing do\r\n        // console.log(\"init one modal click!\");\r\n    }\r\n    async clickTableModalPermit(userId){\r\n        const destinationTable = this.state.clickedTableId;\r\n\r\n        let [error, message] = await getDestinationRobot(userId, destinationTable);\r\n        if (!error) {\r\n            console.log(\"[MapPresenter] getDestinationRobot success : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false,\r\n                clickedTableId: 0\r\n            }))\r\n        }\r\n        else {\r\n            console.log(\"[MapPresenter] getDestinationRobot fail  : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false\r\n            }))\r\n        }\r\n    }\r\n    \r\n    async clickInitModalPermit(userId){\r\n        const clickedRobotId = this.state.clickedRobotId;\r\n\r\n        let [error, message] = await getInitRobot(userId, clickedRobotId);\r\n        if (!error) {\r\n            console.log(\"[MapPresenter] getInitOneRobot success : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false,\r\n                clickedRobotId: 0\r\n            }))\r\n        }\r\n        else {\r\n            console.log(\"[MapPresenter] getInitOneRobot fail  : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false,\r\n                clickedRobotId: 0\r\n            }))\r\n        }\r\n    }\r\n    async clickReturnModalPermit(userId){\r\n        const clickedRobotId = this.state.clickedRobotId;\r\n        let [error, message] = await getHomeRobot(userId, clickedRobotId);\r\n        if (!error) {\r\n            console.log(\"[MapPresenter] getHomeRobot success : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false,\r\n                clickedRobotId: 0\r\n            }))\r\n        }\r\n        else {\r\n            console.log(\"[MapPresenter] getHomeRobot fail  : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false\r\n            }))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        \r\n        \r\n        const userId = sessionStorage.getItem('userId');\r\n    const mapId = sessionStorage.getItem('mapId');\r\n\r\n        const isModalOpen = this.state.isModalOpen;\r\n        const robotStatus = this.state.robotStatus;\r\n        const mapBackgroundSrc = \"assets/map-background/map-background-\"+mapId+\".png\";\r\n\r\n        return (\r\n            <div className=\"content\" id=\"map\">\r\n                <div className=\"content-title text-color-1\"> <GrMap className=\"icon\" />서빙 모드</div>\r\n\r\n                <div className=\"grid-container\">\r\n\r\n                    <div className=\"grid-item item-scroll\" id=\"item-map\">\r\n                        <div id=\"map-top\">\r\n                            <div id=\"discription\">\r\n                                <MdErrorOutline className=\"icon icon-w\" />\r\n                                <p>음식을 보낼 <span className=\"text-color-3\">테이블을 선택</span>하거나 정보를 볼 <span className=\"text-color-3\">로봇을 선택</span>하세요</p>\r\n                            </div>\r\n\r\n                        </div>\r\n                        {/* ref={this.mapContainer}  */}\r\n                        <div id=\"map-container\">\r\n                            <RobotPosition clickedRobotId={this.state.clickedRobotId} setRobotStatus={p => this.setRobotStatus(p)} onClick={i=>this.handelRobotClick(i)}/>\r\n                            <TablePosition xytypeList={this.state.mapTable} onClick={i=>this.handelTableClick(i)}/>\r\n                            <img src={mapBackgroundSrc} alt=\"map-background-img\" className=\"map-background-img\"  onClick={()=>this.handelNotRobotClick()}/>\r\n                        </div>\r\n\r\n                    </div>\r\n                    \r\n                    <div className=\"grid-item\" id=\"item-serving\">\r\n                        <div className=\"grid-title text-color-1\">로봇 서빙 현황</div>\r\n                            <ul>\r\n                                {robotStatus.map(robot => (\r\n                                    <RobotServing robot={robot} key={robot.robot_id}  onClick={()=>this.handelRobotClick(robot.robot_id)} clickedRobotId={this.state.clickedRobotId} />\r\n                                ))}\r\n                            </ul>\r\n                            <div id=\"error-control\">\r\n                                <button id=\"return\" className=\"text-color-2 background-color-w\" onClick={this.handleReturnClick}>복귀</button>\r\n                                <button id=\"init\" className=\"text-color-w background-color-1\" onClick={this.handleInitClick}>초기화</button>\r\n                            </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <Modal title={this.state.modalTitle} content={this.state.modalContent} open={isModalOpen} onCancel={() => this.setState(prevState => ({ isModalOpen: false }))}\r\n                    onPermit={isModalOpen == \"table\" ? () => this.clickTableModalPermit(userId)\r\n                            : isModalOpen == \"return\" ? () => this.clickReturnModalPermit(userId)\r\n                            : isModalOpen == \"init\" ? () => this.clickInitModalPermit(userId)\r\n                                : () => this.setState(prevState => ({ isModalOpen: false }))}>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MapPresenter\r\n","\r\n\r\nimport React, {useState} from 'react'\r\nimport Modal from './../Modal/Modal';\r\nimport { getInitRobot, getHomeRobot} from './MapController';\r\nimport './style.css';\r\n\r\n// , setModal, setTitle, setContent\r\nfunction ErrorControlButton({clickedRobotId,setClickedRobotId}) {\r\n    \r\n    const [modalTitle, setModalTitle] = useState(\"제목\");\r\n    const [modalContent, setModalContent] = useState(\"내용\");\r\n    const [modalHighlight, setModalHighlight] = useState(\"강조\");\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    \r\n    function handleInitClick() {   // 로봇 초기화 버튼\r\n        console.log(\"init one modal click!\");\r\n\r\n        if (clickedRobotId == 0){   // 로봇이 선택되지 않았을 때\r\n            setIsModalOpen(\"message\");\r\n            setModalTitle(\"로봇 초기화\");\r\n            setModalHighlight(\"선택된 로봇\");\r\n            setModalContent(\"이 존재하지 않습니다.\");\r\n            return;\r\n        }\r\n        // 선택된 로봇이 존재 할 때\r\n        setIsModalOpen(\"init\");\r\n        setModalTitle(\"로봇 초기화\");\r\n        setModalHighlight(clickedRobotId+\"번 로봇\");\r\n        setModalContent(\"을 초기화하시겠습니까?\");\r\n        // nothing do\r\n    }\r\n    function handleReturnClick() {   // 로봇 복귀 버튼\r\n        console.log(\"return one modal click!\");\r\n\r\n        if (clickedRobotId == 0){   // 로봇이 선택되지 않았을 때\r\n            setIsModalOpen(\"message\");\r\n            setModalTitle(\"로봇 초기화\");\r\n            setModalHighlight(\"선택된 로봇\");\r\n            setModalContent(\"이 존재하지 않습니다.\");\r\n                        return;\r\n        }\r\n        // 선택된 로봇이 존재 할 때\r\n        setIsModalOpen(\"return\");\r\n        setModalTitle(\"로봇 초기화\");\r\n        setModalHighlight(clickedRobotId+\"번 로봇\");\r\n        setModalContent(\"을 복귀시키겠습니까?\");\r\n\r\n        // nothing do\r\n    }\r\n    async function clickInitModalPermit(){\r\n        const userId = sessionStorage.getItem('userId');\r\n        let [error, message] = await getInitRobot(userId, clickedRobotId);\r\n        if (!error) {\r\n            console.log(\"[MapPresenter] getInitRobot success : \", message);\r\n        }\r\n        else {\r\n            alert(\"[MapPresenter] getInitRobot fail  : \", message);\r\n        }\r\n            setIsModalOpen(false);\r\n            setClickedRobotId(0);\r\n\r\n    }\r\n    async function clickReturnModalPermit(){\r\n        const userId = sessionStorage.getItem('userId');\r\n        let [error, message] = await getHomeRobot(userId, clickedRobotId);\r\n        if (!error) {\r\n            console.log(\"[MapPresenter] getHomeRobot success : \", message);\r\n        }\r\n        else {\r\n            alert(\"[MapPresenter] getHomeRobot fail  : \", message);\r\n        }\r\n        setIsModalOpen(false);\r\n        setClickedRobotId(0);\r\n    }\r\n\r\n    return (\r\n        <div id=\"error-control\">\r\n            <button id=\"return\" className=\"text-color-3 background-color-w\" onClick={handleReturnClick}>복귀</button>\r\n            <button id=\"init\" className=\"text-color-w background-color-3\" onClick={handleInitClick}>초기화</button>\r\n            <Modal title={modalTitle} highlight={modalHighlight} content={modalContent} open={isModalOpen} onCancel={()=>setIsModalOpen(false)}\r\n                    onPermit={isModalOpen == \"return\" ? clickReturnModalPermit\r\n                    : isModalOpen == \"init\" ? clickInitModalPermit\r\n                        : ()=>setIsModalOpen(false)}>\r\n                </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorControlButton\r\n","import React, { useState, useEffect } from 'react'\r\n\r\n// component\r\nimport ErrorControlButton from './ErrorControlButton';\r\nimport RobotPosition from './RobotPosition';\r\nimport TablePosition from './TablePosition';\r\nimport RobotServing from './RobotServing';\r\n//css\r\nimport './style.css';\r\n\r\n// function\r\nimport { getMapTable } from './MapController';\r\n// icon\r\nimport { FaMapMarkerAlt } from 'react-icons/fa';\r\nimport {RiFileListFill } from 'react-icons/ri';\r\nimport {MdTouchApp} from 'react-icons/md';\r\n// http\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.10\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\n\r\nfunction ServingPresenter() {\r\n\r\n    const [clickedRobotId, setClickedRobotId] = useState(1);    //클릭된 로봇\r\n    const [robotData, setRobotData] = useState([]); //불러온 로봇 데이터\r\n    const [tableData, setTableData] = useState([]); //불러온 테이블 데이터\r\n\r\n    const mapId = sessionStorage.getItem('mapId');\r\n    const mapBackgroundSrc = \"assets/map-background/map-background-\" + mapId + \".png\";  //배경 이미지\r\n    const apiKey = sessionStorage.getItem('userKey');\r\n    \r\n    var config = {\r\n        headers: {\r\n            \"Authorization\": \"Basic \" + apiKey\r\n        }\r\n    }\r\n    function getRobotData() {   // 로봇 데이터 불러오기\r\n        const userId = sessionStorage.getItem('userId');\r\n\r\n        var interval = setInterval(() => {\r\n            console.log(\"[RobotPosition] get robot position\")\r\n            axios.get('/api/robot/display/' + mapId, config)    /*api이름 data로 변경해야함 upgradable*/\r\n                .then((response) => {\r\n                    setRobotData(response.data.robot_position.filter(robot => robot.used == userId)); // 불러온 데이터중에서 user의 음식이 올려진 로봇만 필터링\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"call robot positions item fail.\");\r\n                    return interval;\r\n                })\r\n        }, 1000);   //1초마다 반복\r\n        return interval\r\n    }\r\n    async function getTableData() {  //table 위치 불러오기\r\n        let [error, result] = await getMapTable();\r\n        if (error) {\r\n            alert(\"[MapPresenter] getMapTable 불러오기 실패 : \", error);\r\n            return;\r\n        }\r\n        setTableData(result);\r\n        // console.log(result);\r\n    }\r\n\r\n\r\n    useEffect(() => {   // 로봇 데이터 불러오기 반복\r\n        const interval = getRobotData();\r\n        return () => clearInterval(interval);   // 다른 창으로 넘어갈때 로봇 불러오기 멈춤\r\n    }, [])\r\n    /* [robotPositionList] 쓰는 이유. (근데 쓰면 계속 불러오드람. 더 찾아보기.)\r\n    근데 여기서 새로고침을 하지 않으면 등록된 모습을 확인할 수 없다. 그 이유는 useEffect 함수의 두번째 인자로 빈 배열을 주면 처음 사이트에 들어갔을 1회만 렌더링이 되기 때문에 다시 값을 불러오지 않는다.\r\n    그래서 다음과 같이 수정해 주면 등록이 완료될 때 게시판이 업데이트 되는 모습을 확인할 수 있다.*/\r\n    useEffect(() => {   // 테이블 데이터 불러오기 \r\n        console.log(\"rendering~\");\r\n        getTableData();\r\n        // getRobot();\r\n    }, []);    //처음 랜더링에서만\r\n\r\n    function handelNotRobotClick() {     // 배경 이미지를 클릭할때 클릭된 로봇값 초기화\r\n        setClickedRobotId(0);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"content\" id=\"map\">\r\n\r\n\r\n                <div className=\"content-title\"> <FaMapMarkerAlt className=\"icon\" />서빙 모드</div>\r\n\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item item-scroll\" id=\"item-map\">\r\n                        <div id=\"map-top\">\r\n                            <div id=\"discription\" >\r\n                                <p className=\"text-color-1\">\r\n                                    <span className=\"icon-div background-color-2\"><MdTouchApp className=\"icon-w\" /></span>\r\n                                    음식을 보낼 <span className=\"text-color-2\">테이블을 선택</span>하거나 정보를 볼 <span className=\"text-color-2\">로봇을 선택</span>하세요</p>\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"map-container\">\r\n                            <RobotPosition clickedRobotId={clickedRobotId} robotData={robotData} setClickedRobotId={setClickedRobotId} pageType={\"serving\"}/>\r\n                            <TablePosition tableData={tableData} />\r\n                            <img src={mapBackgroundSrc} alt=\"map-background-img\" className=\"map-background-img\" onClick={handelNotRobotClick} />\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-serving\">\r\n                        <div className=\"grid-title text-color-1\"><RiFileListFill  className=\"icon icon-2\"/>로봇 서빙 현황</div>\r\n                        <ul>\r\n                            {robotData.map(robot => (   /*upgradable 하나의 robotData의 의미로 robot말고 다른 변수명 찾기 */\r\n                                <RobotServing robot={robot} key={robot.robot_id} clickedRobotId={clickedRobotId} setClickedRobotId={setClickedRobotId} />\r\n                            ))}\r\n                        </ul>\r\n                        <ErrorControlButton clickedRobotId={clickedRobotId} setClickedRobotId={setClickedRobotId} />\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ServingPresenter\r\n","import React from 'react'\r\n\r\nfunction RobotInfo({robot, clickedRobotId}) {\r\n    if(robot == null) return null;\r\n    else if (robot.robot_id != clickedRobotId) return null;\r\n    else {\r\n        const robotImgSrc = \"/assets/robot/basic_robot.png\";  //로봇 이미지    \r\n        var destination = \"\";\r\n        var tableName = robot.table_name;\r\n        if(tableName == null){\r\n            destination = \"현재 위치\";\r\n        }\r\n        else if (isNaN(tableName)){  // table name 이 숫자가 아닐 때 (ex. 배달)\r\n            //console.log(\"not number!\");\r\n            destination = tableName+\"구역\";\r\n        }\r\n        else{\r\n            destination = \"테이블 \"+tableName+\"번\";\r\n        }\r\n\r\n        return (\r\n\r\n            <div id=\"robot-info\">\r\n                <div id=\"robot-basic-img-div\">\r\n                <img src={robotImgSrc} alt=\"robot-basic-img\" className=\"robot-basic-img\" />\r\n                </div>\r\n                <div id=\"info-text\">\r\n                    <div className=\"text-color-1\">로봇 ID : <span className=\"text-color-3\">{robot.robot_id}</span></div>\r\n                    <div className=\"text-color-1\">목적지 : <span className=\"text-color-3\">{destination}</span></div>\r\n                    <div className=\"text-color-1\">베터리 : {robot.battery}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n}\r\n\r\n}\r\n\r\nexport default RobotInfo\r\n","import React, {useState, useEffect} from 'react'\r\n// component\r\nimport ErrorControlButton from './ErrorControlButton';\r\nimport RobotPosition from './RobotPosition';\r\nimport RobotInfo from './RobotInfo';\r\n// icon\r\nimport {RiWindow2Fill} from 'react-icons/ri';\r\nimport { FaHandPointer } from 'react-icons/fa';\r\nimport { ImInfo } from 'react-icons/im';\r\n\r\n// http\r\n\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.10\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'\r\n\r\nfunction MonitoringPresenter() {\r\n\r\n    const [clickedRobotId, setClickedRobotId] = useState(1);    //클릭된 로봇\r\n    const [clickedRobotData, setClickedRobotData] = useState();    //클릭된 로봇\r\n    const [robotData, setRobotData] = useState([]); //불러온 로봇 데이터\r\n\r\n    const mapId = sessionStorage.getItem('mapId');\r\n    const mapBackgroundSrc = \"assets/map-background/map-background-\" + mapId + \"-monitoring.png\";  //배경 이미지\r\n    const apiKey = sessionStorage.getItem('userKey');\r\n    \r\n    var config = {\r\n        headers: {\r\n            \"Authorization\": \"Basic \" + apiKey\r\n        }\r\n    }\r\n    function getRobotData() {   // 로봇 데이터 불러오기\r\n        const userId = sessionStorage.getItem('userId');\r\n\r\n        var interval = setInterval(() => {\r\n            console.log(\"[RobotPosition] get robot position\")\r\n            axios.get('/api/robot/display/' + mapId, config)    /*api이름 data로 변경해야함 upgradable*/\r\n                .then((response) => {\r\n                    setRobotData(response.data.robot_position);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"call robot positions item fail.\");\r\n                    return interval;\r\n                })\r\n        }, 1000);\r\n        return interval\r\n    }\r\n\r\n\r\n    useEffect(() => {   // 로봇 데이터 불러오기 반복\r\n        const interval = getRobotData();\r\n        return () => clearInterval(interval);   // 다른 창으로 넘어갈때 로봇 불러오기 멈춤\r\n    }, [])\r\n    /* [robotPositionList] 쓰는 이유. (근데 쓰면 계속 불러오드람. 더 찾아보기.)\r\n    근데 여기서 새로고침을 하지 않으면 등록된 모습을 확인할 수 없다. 그 이유는 useEffect 함수의 두번째 인자로 빈 배열을 주면 처음 사이트에 들어갔을 1회만 렌더링이 되기 때문에 다시 값을 불러오지 않는다.\r\n    그래서 다음과 같이 수정해 주면 등록이 완료될 때 게시판이 업데이트 되는 모습을 확인할 수 있다.*/\r\n\r\n    function handelNotRobotClick() {     // 배경 이미지를 클릭할때 클릭된 로봇값 초기화\r\n        setClickedRobotId(0);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"content\" id=\"map\">\r\n                <div className=\"content-title text-color-1\"><RiWindow2Fill className=\"icon\" />모니터링</div>\r\n\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item item-scroll\" id=\"item-map\">\r\n                        <div id=\"map-top\">\r\n                            <div id=\"discription\">\r\n                            <p className=\"text-color-1\">\r\n                                    <span className=\"icon-div background-color-2\"><FaHandPointer className=\"icon-w\" /></span>\r\n                                    <span className=\"text-color-3\">상태를 확인할 로봇을</span> 선택하세요</p>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div id=\"map-container\">\r\n                            <RobotPosition clickedRobotId={clickedRobotId} robotData={robotData} setClickedRobotId={setClickedRobotId} pageType={\"monitoring\"}/>\r\n                            <img src={mapBackgroundSrc} alt=\"map-background-img\" className=\"map-background-img\"  onClick={handelNotRobotClick}  />\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-robot\">\r\n                        <div className=\"grid-title text-color-1\"><ImInfo className=\"icon icon-2\"/>로봇 정보</div>\r\n                        <RobotInfo clickedRobotId={clickedRobotId} robotData={robotData}/>\r\n                        <div>\r\n                        {robotData.map(robot => (   /*upgradable 하나의 robotData의 의미로 robot말고 다른 변수명 찾기 */\r\n                            <RobotInfo robot={robot} key={robot.robot_id}  clickedRobotId={clickedRobotId}/>\r\n                            ))}\r\n                        </div>\r\n                        <ErrorControlButton clickedRobotId={clickedRobotId} setClickedRobotId={setClickedRobotId} />\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MonitoringPresenter\r\n","import React, {useState, useEffect} from 'react'\r\n// import {GetRobotStatus} from './CallController';\r\nimport './../../assets/style.css';\r\n\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.10\r\n\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\n// -- 로봇 status 하나의 항목\r\nfunction RobotStatus({robot}){\r\n    return (\r\n        <li>\r\n            <span> {robot.robot_id}</span>\r\n            <span> - {robot.used == '0' ? \"대기\" : robot.used}</span> \r\n            <span> [ {robot.battery}% ]</span>\r\n        </li>\r\n    )\r\n}\r\n\r\n// -- 로봇 status 리스트에 필요한 작업(list)\r\nfunction CallStatus() {\r\n    const [robotStatusList, setRobotStatusList] = useState([]);\r\n\r\n    const mapId = sessionStorage.getItem('mapId');\r\n\r\n    function getRobotStatus(){\r\n        axios.get('/controller/robot/status/'+mapId)\r\n        .then((response)=>{\r\n            setRobotStatusList(response.data.robot_status);            \r\n        })\r\n        .catch((error) => {\r\n            console.log(\"call robot status item fail.\");\r\n        })\r\n    }\r\n    function countNotUsed(){\r\n        // console.log(\" lenghtheth : \");\r\n        const count = robotStatusList.filter(robot => robot.used === \"0\");  //아무도 사용중이지 않은 로봇 ('0')의 수 계산\r\n        return count.length;\r\n        // if (robotStatusList.length > 0) {\r\n        //     const count = robotStatusList.filter(robot => robot.used === \"0\");\r\n        //     return count.length;\r\n        // }s\r\n        // else {\r\n        //     return 0;\r\n        // }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRobotStatus();\r\n    }, [robotStatusList])\r\n    /* [robotStatusList] 쓰는 이유. (근데 쓰면 계속 불러오드람. 더 찾아보기.)\r\n    근데 여기서 새로고침을 하지 않으면 등록된 모습을 확인할 수 없다. 그 이유는 useEffect 함수의 두번째 인자로 빈 배열을 주면 처음 사이트에 들어갔을 1회만 렌더링이 되기 때문에 다시 값을 불러오지 않는다.\r\n그래서 다음과 같이 수정해 주면 등록이 완료될 때 게시판이 업데이트 되는 모습을 확인할 수 있다.*/\r\n    //불러온 데이터가 존재 할 경우\r\n    if (robotStatusList.length > 0) {\r\n        return (\r\n            <div className=\"grid-container call-status\">\r\n                <div className=\"grid-item\" id=\"item-available\">\r\n                    <h4>호출가능 로봇 수</h4>\r\n                    <div>{countNotUsed()}</div>\r\n                </div>\r\n                <div className=\"grid-item item-state\">\r\n                    <h4>로봇 상태</h4>\r\n                    <div>\r\n                        <ul>\r\n                            {robotStatusList.map(robot => (\r\n                                <RobotStatus robot={robot} key={robot.robot_id} />\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    else {  // 조회 데이터 존재하지 않을 경우\r\n        console.log(\" robotStatusList.length <= 0 존재안함\")\r\n        return (\r\n            <div className=\"grid-container call-status\">\r\n                <div className=\"grid-item\" id=\"item-available\">\r\n                    <h4>호출가능 로봇 수</h4>\r\n                    <div>0</div>\r\n                </div>\r\n                <div className=\"grid-item item-state\">\r\n                    <h4>로봇 상태</h4>\r\n                    <div>\r\n                        <button className=\"data-reload\" onClick={getRobotStatus}>데이터 로드</button>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CallStatus\r\n","import axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\nexport async function getPickupRobot(userId) {    // '픽업대'버튼 눌렀을 때 로봇을 home으로 보냄\r\n\r\n    try {\r\n        const response = await axios.get('/controller/button/to-pickup/' + userId);  // button mqtt post를 위한 정보 얻기\r\n        let error = response.data.error;\r\n        console.log(\"[CallController] getPickupRobot to-pickup 결과 ->\");\r\n        console.log(response);\r\n\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            // alert(response.data.message);\r\n            console.log(response.data.message)\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            let robotId = response.data.robot_id;\r\n            let robotHome = response.data.robot_home;\r\n            let mapName = response.data.map_name;\r\n            let postError = postButton([robotHome, mapName, robotId]);\r\n            return [postError, robotId];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[CallController] getPickupRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\nexport async function getCallRobot(userId) {    // 호출 버튼을 눌러 쉬고있는 로봇 하나를 user의 위치로 오도록 명령을 내린다.\r\n\r\n\r\n    try {\r\n            // [안전장치1] 조금의 버퍼링으로 로봇을 2번 호출하면 안됨.\r\n        /*\r\n            axios.get('/controller/button/robot-updated/' + userId)  // 최근 로봇 수정이 1초안에 있었다면 기달\r\n            .then((response) => {\r\n                console.log(\"[CallController] getCallRobot - robot-updated  결과 ->\");\r\n                console.log(response);\r\n                if (response.data.result.length) {  // 1초내 변경된 로봇의 결과가 1개 이상이라면\r\n                    var message = \"[CallController] getCallRobot - update in 3 second. please wait\";\r\n                    return [true, message];\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"[CallController] getCallRobot - robot-updated  fail get robot updated.\");\r\n                console.log(error);\r\n                return [error, response.data.message];\r\n            })\r\n            */\r\n        // [안전장치2] 조금의 버퍼링으로 로봇을 2번 호출하면 안됨.\r\n\r\n        axios.get('/controller/button/is-call/' + userId)  // 어떤 로봇이 오고있다면 반환\r\n            .then((response) => {\r\n                console.log(\"[CallController] getCallRobot - is call 결과 ->\");\r\n                console.log(response);\r\n                if (response.status == 201) {\r\n                    var message = \"[CallController] getCallRobot - some robot is coming\";\r\n                    return [true, message];\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"[CallController] getCallRobot - fail  get is call status.\");\r\n                console.log(error);\r\n                return [error, response.data.message];\r\n            })\r\n\r\n\r\n\r\n        const response = await axios.get('/controller/button/to-user/' + userId);\r\n        let error = response.data.error;\r\n        console.log(\"[CallController] getCallRobot - to-user  결과 ->\");\r\n        console.log(response);\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            console.log(response.data.message);\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            let robotId = response.data.robot_id;\r\n            let userNode = response.data.user_node;\r\n            let mapName = response.data.map_name;\r\n            let postError = postButton([userNode, mapName, robotId]);\r\n            return [postError, robotId];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[CallController] getCallRobot 호출 가능한 로봇이 없습니다. 기다려주세요.\\n\" + e.message);\r\n        return [true, e.message]\r\n    }\r\n}\r\nfunction postButton(params) {\r\n    console.log(\"[CallController] postButton param \", params);\r\n    try {\r\n        const response = axios({\r\n            method: 'post',\r\n            url: '/mqtt/button',\r\n            data: {\r\n                table_id: params[0],\r\n                map_name: params[1],\r\n                robot_id: params[2]\r\n            }\r\n        });\r\n        console.log(\"[CallController] postButton   결과 ->\");\r\n        console.log(response);\r\n        return false;\r\n\r\n    } catch (e) {\r\n        console.log(\"[CallController] postButton button 정보를 로봇으로 보내는데 실패했습니다.\\n\" + e.message);\r\n        return [true, e.message]\r\n    }\r\n\r\n}","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';     //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'\r\n\r\nfunction CallButton(props) {\r\n    const userId = sessionStorage.getItem('userId');\r\n    var responseStatus = 0;\r\n    const [buttonStatus, setButtonStatus] = useState(0);\r\n    const [calledRobot, setCalledRobot] = useState(0);\r\n\r\n    function getIsCall() {\r\n        var interval = setInterval(() => {\r\n            axios.get('/controller/button/is-call/' + userId)   // 현재 버튼 상태를 반복적으로 불러옴\r\n                .then((response) => {                    \r\n                    responseStatus = response.status    // 201 이동중 202 주방 200 픽업대에 위치\r\n                    switch (responseStatus) {\r\n                        case 201:\r\n                            console.log(\"[CallButton] 현재 매장의 로봇 이동중 : \" + responseStatus);\r\n                            if (buttonStatus != 1) {\r\n                                // console.log(buttonStatus+\"업데이트!\");\r\n                                props.updateLoading(0); //로봇의 움직임이 명령에 반응하여 다른 is call이 반응 했을 때 버튼 클릭 가능\r\n                                setButtonStatus(1);\r\n                            }\r\n                            setCalledRobot(response.data.robot_id); // 해당 주방으로 이동중인 로봇 id \r\n                            setButtonStatus(1);\r\n                            break;\r\n                        case 202:\r\n                            console.log(\"[CallButton] 현재 매장의 로봇 도착 : \" + responseStatus);\r\n                            if (buttonStatus != 2) {\r\n                                // console.log(buttonStatus+\"업데이트! \");\r\n                                props.updateLoading(0); //로봇의 움직임이 명령에 반응하여 다른 is call이 반응 했을 때 버튼 클릭 가능\r\n                                setButtonStatus(2);\r\n                            }\r\n                            setCalledRobot(response.data.robot_id); // 현재 주방에 도착한 로봇id\r\n                            setButtonStatus(2);\r\n                            break;\r\n                        case 200:\r\n                            console.log(\"[CallButton] 현재 매장의 로봇 호출안함 : \" + responseStatus);\r\n                            if (buttonStatus != 0) {\r\n                                // console.log(buttonStatus+\"업데이트!\");\r\n                                props.updateLoading(0); //로봇의 움직임이 명령에 반응하여 다른 is call이 반응 했을 때 버튼 클릭 가능\r\n                                setButtonStatus(0);\r\n                            }\r\n                                setButtonStatus(0);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    // return 1;\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"[CallButton] fail  get is-call button. error ->\");\r\n                    console.log(error);\r\n                    clearInterval(interval);\r\n\r\n                    return 0;\r\n                })\r\n            // if (buttonStatus != 1 && count == 3) {       // 로봇이 오는중이 아니고 3번의 로드 후\r\n            //     console.log(\"[CallButton] 버튼 제한 풀림\");\r\n            //     props.updateLoading(0); //버튼 잠금 푼다. 3초 로딩 후 버튼 허가\r\n            // }\r\n\r\n        }, 1000);\r\n        return interval;\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        const interval = getIsCall();   \r\n        return () => clearInterval(interval);   // 해당 function이 종료될 때 반복도 종료됨.  \r\n    }, [buttonStatus])\r\n\r\n    return (\r\n        <div >\r\n            <div id=\"called-robot\">\r\n                {buttonStatus != 0 ?\r\n                    <div><span>{calledRobot}</span> 번 로봇 배정 </div>\r\n                    :\r\n                    <div> </div>    // '호출'버튼일 때에는 배정된 로봇이 없다.\r\n                }\r\n\r\n            </div>\r\n            {\r\n                buttonStatus == 0 ? <button id=\"call-button\"  onClick={props.onClickKitchen}>호출</button>\r\n                : buttonStatus == 2 ? <button id=\"call-button\"  onClick={props.onClickPickup}>픽업대</button>\r\n                : <button id=\"call-button\">오는중</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CallButton\r\n","import React, { Component } from 'react';\r\nimport CallStatus from './CallStatus';\r\nimport {getPickupRobot, getCallRobot, getIsCall} from './CallController';\r\nimport CallButton from './CallButton';\r\nimport Modal from './../Modal/Modal';\r\n\r\nexport class CallPresenter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            loading: 0,\r\n            isModalOpen:false,\r\n            modalTitle:\"제목\",\r\n            modalContent: \"내용\",\r\n        };\r\n\r\n    }\r\n\r\n    // 로딩중에 버튼클릭 못하도록 하는 flag값을 갖는 변수 loading의 값을 변경하는 함수\r\n    updateLoading(input) {\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            loading: input\r\n        }))\r\n    }\r\n\r\n    // 모달에서 ok버튼 클릭시 \r\n    async clickPickupModalPermit(userId){\r\n\r\n        // 매장에 로봇이 도착한 상태. 픽업대 버튼을 누를때 시행되는 상황\r\n        let [error, message] = await getPickupRobot(userId);\r\n        if (!error) {\r\n            console.log(\"[CallPresenter] handleButtonClick back, robot_id : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                loading: 1, // 버튼 잠금 (로봇이 출발하지 않았을 때 다시 버튼을 누르는 것을 방지)\r\n                isModalOpen: false\r\n            }))\r\n        }\r\n        else {\r\n            console.log(\"[CallPresenter] handleButtonClick back, error  : \", message);\r\n            // alert(message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                loading: 0, // 버튼 오픈\r\n\r\n                isModalOpen: false\r\n            }))\r\n        }\r\n    }\r\n    // 모달에서 ok버튼 클릭시 \r\n    async clickKitchenModalPermit(userId){\r\n        // 로봇이 home에 있는 상태. 호출 버튼을 누를때 시행되는 상황\r\n        let [error2, message2] = await getCallRobot(userId);\r\n        if (!error2) {\r\n            console.log(\"[CallPresenter] handleButtonClick call, robot_id : \", error2);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                loading: 1, // 버튼 잠금 (로봇이 호출된 뒤 출발하기 전에 다시 버튼을 누르는것을 방지)\r\n                isModalOpen: false\r\n\r\n            }))\r\n        }\r\n        else {\r\n            console.log(\"[CallPresenter] handleButtonClick call, error  : \", message2);\r\n            // alert(message2);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                loading: 0, // 버튼 오픈\r\n                isModalOpen: false\r\n            }))\r\n        }\r\n\r\n    }\r\n    // 주요 버튼(호출 / 픽업대 / 오는중) 눌렀을 시 동작하는 함수\r\n        // 버튼 클릭시 모달을 띄우는 함수\r\n\r\n    handlePickupButtonClick() {\r\n        console.log(\"[CallPresenter] 픽업대로 버튼 클릭\");\r\n        // 오는 중 이거나 버튼을 누른지 3초 이내에는 handleButtonClick 함수를 끝낸다.\r\n        if (this.state.loading) {\r\n            console.log(\"[CallPresenter] loading...\");\r\n            return;\r\n        }\r\n        // 매장에 로봇이 도착한 상태. 픽업대 버튼을 누를때 시행되는 상황\r\n        this.setState(prevState => ({\r\n            ...prevState,   \r\n            isModalOpen: \"pickup\",\r\n            modalTitle: \"픽업대로\",\r\n            modalContent: \"해당 매장의 로봇을 픽업대로 보내겠습니까?\"\r\n        }));\r\n    }\r\n    handleKitchenButtonClick() {\r\n        console.log(\"[CallPresenter] 호출 버튼 클릭\" );\r\n        // 오는 중 이거나 버튼을 누른지 3초 이내에는 handleButtonClick 함수를 끝낸다.\r\n        if (this.state.loading) {\r\n            console.log(\"[CallPresenter] loading...\");\r\n            return;\r\n        }\r\n        // 매장에 로봇이 도착한 상태. 픽업대 버튼을 누를때 시행되는 상황\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isModalOpen: \"kitchen\",\r\n            modalTitle: \"로봇 호출\",\r\n            modalContent: \"로봇을 주방으로 호출하시겠습니까?\"\r\n        }));\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const userId = sessionStorage.getItem('userId');\r\n        const isModalOpen = this.state.isModalOpen;\r\n\r\n        return (\r\n            <div className=\"content\" id=\"call\">\r\n                <h1 > 로봇 호출</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item\" id=\"item-button\">\r\n                        <h4>로봇 호출 버튼</h4>\r\n                        <div id=\"calling-map-name\">\r\n                            {userId}의 매장 입니다.\r\n                        </div>\r\n                    \r\n                            <CallButton userId={userId} onClickPickup={() => this.handlePickupButtonClick()} onClickKitchen={() => this.handleKitchenButtonClick()}\r\n                                updateLoading={(input) => this.updateLoading(input)} />\r\n                    </div>\r\n                    <div className=\"item-call-status\">\r\n                        <CallStatus />\r\n\r\n                    </div>\r\n\r\n                </div>\r\n                <Modal title={this.state.modalTitle} content={this.state.modalContent} open={isModalOpen} onCancel={() => this.setState(prevState => ({ isModalOpen: false }))}\r\n                    onPermit={isModalOpen == \"pickup\" ? () => this.clickPickupModalPermit(userId)\r\n                                : () => this.clickKitchenModalPermit(userId)}>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CallPresenter\r\n","import React, { Component } from 'react';\r\nimport Modal from './../Modal/Modal';\r\nconst BUTTON_WRAPPER_STYLES = {\r\n    position: 'relative',\r\n    zIndex: 1\r\n  }\r\n  \r\n\r\nexport class SettingPresenter extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            isModalOpen: false\r\n        };\r\n    }\r\n    onLogout = () => {\r\n        window.sessionStorage.removeItem('userId');\r\n        window.sessionStorage.removeItem('mapId');\r\n        window.sessionStorage.removeItem('userName');\r\n        window.sessionStorage.removeItem('userKey');\r\n        window.sessionStorage.removeItem('logoSrc');\r\n\r\n        document.location.href = '/'\r\n        \r\n    }\r\n    render() {\r\n        const isModalOpen = this.state.isModalOpen;\r\n        console.log(\"[Setting presenter] username\");\r\n        console.log(sessionStorage.getItem('userName'));\r\n        return (\r\n            <div className=\"content setting\">\r\n                <h1>설정</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item\">\r\n                    설정 페이지입니다\r\n                    <button onClick={this.onLogout.bind(this)}>로그아웃</button>\r\n                        <div style={BUTTON_WRAPPER_STYLES} onClick={() => console.log('clicked')}>\r\n                            <button onClick={() => this.setState(prevState => ({isModalOpen:true }))}>Open Modal</button>\r\n\r\n                            <Modal title=\"제목\" content = \"내용22\" open={isModalOpen} onCancel={() => this.setState(prevState => ({isModalOpen:false }))}\r\n                            onPermit={() => this.setState(prevState => ({isModalOpen:false }))}>\r\n                            </Modal>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SettingPresenter\r\n","\r\nimport axios from 'axios';\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Line, Doughnut  } from \"react-chartjs-2\";\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\n// import Math;\r\nfunction HistoryPresenter() {\r\n    const [label, setLabel] = useState([]);\r\n    const [data, setData] = useState([]);\r\n    const [chartData, setChartData] = useState({})\r\n    \r\n    React.useEffect(() => {\r\n        axios\r\n            .get(\"https://private-afe609-testefront.apiary-mock.com/anual-result\")\r\n            .then(result => {\r\n                setLabel(Object.keys(result.data).map(key => result.data[key].label));\r\n                setData(Object.keys(result.data).map(key => result.data[key].value));\r\n                console.log(data);\r\n\r\n            });\r\n    }, []);\r\n    const testdata = [38, 9, 10, 11, 12, 13, 24, 15, 16, 17, 18, 19, 20];\r\n    return (\r\n        <div>\r\n            <div className=\"doughnut-center\"/>\r\n            <div className=\"doughnut\" style={{ width: '200px', height: '200px'}} >\r\n                <Doughnut className=\"doughnut0\"\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                data: [94, 25],\r\n                                backgroundColor: ['#49D7E3', '#558EFF'],\r\n                                borderWidth: 0,\r\n                            },\r\n                        ],\r\n                        hoverBorderWidth:0,\r\n                        weight: 0,\r\n                    }}\r\n                    options={{\r\n                        responsive: true,\r\n                        maintainAspectRatio: true,\r\n                        cutoutInnerPercentage: 73,\r\n                        cutoutPercentage: 80,\r\n                        title: {\r\n                            display: false,\r\n                        },\r\n                        legend: {\r\n                            display: false\r\n                        },\r\n                        layout: {\r\n                            padding: 0\r\n                        },\r\n                    }}\r\n                />\r\n            </div>\r\n            <div style={{ width: '600px', height: '400px'}}>\r\n                <Line \r\n                plugins={[ChartDataLabels]} \r\n                data={{\r\n                    labels: [8,9,10,11,12,13,14,15,16,17,18,19,20],\r\n                    datasets: [\r\n                        {\r\n                            label: 'My First dataset',\r\n                            backgroundColor: 'rgba(255,99,132,0.2)',\r\n                            borderColor: '#558EFF',\r\n                            borderWidth: 2.7,\r\n                            fill: false,\r\n                            data:  [38,9,10,11,12,13,24,15,16,17,18,19,20],\r\n                            // pointStyle: \"rectRot\",\r\n                            pointRadius: 5,\r\n                            pointBorderWidth:1.3,\r\n\r\n                            pointBackgroundColor: function (context) {\r\n                                const max = Math.max.apply(null, testdata);\r\n                                if (testdata[context.dataIndex] === max) {\r\n                                    return '#49d7e3';\r\n                                }\r\n                                return '#fff'\r\n                            },\r\n                            // [\"#f7aa2e\", \"#05b9af\", \"#ee734e\", \"#ee734e\"],\r\n                        }\r\n                    ]\r\n                }} \r\n                options={{\r\n                    legend: {   //지워야할듯.\r\n                        display: false\r\n                    },\r\n                    layout: {\r\n                        padding: {\r\n                            left: 50,\r\n                            right: 50,\r\n                        }\r\n                    },\r\n                    scales: {\r\n                        y: {\r\n                            suggestedMin: 0,\r\n                            suggestedMax: Math.max.apply(null, testdata) + 10,\r\n                            ticks: {\r\n                                font: {size: 18.7, family:'NotoSans', weight:'bold'},\r\n                                color: '#9b9fb6',\r\n                                stepSize: 20\r\n                            },\r\n                            grid: {\r\n                                // borderWidth:2.7,\r\n                                borderColor: '#ffffff00',\r\n\r\n                                lineWidth: 2,\r\n                                color: 'rgba(115, 119, 141, 0.2)'\r\n                            }\r\n                        },\r\n                        x:{\r\n                            grid: {\r\n                                // drawBorder: false,\r\n                                borderColor: 'rgba(115, 119, 141, 0.8)',\r\n                                borderWidth:2.7,\r\n                                color: function (context) {\r\n                                    const max = Math.max.apply(null, testdata);\r\n                                    if (testdata[context.tick.value] === max) {\r\n                                        return '#558EFF55';\r\n                                    }\r\n                                    return '#ffffff00'\r\n                                },\r\n                                borderDash:[15,5],\r\n                                lineWidth:1.9\r\n                            },\r\n                            ticks: {\r\n                                font: {size: 18.7, family:'NotoSans', weight:'bold'},\r\n                                color: '#9b9fb6',\r\n                                stepSize: 2, //??????\r\n                            },\r\n                        }\r\n                    },\r\n                    plugins: {\r\n                        datalabels: {   //피크일때 시각 라벨 표기\r\n                            anchor: 'end',\r\n                            align: 'top',\r\n                            offset: 10,\r\n                            color: '#558EFF',\r\n                            backgroundColor: '#fff',\r\n                            borderColor: '#558EFF',\r\n                            padding:{top:7, bottom:7, right:32, left:32},\r\n                            borderWidth: 2.7,\r\n                            borderRadius: 50,\r\n                            textShadowBlur:1, \r\n                            font: {size: 18.7, family:'NotoSans', weight:'bold'},\r\n                            formatter: function (value, context) {\r\n                                if (Math.max.apply(null, testdata) == value) {\r\n                                    return '피크타임 ' + context.chart.data.labels[context.dataIndex] + '시';\r\n                                }\r\n                                return null;\r\n                            },\r\n                        },\r\n\r\n                    },\r\n                }} /></div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default HistoryPresenter\r\n","import axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\nexport async function getRobotError(mapId) {    // 해당 맵의 로봇의 에러 기록들을 얻어온다\r\n\r\n    try {\r\n        const response = await axios.get('/robot-errors/map/' + mapId);  //\r\n        console.log(\"[ErrorController] getRobotError 결과 ->\");\r\n        console.log(response);\r\n        var status = response.status;\r\n        if (status>= 200) {\r\n            return [false, response.data];\r\n        }\r\n        return [true, \"getRobotError status is not 200.\"];\r\n\r\n    } catch (e) {\r\n        console.log(\"[ErrorController] getRobotError error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\nexport async function getRobotLog(logId) {    // 해당 에러와 연결된 로그의 정보를 불러옴\r\n\r\n    try {\r\n        const response = await axios.get('/robot-logs/' + logId);\r\n        console.log(\"[ErrorController] getRobotLog 결과 ->\");\r\n        console.log(response.data);\r\n        var status = response.status;\r\n        var errorMessage = \"\";\r\n        if (status>= 200) {\r\n            if (response.data.length > 0) {\r\n                return [false, response.data[0]];\r\n            }\r\n            else {\r\n                errorMessage = \"[ErrorController] not log data existed.\"\r\n                return [true, errorMessage];\r\n            }\r\n        }\r\n        else {\r\n            return [true, \"getRobotLog status is not 200.\"];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[ErrorController] getRobotLog error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}","import React, {useState, useEffect} from 'react'\r\n\r\nimport {getRobotError, getRobotLog} from './ErrorController';\r\nimport Modal from './../Modal/Modal';\r\n\r\n\r\n\r\nfunction ErrorPresenter() {\r\n    const [errorList, setErrorList]= useState([]);\r\n    const [modalTitle, setModalTitle]= useState(\"\");\r\n    const [modalContent, setModalContent]= useState(\"\");\r\n    const [isModalOpen, setIsModalOpen]= useState(false);\r\n    const mapId = sessionStorage.getItem('mapId');\r\n\r\n    /*\r\n    1:\r\n        created_at: \"2021-10-27 15:09:40\"\r\n        current_node_robot: \"1\"\r\n        current_node_server: \"16\"\r\n        error_id: \"5\"\r\n        error_type: \"world\"\r\n        last_log_id: null\r\n        map_id: \"7\"\r\n        robot_id: \"2\"\r\n    */\r\n    async function loadErrors() {\r\n\r\n        let [error, result] = await getRobotError(mapId);\r\n        if (!error) {\r\n            setErrorList(result);\r\n        }\r\n    }\r\n    async function loadLog(logId) {\r\n        let [error, result] = await getRobotLog(logId);\r\n        /*\r\n        created_at: \"2021-10-20 14:18:50\"\r\ncurrent_node: \"1\"\r\nfinal_node: \"1\"\r\nlog_id: \"1\"\r\nmap_existence: \"[1]1[2]0[3]0[4]0[5]0[6]0[7]0[8]0[9]0[10]0[11]0[12]0[13]0[14]0[15]0[16]0[17]0[18]0[19]0[20]0[21]0[22]0[23]2[24]3[25]0[26]0[27]0[28]0[29]0[30]0[31]0\"\r\nmap_id: \"8\"\r\nrobot_id: \"1\"\r\nrobot_path: \"9999!\"\r\n        */\r\n        var logString = \"\";\r\n        if (!error) {\r\n            logString = \"current node: \"+result.current_node+\"\\n||\\n\"+\"robot path: \"+result.robot_path+\"\\n||\\n\"+\"map existence: \"+result.map_existence;\r\n            setModalContent(logString);\r\n            return true;\r\n        }\r\n        setModalContent(logString);\r\n        return false;\r\n    }\r\n    function handelErrorClick(logId, errorId){\r\n        const isSuccess = loadLog(logId);\r\n        if(isSuccess){\r\n            setModalTitle(errorId+\"번 에러 (log \"+logId+\")\");\r\n            setIsModalOpen(true);    \r\n        }\r\n    }\r\n    function clickErrorModalButton(){\r\n            setIsModalOpen(false);    \r\n    }\r\n    useEffect(() => {\r\n        loadErrors();\r\n        console.log(errorList);\r\n\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <div className=\"content\" id=\"error\">\r\n                <h1 > 에러</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item item-scroll\" id=\"error-div\">\r\n                        에러 페이지입니다\r\n                        <table id=\"error-table\">\r\n                            <thead>\r\n                                <tr className=\"background-color-2\" align=\"center\" bgcolor=\"white\" >\r\n                                    <th>에러id</th>\r\n                                    <th>로봇</th>\r\n                                    <th>타입</th>\r\n                                    <th>로봇의 최신 current</th>\r\n                                    <th>서버의 최신 current</th>\r\n                                    <th>발생시각</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n\r\n                            <tbody>\r\n                                {errorList.map(robotError => (\r\n                                    <tr align=\"center\" bgcolor=\"white\" onClick={()=>handelErrorClick(robotError.last_log_id, robotError.error_id)}>\r\n                                        <td>{robotError.error_id}</td>\r\n                                        <th>{robotError.robot_id}</th>\r\n                                        <td>{robotError.error_type}</td>\r\n                                        <td>{robotError.current_node_robot}</td>\r\n                                        <td>{robotError.current_node_server}</td>\r\n                                        <td>{robotError.created_at}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Modal title={modalTitle} content={modalContent} open={isModalOpen}\r\n            onCancel={clickErrorModalButton} onPermit={clickErrorModalButton}>\r\n                </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorPresenter\r\n","import React from 'react'\r\n\r\nfunction PickupContent({ pickup }) {\r\n    const isNull = pickup.phone === \"\";\r\n    return (\r\n        <li className=\"pickup-item\">\r\n            <div className=\"pickup-number\"> {pickup.id}</div>\r\n            <div className=\"pickup-store\"> {pickup.store}</div>\r\n            <div className=\"pickup-status\">\r\n                {isNull ?\r\n                    <div> 비어있음</div>\r\n                    :\r\n                    <div>\r\n                        <div> 배달 주소 : {pickup.delivery}</div>\r\n                        <div> 연락처 : {pickup.phone}</div>\r\n                        <div> 대기시간 : {pickup.delay}</div>\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nfunction PickupItem({pickupList}) {\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {pickupList.map(pickupItem => (\r\n                    <PickupContent pickup={pickupItem} key={pickupList.id}/>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PickupItem\r\n","import React, { Component } from 'react'\r\nimport PickupItem from './PickupItem'\r\nexport class PickupPresenter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            pickupList : [\r\n                {id:1, store:\"대기\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"\", delay:0},\r\n                {id:2, store:\"맥도날드\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"1234\", delay:4},\r\n                {id:3, store:\"버거킹\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"1433\", delay:15},\r\n                {id:4, store:\"맘스터치\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"1134\", delay:3},\r\n                {id:5, store:\"대기\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"\", delay:0},\r\n                {id:6, store:\"롯데리아\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"1424\", delay:2}\r\n            ]\r\n        }\r\n        // this.toggle = this.toggle.bind(this);\r\n\r\n    }\r\n    render() {\r\n        const pickupList = this.state.pickupList\r\n        return (\r\n            <div className=\"content\" id=\"pickup\">\r\n                <h1> 픽업대 현황</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item item-scroll\" id=\"item-pickup-list\">\r\n                    <PickupItem pickupList={pickupList}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PickupPresenter\r\n","import React, { useEffect, useState } from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\n//component\r\nimport './style.css';\r\nimport Modal from './../Modal/Modal';\r\n//icon\r\nimport {AiOutlineLeft,AiOutlineRight, AiOutlineUnorderedList, AiOutlineQuestionCircle} from 'react-icons/ai'\r\nimport {ImUser} from 'react-icons/im'\r\nimport {MdWebAsset, MdDashboard} from 'react-icons/md'\r\nimport {RiLogoutBoxRLine, RiSettings3Line, RiMapPinLine} from 'react-icons/ri';\r\n\r\nfunction SideNavPresenter() {\r\n\r\n    const [isFullNav, setIsFullNav] = useState(true);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    var lineHeight = \"50px\"\r\n    var dbLogoSrc = sessionStorage.getItem('logoSrc');\r\n    var userName = sessionStorage.getItem('userName');\r\n    // userName = \"롯데리아다라마\";    //test!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    if(dbLogoSrc == null){\r\n        dbLogoSrc = \"terrace/terrace_logo\";\r\n    }\r\n    if(userName.length > 6){\r\n        lineHeight = \"30px\"\r\n    }\r\n    const logo_src = '/assets/store_logo/' + dbLogoSrc + '.png';\r\n    const modalTitle = \"로그아웃 안내\";\r\n    const modalHighlight = \"\";\r\n    const modalContent = \"로그아웃 하시겠습니까?\";\r\n// 로그아웃 함수\r\nfunction handleLogoutClick() {   // 로봇 복귀 버튼\r\n    console.log(\"logout modal click!\");\r\n    setIsModalOpen(true);\r\n}\r\nfunction clickLogoutPermit(){\r\n    window.sessionStorage.removeItem('userId');\r\n    window.sessionStorage.removeItem('mapId');\r\n    window.sessionStorage.removeItem('userName');\r\n    window.sessionStorage.removeItem('logoSrc');\r\n    window.sessionStorage.removeItem('userKey');\r\n\r\n    document.location.href = '/login'\r\n}\r\n    return (\r\n        <div id=\"side-nav\" className={\"side-nav \" + (isFullNav ? \"big-nav\" : \"small-nav center-align\")}>\r\n            <div className=\"center-align\" id=\"top\">\r\n                {/* <div onClick={() => setIsFullNav(!isFullNav)} className=\"toggle-menu-btn right-align\">\r\n                    {isFullNav ? (\r\n                        <AiOutlineLeft className=\"icon icon-1\" />\r\n                    ) : (\r\n                        <AiOutlineRight className=\"icon icon-1\" />\r\n                    )}\r\n                </div> */}\r\n\r\n                <div className=\"user-div\">\r\n                    <div id=\"nav-user-logo-div\">\r\n                        <img id=\"nav-user-logo\" src={logo_src} alt=\"user-logo\" />\r\n                    </div>\r\n\r\n                    {/* userid로 user img url 불러오기 */}\r\n                    <span id=\"nav-user-name\" style={{lineHeight:lineHeight}}>{userName}</span>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"side-class text-color-2\">Main Menu</div>\r\n            <NavLink to=\"/dashboard\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">대시보드</p>\r\n                <MdDashboard className=\"icon icon-1\" />\r\n            </NavLink>\r\n            <NavLink to=\"/serving\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">서빙 모드</p>\r\n                <RiMapPinLine className=\"icon icon-1\" />\r\n            </NavLink>\r\n            <NavLink to=\"/monitoring\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">모니터링</p>\r\n                <MdWebAsset className=\"icon icon-1\" />\r\n\r\n            </NavLink>\r\n            <NavLink to=\"/history\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">기록</p>\r\n                <AiOutlineUnorderedList className=\"icon icon-1\" />\r\n            </NavLink>\r\n            \r\n            <div className=\"side-class text-color-2\">General</div>\r\n            <NavLink to=\"/pickup\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">픽업대 상황</p>\r\n                <ImUser className=\"icon icon-1\" />\r\n            </NavLink>\r\n            <NavLink to=\"/setting\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\"> 설정</p>\r\n                <RiSettings3Line className=\"icon icon-1\" />\r\n            </NavLink>\r\n\r\n\r\n            <NavLink to=\"/error\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">에러</p>\r\n                <AiOutlineQuestionCircle className=\"icon icon-1\" />\r\n            </NavLink>\r\n\r\n            <div className=\"center-align\" id=\"bottom\">\r\n\r\n            <button id=\"nav-login\" className=\"round-button background-color-w\" onClick={handleLogoutClick}>\r\n                        <p className=\"text-color-1\"> 로그아웃</p>\r\n                        <RiLogoutBoxRLine className=\"icon icon-1\" />\r\n                    </button>\r\n            </div>\r\n            <Modal title={modalTitle} highlight={modalHighlight} content={modalContent} open={isModalOpen} onCancel={() => setIsModalOpen(false)}\r\n                onPermit={clickLogoutPermit}>\r\n                </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SideNavPresenter;\r\n","import React from 'react'\r\nimport './style.css';\r\n// icon\r\n\r\n\r\nimport {BsBellFill} from 'react-icons/bs'\r\nimport {MdLanguage} from 'react-icons/md'\r\nimport {IoIosArrowDown} from 'react-icons/io'\r\n\r\nfunction HeaderPresenter() {\r\n    return (\r\n        <div id= \"header\">\r\n            <div id=\"logo-div\">\r\n                <img id=\"logo\" src={\"/assets/hprobot-logo/hprobot-logo-1line.png\"} alt=\"login-logo-img\" />\r\n            </div>\r\n            <div id=\"language-div\">\r\n                <MdLanguage id=\"language-icon\" />\r\n                <div>한국어</div>\r\n                <IoIosArrowDown id=\"arrow-icon\" />\r\n            </div>\r\n            <div id=\"alram-div\">\r\n                <BsBellFill className=\"icon\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeaderPresenter\r\n","import './App.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Login from './component/Login/LoginPresenter';\r\nimport Dashboard from './component/Dashboard/DashboardPresenter';\r\nimport User from './component/User/User';\r\nimport Authorized from './component/User/Authorized';\r\nimport Map from './component/Map/MapPresenter';\r\nimport Serving from './component/Map/ServingPresenter';\r\nimport Monitoring from './component/Map/MonitoringPresenter';\r\nimport Call from './component/Call/CallPresenter';\r\nimport Setting from './component/Setting/SettingPresenter';\r\nimport History from './component/History/HistoryPresenter';\r\nimport Error from './component/Error/ErrorPresenter';\r\nimport Pickup from './component/Pickup/PickupPresenter';\r\nimport SideNav from './component/SideNav/SideNavPresenter';\r\nimport Header from './component/Header/HeaderPresenter';\r\nimport {  BrowserRouter as Router,  Route,  Redirect,  Switch} from 'react-router-dom';\r\n\r\n\r\nfunction App() {\r\n\r\n  //로그인 상태 관리\r\n  const [isAuthorized, setIsAuthorized] = useState(false) //로그인 상태. 기본 false\r\n\r\n  useEffect(() => {\r\n    const user = sessionStorage.getItem('mapId')\r\n    if (user == null) {\r\n      // sessionStorage 에 user_id 라는 key 값으로 저장된 값이 없다면\r\n    } else {\r\n      // sessionStorage 에 user_id 라는 key 값으로 저장된 값이 있다면\r\n      // 로그인 상태 변경\r\n      setIsAuthorized(true)\r\n    }\r\n  })\r\n\r\n  return (\r\n\r\n    <div className=\"web-container\">\r\n      {!isAuthorized ? <Login /> :  // 로그인 안되어있을 땐 항상 로그인 페이지\r\n        <Router>\r\n          <div className=\"web-top-bar\">헬퍼로보틱스 관제시스템</div>\r\n          <div className=\"web-side-nav\">\r\n            <SideNav />\r\n          </div>\r\n          <div className=\"web-header\">\r\n            <Header />\r\n          </div>\r\n          <div className=\"web-content\">\r\n            <Switch>\r\n              <Route path=\"/\" exact>\r\n                {!isAuthorized ? <Login /> : <Setting />}\r\n              </Route>\r\n              <Route path=\"/dashboard\" exact>\r\n                <Dashboard />\r\n              </Route>\r\n              <Route path=\"/serving\" exact>\r\n                <Serving />\r\n              </Route>\r\n              <Route path=\"/monitoring\" exact>\r\n                <Monitoring />\r\n              </Route>\r\n              <Route path=\"/call\" exact>\r\n                <Call />\r\n              </Route>\r\n              <Route path=\"/pickup\" exact>\r\n                <Pickup />\r\n              </Route>\r\n              <Route path=\"/history\" exact>\r\n                <History />\r\n              </Route>\r\n              <Route path=\"/error\" exact>\r\n                <Error />\r\n              </Route>\r\n              <Route path=\"/setting\" exact>\r\n                <Setting />\r\n              </Route>\r\n              <Route path=\"/my-page\" exact>\r\n                {!isAuthorized ? < User /> : <Error />}\r\n              </Route>\r\n\r\n              <Redirect to=\"/\" />\r\n              {/* 주어지지 않은 url은 home으로 자동 이동 */}\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      }\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n","import axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/default/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\nexport async function postControllerLogin(userId, userPassword) {    // map화면에서 목적지 node를 눌렀을 때, 픽업대의(1번) 로봇을 보내는 함수\r\n    var username = 'test';\r\n    var password = 'testpw'\r\n\r\n    const token = `${username}:${password}`;\r\n    const encodedToken = Buffer.from(token).toString('base64');\r\n    try {\r\n        const response = await axios({      // 로그인 정보 서버로 보내기\r\n            method: 'post',\r\n            url: '/default/public/login',\r\n            data: {\r\n                userId: userId,\r\n                userPassword: userPassword\r\n            }\r\n            // ,headers: { 'Authorization': 'Basic '+ encodedToken }\r\n        });\r\n        let valid = response.data.valid; \r\n        console.log(axios.defaults.baseURL);\r\n        console.log(\"[LoginController] postControllerLogin 결과 ->\");\r\n        console.log(response);\r\n        if (valid == true){     // 유효한 로그인 정보일 때\r\n            return [valid, response.data];  \r\n        }\r\n        else if(valid == false){      // 로그인 실패\r\n            return [valid, response.data.message];\r\n        }\r\n        else {\r\n            return [false, \"서버와 접속이 실패했습니다. 다시 시도해주세요.\"];\r\n\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[LoginController] postControllerLogin error catch.\\n\" + e.message);\r\n        \r\n        return [false, \"서버와 접속이 실패했습니다. 다시 시도해주세요.\"]\r\n    }\r\n}\r\n"],"sourceRoot":""}