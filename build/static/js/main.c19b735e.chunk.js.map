{"version":3,"sources":["component/Login/LoginController.js","component/Login/LoginPresenter.js","component/User/User.js","component/User/Authorized.js","component/Map/RobotServing.js","component/Map/RobotPosition.js","component/Modal/Modal.js","component/Map/MapController.js","component/Map/TablePosition.js","component/Map/MapPresenter.js","component/Map/ErrorControlButton.js","component/Map/ServingPresenter.js","component/Map/RobotInfo.js","component/Map/MonitoringPresenter.js","component/Call/CallStatus.js","component/Call/CallController.js","component/Call/CallButton.js","component/Call/CallPresenter.js","component/Setting/SettingPresenter.js","component/History/HistoryPresenter.js","component/Error/ErrorController.js","component/Error/ErrorPresenter.js","component/Pickup/PickupItem.js","component/Pickup/PickupPresenter.js","component/SideNav/SideNavPresenter.js","component/Header/HeaderPresenter.js","App.js","index.js"],"names":["postControllerLogin","userId","userPassword","a","axios","method","url","data","response","valid","console","log","defaults","baseURL","message","process","headers","post","LoginPresenter","useState","inputId","setInputId","inputPassword","setInputPassword","showPassword","setshowPassword","isRemember","setIsRemember","useCookies","cookies","setCookie","removeCookie","useEffect","undefined","rememberId","onSubmit","maxAge","document","getElementById","innerText","search","result","user_name","sessionStorage","setItem","map_id","logo_src","location","href","className","id","src","alt","type","autocapitalize","name","placeholder","value","onChange","e","target","onClick","onMouseDown","event","preventDefault","checked","for","User","onLogout","window","removeItem","userName","getItem","this","bind","Component","RobotServing","robot","clickedRobotId","setClickedRobotId","stateString","state","current_node","final_node","statusColor","robot_id","destination","tableName","table_name","isNaN","style","backgroundColor","RobotItem","props","robotImgSrc","robotId","pageType","posX","posY","left","top","TargetItem","x","y","ax","currX","ay","currY","bx","finalX","by","finalY","centerX","centerY","size","Math","sqrt","pow","transformString","atan2","PI","toString","width","transform","RobotPosition","robotData","length","map","curr_x","curr_y","filter","frobot","final_x","final_y","Modal","title","highlight","content","open","onPermit","onCancel","createPortal","getMapTable","mapId","get","status","error","getInitOneRobot","getDestinationRobot","destinationTable","where","mapName","map_name","postError","postButton","getHomeRobot","params","table_id","TableItem","TablePosition","tableData","modalHighlight","setModalHighlight","isModalOpen","setIsModalOpen","clickedTableId","setClickedTableId","tableItem","tableInfo","tableId","highlightString","handleTableClick","ErrorControlButton","modalTitle","setModalTitle","modalContent","setModalContent","alert","ServingPresenter","setRobotData","setTableData","mapBackgroundSrc","interval","setInterval","then","robot_position","used","catch","getRobotData","clearInterval","getTableData","RobotInfo","battery","MonitoringPresenter","RobotStatus","CallStatus","robotStatusList","setRobotStatusList","getRobotStatus","robot_status","getPickupRobot","robotHome","robot_home","getCallRobot","userNode","user_node","CallButton","responseStatus","buttonStatus","setButtonStatus","calledRobot","setCalledRobot","updateLoading","getIsCall","onClickKitchen","onClickPickup","CallPresenter","loading","input","setState","prevState","error2","message2","handlePickupButtonClick","handleKitchenButtonClick","clickPickupModalPermit","clickKitchenModalPermit","BUTTON_WRAPPER_STYLES","position","zIndex","SettingPresenter","HistoryPresenter","Box","bgcolor","p","m","sx","borderRadius","color","getRobotError","getRobotLog","logId","errorMessage","ErrorPresenter","errorList","setErrorList","logString","robot_path","map_existence","handelErrorClick","errorId","loadLog","clickErrorModalButton","loadErrors","align","robotError","last_log_id","error_id","error_type","current_node_robot","current_node_server","created_at","PickupContent","pickup","isNull","phone","store","delivery","delay","PickupItem","pickupList","pickupItem","PickupPresenter","SideNavPresenter","isFullNav","lineHeight","dbLogoSrc","to","activeClassName","HeaderPresenter","App","isAuthorized","setIsAuthorized","path","exact","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c19b735e.chunk.js","sourcesContent":["import axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\nexport async function postControllerLogin(userId, userPassword) {    // map화면에서 목적지 node를 눌렀을 때, 픽업대의(1번) 로봇을 보내는 함수\r\n\r\n    try {\r\n        const response = await axios({      // 로그인 정보 서버로 보내기\r\n            method: 'post',\r\n            url: '/controller/login',\r\n            data: {\r\n                userId: userId,\r\n                userPassword: userPassword\r\n            }\r\n        });\r\n        let valid = response.data.valid; \r\n        console.log(axios.defaults.baseURL);\r\n        console.log(\"[LoginController] postControllerLogin 결과 ->\");\r\n        console.log(response);\r\n        if (valid == true){     // 유효한 로그인 정보일 때\r\n            return [valid, response.data];  \r\n        }\r\n        else if(valid == false){      // 로그인 실패\r\n            return [valid, response.data.message];\r\n        }\r\n        else {\r\n            return [false, \"서버와 접속이 실패했습니다. 다시 시도해주세요.\"];\r\n\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[LoginController] postControllerLogin error catch.\\n\" + e.message);\r\n        \r\n        return [false, \"서버와 접속이 실패했습니다. 다시 시도해주세요.\"]\r\n    }\r\n}\r\n","import React, {useState, useEffect} from 'react'\r\nimport {postControllerLogin} from './LoginController';\r\nimport { useCookies } from 'react-cookie';  // 쿠키, 아이디 기억하기\r\nimport './style.css';\r\n\r\n// 아이콘   \r\nimport {IoIosEye, IoIosEyeOff} from 'react-icons/io'\r\nimport {AiOutlineLock, AiOutlineUser} from 'react-icons/ai'\r\n\r\n\r\n\r\nfunction LoginPresenter() {\r\n    \r\n    // 아이디, 패스워드 입력값 변수. 초기는 null\r\n    const [inputId, setInputId] = useState(\"\");\r\n    const [inputPassword, setInputPassword] = useState(\"\");\r\n\r\n    const [showPassword, setshowPassword] = useState(\"\");   //password 보여줌 여부, 보여준다면 input type:text 아니면 password\r\n    const [isRemember, setIsRemember] = useState(false);    // id 기억 여부 \r\n    const [cookies, setCookie, removeCookie] = useCookies(['rememberId']);  // 쿠키 접근, 기억된 아이디는 rememberId에 저장\r\n\r\n    useEffect(() => {   // 처음 열렸을때 기억된 id가 있는지 확인\r\n        if (cookies.rememberId !== undefined) {\r\n            setInputId(cookies.rememberId);\r\n            setIsRemember(true);\r\n        }\r\n    }, []);\r\n    \r\n    // input에 입력시 변수 갱신\r\n    const handleInputId = (e) => {\r\n        setInputId(e.target.value)\r\n    }\r\n    const handleInputPassword = (e) => {\r\n        setInputPassword(e.target.value)\r\n    }\r\n    // password show 아이콘 눌렀을 때\r\n    const handleClickShowPassword = () => {\r\n        setshowPassword(!showPassword);\r\n    };\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n    // remember 체크박스 눌렀을 때\r\n    const handleRemember = (e) => {\r\n        setIsRemember(e.target.checked);\r\n    }\r\n    // 입력 유효성 검사\r\n    function checkValid(){\r\n        console.log(\"hello\");\r\n        if (inputId == \"\" || inputPassword == \"\" ) { // 입력하지 않았을 시 \r\n            document.getElementById('fail-message').innerText = \"아이디와 비밀번호 모두 입력해주세요.\";\r\n            return false;\r\n        }\r\n        else if (inputId.search(/\\s/) != -1 || inputPassword.search(/\\s/) != -1 ) { // 공백이 존재할 시 || inputPassword.search(/\\s/) != -1\r\n            document.getElementById('fail-message').innerText = \"공백을 제외하고 입력해주세요.\";\r\n            return false;\r\n        }\r\n        return true\r\n    }\r\n    const onSubmit = async () => {\r\n        //아이디 기억 여부\r\n        if (isRemember) {\r\n            setCookie('rememberId', inputId, { maxAge: 2000 });\r\n        } else {\r\n            removeCookie('rememberId');\r\n        }\r\n        // 입력에 대한 기본 유효성 판단\r\n        if(!checkValid()){\r\n            return;\r\n        }\r\n        // 서버로 로그인 정보 확인\r\n        let [valid, result] = await postControllerLogin(inputId, inputPassword);\r\n        if (valid) {\r\n            // alert(\"success!\");\r\n            console.log(\"[LoginPresenter] login success : \");\r\n            console.log(result.user_name);\r\n            sessionStorage.setItem('userId', inputId)\r\n            sessionStorage.setItem('mapId', result.map_id)\r\n            sessionStorage.setItem('userName', result.user_name)\r\n            sessionStorage.setItem('logoSrc', result.logo_src)\r\n            document.location.href = '/'\r\n        }\r\n        else {\r\n            console.log(\"[LoginPresenter] login failed, error  : \", result);\r\n            // alert(result);\r\n            document.getElementById('fail-message').innerText = result;\r\n            return;\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div className=\"content\" id=\"login\">\r\n            <div id=\"top\">\r\n                <img className='login-logo-img' id=\"logo\" src={\"/assets/hprobot-logo/hprobot-logo-white-2line.png\"} alt=\"login-logo-img\" />\r\n                <div id=\"title-div\">\r\n                    <a id=\"title\">헬퍼로보틱스 관제시스템</a>\r\n                </div>\r\n            </div>\r\n            <div id=\"middle\">\r\n\r\n                <div id=\"login-icon-div\">\r\n                    <AiOutlineUser id=\"login-icon\" />\r\n                </div>\r\n                <div className=\"login-div\">\r\n                    <div id=\"size\">\r\n                        <a className=\"title\">Log in</a>\r\n\r\n                        <div id=\"id-input-div\" className=\"input-div\">\r\n                            <AiOutlineUser className=\"icon\" />\r\n                            <input id=\"id-input\" className=\"input\" type=\"text\" autocapitalize=\"off\" name=\"inputId\" placeholder=\"아이디\" value={inputId} onChange={handleInputId} />\r\n                        </div>\r\n                        {/* <div class=\"form_text_alert_padding\">\r\n                        <div id=\"alert_username\" class=\"form_text_alert\"></div>\r\n                    </div> */}\r\n                        <div id=\"password-input-div\" className=\"input-div\">\r\n                            <AiOutlineLock className=\"icon\" />\r\n                            <input id=\"password-input\" className=\"input\" name=\"inputPassword\" placeholder=\"패스워드\" autocapitalize=\"off\"\r\n                                type={showPassword ? 'text' : 'password'} value={inputPassword} onChange={handleInputPassword} />\r\n                            <div id=\"show-icon-div\" onClick={handleClickShowPassword} onMouseDown={handleMouseDownPassword}>\r\n                                {showPassword ? <IoIosEyeOff id=\"show-icon\" /> : <IoIosEye id=\"show-icon\" />} </div>\r\n                        </div>\r\n                        <div id=\"fail-message\"></div>\r\n                        <div id=\"remember\">\r\n                            <input id=\"checkbox\" type=\"checkbox\" onChange={handleRemember} checked={isRemember} />\r\n                            <label for=\"checkbox\"></label>\r\n                            <span id=\"text\">아이디 저장</span>\r\n                        </div>\r\n                        <button id=\"login-button\" onClick={onSubmit}>\r\n                            <p id=\"button-text\">로그인</p>\r\n                        </button>\r\n                        <div id=\"forgot\">Forgot Password ? </div>\r\n                        <img className='login-logo-img' id=\"logo\" src={\"/assets/hprobot-logo/hprobot-logo-1line.png\"} alt=\"login-logo-img\" />\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default LoginPresenter\r\n","import React, { Component } from 'react'\r\n\r\nexport class User extends Component {\r\n    onLogout = () => {\r\n        window.sessionStorage.removeItem('userId');\r\n        window.sessionStorage.removeItem('mapId');\r\n        window.sessionStorage.removeItem('userName');\r\n        window.sessionStorage.removeItem('logoSrc');\r\n\r\n        document.location.href = '/'\r\n\r\n    }\r\n    render() {\r\n        const userName = sessionStorage.getItem('userName')\r\n        const dbLogoSrc = sessionStorage.getItem('logoSrc');\r\n        const logo_src = '/assets/store_logo/' + dbLogoSrc + '.png';\r\n        // const logo_src = '../../assets/store_logo/the_people_burger/the_people_burger_logo.png'\r\n        return (\r\n            <div className=\"content\" id=\"user\">\r\n                <h1 > 내 정보</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item\" id=\"item-profile\">\r\n                        <h4>프로필</h4>\r\n                {/* userid로 user 정보와 img url 불러오기 */}\r\n                        <img src={logo_src} alt=\"user-logo\" />\r\n\r\n                        <div> 매장명 : {userName}</div>\r\n                        <button onClick={this.onLogout.bind(this)}>로그아웃</button>\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-2\">\r\n                        <h4>호출 통계</h4>\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-3\">\r\n                        <h4>최근 주문</h4>\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-4\">\r\n                        <h4>뭐할까</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default User\r\n","import React, { Component } from 'react'\r\n// icon\r\nimport {AiOutlineWarning} from 'react-icons/ai'\r\nimport {BiLogIn} from 'react-icons/bi'\r\n\r\nexport class Authorized extends Component {\r\n    goLogin = () => {\r\n        document.location.href = '/login'\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"content\" id=\"authorized\">\r\n                <div className=\"content-title text-color-1\"> <BiLogIn className=\"icon\" />로그인</div>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item center-align\" id=\"item-authorized\">\r\n                        <AiOutlineWarning className=\"icon\" id=\"warning-icon\" />\r\n                        <p className=\"text-color-2\" id=\"authorized-text\">로그인이 필요합니다</p>\r\n                        <button className=\"round-button text-color-w background-color-1\" onClick={this.goLogin.bind(this)}>로그인하러 가기</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Authorized\r\n","import React from 'react'\r\nimport {BiCheckSquare} from 'react-icons/bi'\r\nfunction RobotServing({robot, clickedRobotId, setClickedRobotId}) {\r\n    var stateString = \"이동중\" \r\n\r\n    if (robot.state == 2) return null;  // 물건 없음\r\n    else if(robot.current_node == robot.final_node) stateString=\"서빙완료\"; //물건 올린 상태에서 목적지 도착\r\n    const robotImgSrc = \"/assets/robot/octa_robot_white.png\";   //로봇 이미지\r\n    // serving정보칸 배경 색상 (강조 여부)\r\n    var statusColor = \"#ffffff00\";\r\n    if(robot.robot_id == clickedRobotId){\r\n        statusColor = \"#0000ff11\";\r\n    }\r\n    // 테이블 이름에 따른 목적지 문자열 구분(숫자 / 배달)\r\n    var destination = \"\";\r\n        var tableName = robot.table_name;\r\n        if(tableName == null){\r\n            destination = \"현재 위치\";\r\n        }\r\n        else if (isNaN(tableName)){  // table name 이 숫자가 아닐 때 (ex. 배달)\r\n            //console.log(\"not number!\");\r\n            destination = tableName+\"구역\";\r\n        }\r\n        else{\r\n            destination = \"테이블 \"+tableName+\"번\";\r\n        }\r\n    /*upgradable 함수의 위치? 함수형 컴포넌트에서... */\r\n    function handelRobotClick(){\r\n        // console.log(\"robot click!\");\r\n        setClickedRobotId(robot.robot_id);\r\n    }\r\n\r\n    return (\r\n        <li id=\"robot-serving-item\" onClick={handelRobotClick} style={{ backgroundColor:statusColor}}>\r\n            <img src={robotImgSrc} alt=\"robot-icon-img\" className='robot-icon-img float' />\r\n                <div id = \"serving-info\" className=\"float\">\r\n\r\n                    <span id=\"arrive-robot-string\" className=\"text-color-1\">로봇</span>\r\n                    <span id=\"arrive-robot\" className=\"text-color-1\" >{robot.robot_id}</span>\r\n\r\n                </div>\r\n                <div id = \"serving-info\" className=\"float\">\r\n                <span id=\"arrive-node\" className=\"text-color-2\">{destination}</span>\r\n                <span id=\"arrive-robot-string\" className=\"text-color-1\"> {stateString}</span>\r\n                {stateString == \"이동중\" ?\r\n                    <div id=\"arrow-div\">\r\n                        <div id=\"arrow-right-div\">\r\n                        <p id=\"arrow-right\"></p>\r\n                        <p id=\"arrow-right\"></p>\r\n                        </div>\r\n                    </div>\r\n                    : <BiCheckSquare className=\"icon icon-2\"/>\r\n                }\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default RobotServing\r\n","\r\nimport React, {useState, useEffect} from 'react'\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.10\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'\r\n\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';     //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\n\r\nfunction RobotItem(props) {\r\n    var robotImgSrc = \"/assets/robot/octa_robot_white.png\"; // 로봇 이미지 (색상과 번짐이 다름)\r\n    if(props.robotId == props.clickedRobotId){\r\n        robotImgSrc = \"/assets/robot/octa_robot_yellow.png\";       // 클릭된 로봇이라면 노랑\r\n    }\r\n    else if(props.pageType == \"monitoring\" && props.state == \"1\"){  // 모니터링 페이지에서 이동중이라면 초록\r\n        robotImgSrc = \"/assets/robot/octa_robot_green.png\";\r\n    }\r\n    const posX = (props.posX) * 0.01-0.5; //-0.5    // db에 저장된 xy위치는 1rem의 100배의 수치이다.\r\n    const posY = (props.posY) * 0.01-0.5;   //중앙에 위치하기 위해 0.5전부터 그림. 이건 상수가 아닌 변수로 /*upgradeable*/\r\n    \r\n\r\n    function handelRobotClick(){\r\n        // console.log(\"robot click!\");\r\n        props.setClickedRobotId(props.robotId);\r\n    }\r\n    return (\r\n        <div className=\"robot\"  onClick={handelRobotClick} style={{ left: posX+\"rem\", top: posY+\"rem\"}}>\r\n            <img src={robotImgSrc} alt=\"robot-icon-img\" className='robot-icon-img'/>\r\n        </div>\r\n    )\r\n\r\n}\r\nfunction calcAngleDegrees(x, y) {   // 하나의 좌표와 원점사이의 arctan(degree각도) 계산\r\n    return Math.atan2(y, x) * 180 / Math.PI;\r\n}\r\n\r\nfunction TargetItem(props){\r\n\r\n    const ax = (props.currX-(-0.5)) * 0.01;\r\n    const ay = (props.currY-(-0.5)) * 0.01;\r\n    const bx = (props.finalX-(-0.5)) * 0.01;\r\n    const by = (props.finalY-(-0.5)) * 0.01;\r\n    // 선분의 중심은 두 점사이의 중심\r\n    const centerX = (ax+bx)/2;\r\n    const centerY = (ay+by)/2;\r\n\r\n    // 선분의 길이는 두 점 사이의 길이 (width)\r\n    const size = Math.sqrt(Math.pow(ax-bx, 2) + Math.pow(ay-by,2));\r\n\r\n    // target -형태의 div 시작위치는 중점에서 길이의 반절만큼 왼쪽으로 가야함\r\n    const top = centerY;\r\n    const left = centerX - (size)/2;\r\n\r\n    // 수평선으로부터 회전된 각도는 한 점이 원점이라고 할 때 arctan 값\r\n    const degree = calcAngleDegrees(ax-bx, ay-by);\r\n    const transformString = \"rotate(\"+degree.toString() + \"deg)\"\r\n    return (\r\n        <div className=\"target\" style={{ left: left+\"rem\", top: top+\"rem\", width: size+\"rem\", transform:transformString}}>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction RobotPosition({ clickedRobotId, robotData, setClickedRobotId, pageType }) {\r\n    function test() {\r\n        console.log(\"test\");\r\n        return;\r\n    }\r\n    if (robotData.length > 0 || pageType==\"serving\") {\r\n        return (\r\n            <div>\r\n                {robotData.map(robot => (\r\n\r\n                    <RobotItem\r\n                        key={robot.robot_id} clickedRobotId={clickedRobotId} setClickedRobotId={setClickedRobotId} pageType={pageType}\r\n                        robotId={robot.robot_id} state={robot.state} posX={robot.curr_x} posY={robot.curr_y} />\r\n                ))}\r\n                {robotData.filter(robot => robot.state == 1).map(frobot => (\r\n                    <TargetItem\r\n                        currX={frobot.curr_x} currY={frobot.curr_y} finalX={frobot.final_x} finalY={frobot.final_y}\r\n                        key={frobot.robot_id} />\r\n                ))}\r\n\r\n            </div>\r\n        )\r\n    } else {  // 조회 데이터 존재하지 않을 경우\r\n        console.log(\" robot data를 불러오는데 실패했습니다.\");\r\n        return (\r\n            <div>\r\n                <button className=\"data-reload\" onClick={test}>데이터 불러오기</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default RobotPosition\r\n","import React from 'react';\r\nimport {createPortal} from 'react-dom';\r\n// icon\r\nimport { AiOutlineInfoCircle } from 'react-icons/ai';\r\n\r\n\r\nfunction Modal({ title,highlight, content, open, onPermit, onCancel }) {\r\n  if (!open) return null;\r\n  return createPortal(\r\n    <div id=\"modal\">\r\n      <div id=\"overlay\" />\r\n      <div id=\"modal-box\" className=\"background-color-w text-color-1\">\r\n        <h3 id=\"modal-title\" className=\"text-color-1\"><AiOutlineInfoCircle className=\"icon icon-2\"/>{title}</h3>\r\n        <div id=\"modal-content\" className=\"text-color-1\"><span className=\"text-color-2\">{highlight}</span>{content}</div>\r\n          <button id=\"cancle-button\" className=\"text-color-1 background-color-w\" onClick={onCancel}>아니오</button>\r\n          <button id=\"ok-button\" className=\"text-color-w background-color-2\" onClick={onPermit}>예</button>\r\n      </div>\r\n    </div>,\r\n    document.getElementById('modal')\r\n\r\n  )\r\n}\r\n\r\nexport default Modal\r\n","import axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\nexport async function getMapView() {    // map화면에서 목적지 node를 눌렀을 때, 픽업대의(1번) 로봇을 보내는 함수\r\n    \r\n    const mapId = sessionStorage.getItem('mapId');\r\n    try {\r\n        const response = await axios.get('/map-views/'+mapId);  // 해당 map id의 map view얻기\r\n        \r\n        if (response.status == 200) { \r\n            return [false, response.data]\r\n        }\r\n        else {\r\n        // console.log(\"[MapController] getMapView server error.\\n\");\r\n        return [response.data.error, response.data.message];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[MapController] getMapView error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\n\r\nexport async function getMapTable() {    // map화면에서 목적지 table을 보여주는\r\n    \r\n    const mapId = sessionStorage.getItem('mapId');\r\n    try {\r\n        const response = await axios.get('/map-tables/table/'+mapId);  // 해당 map id의 map table\r\n        \r\n        if (response.status == 200) { \r\n            return [false, response.data]\r\n        }\r\n        else {\r\n        // console.log(\"[MapController] getMapTable server error.\\n\");\r\n        return [response.data.error, response.data.message];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[MapController] getMapTable error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\nexport async function getInitRobot(userId) {    // 해당 map에 있는 모든 로봇을 초기화하는 함수 /robot/initialize/{userId}\r\n\r\n    try {\r\n        const response = await axios.get('/controller/robot/initialize/' + userId );  // button mqtt post를 위한 정보 얻기 : map name\r\n        // let error = response.data.error;\r\n        console.log(\"[MapController] getInitRobot 결과 ->\");\r\n        console.log(response);\r\n        return [response.data.error, response.data.message]\r\n\r\n    } catch (e) {\r\n        console.log(\"[MapController] getInitRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\n\r\nexport async function getInitOneRobot(userId, robotId) {    // 특정 map, robot을 초기화 하는 함수 /robot/initialize/{userId}\r\n\r\n    try {\r\n        const response = await axios.get('/controller/robot/initialize/' + userId +\"/\"+robotId);  // button mqtt post를 위한 정보 얻기 : map name\r\n        console.log(\"[MapController] getInitOneRobot 결과 ->\");\r\n        console.log(response);\r\n        return [response.data.error, response.data.message]\r\n\r\n    } catch (e) {\r\n        console.log(\"[MapController] getInitOneRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\n\r\nexport async function getDestinationRobot(userId, destinationTable) {    // map화면에서 목적지 node를 눌렀을 때, 픽업대의(1번) 로봇을 보내는 함수\r\n\r\n    try {\r\n        const response = await axios.get('/controller/button/to-destination/' + userId);  // button mqtt post를 위한 정보 얻기 : robot id, map name, (final node =destinationNode)\r\n        let error = response.data.error; \r\n        console.log(\"[MapController] getDestinationRobot to-destination 결과 ->\");\r\n        console.log(response);\r\n\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            // alert(response.data.message);\r\n            console.log(response.data.message)\r\n            console.log(response.data.where)\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            let robotId = response.data.robot_id;\r\n            let mapName = response.data.map_name;\r\n            let postError = postButton([destinationTable, mapName, robotId]);\r\n            return [postError, robotId];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[MapController] getDestinationRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\nexport async function getHomeRobot(userId, robotId) {    // map화면에서 로봇버튼을 눌렀을 때, 해당 번호의 로봇을 픽업대의(1번)로 보내는 함수\r\n\r\n    try {\r\n        const response = await axios.get('/controller/button/to-home/' + userId + \"/\" + robotId);  // button mqtt post를 위한 정보 얻기 : map name\r\n        let error = response.data.error;\r\n        console.log(\"[MapController] getHomeRobot to-home 결과 ->\");\r\n        console.log(response);\r\n\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            // alert(response.data.message);\r\n            console.log(response.data.message)\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            let mapName = response.data.map_name;\r\n            let postError = postButton([0, mapName, robotId]);\r\n            return [postError, response.status];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[MapController] getHomeRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\n\r\nexport async function getAllHomeRobot(userId) {    // map화면에서 로봇버튼을 눌렀을 때, 해당 번호의 로봇을 픽업대의(1번)로 보내는 함수\r\n\r\n    try {\r\n        const response = await axios.get('/controller/button/to-home-all/' + userId );  // button mqtt post를 위한 정보 얻기 : map name\r\n        let error = response.data.error;\r\n        console.log(\"[MapController] getAllHomeRobot to-home-all 결과 ->\");\r\n        console.log(response);\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            // alert(response.data.message);\r\n            console.log(response.data.message)\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            const robotList=response.data.robot_list;    // 해당 map의 robot list를 알아야함\r\n            console.log(\"robotId lsit -> \",robotList);\r\n            \r\n            let mapName = response.data.map_name;\r\n            var postError = false;\r\n            robotList.forEach(robotId => {\r\n                postError = postButton([0, mapName, robotId]);  // 1은 목적지. store에선 항상 복귀집이 1번이다.\r\n                if(postError){\r\n                    console.log(\"[MapController] getAllHomeRobot postError error.\");\r\n                    return [true, robotList];\r\n                }\r\n            });\r\n            return [false, robotList];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[MapController] getAllHomeRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\nfunction postButton(params) {\r\n    console.log(\"[MapController] postButton param \", params);\r\n    try {\r\n        const response = axios({\r\n            method: 'post',\r\n            url: '/mqtt/button',\r\n            data: {\r\n                table_id: params[0],\r\n                map_name: params[1],\r\n                robot_id: params[2]\r\n            }\r\n        });\r\n        console.log(\"[MapController] postButton   결과 ->\");\r\n        console.log(response);\r\n        return false;\r\n\r\n    } catch (e) {\r\n        console.log(\"[MapController] postButton button 정보를 로봇으로 보내는데 실패했습니다.\\n\" + e.message);\r\n        // return [true, e.message]\r\n        return true;\r\n    }\r\n\r\n}","import React, {useState} from 'react'\r\nimport Modal from './../Modal/Modal';\r\nimport {getDestinationRobot} from './MapController';\r\n\r\nfunction TableItem(props) {\r\n    const tableName = props.data['table_name'];\r\n    const posX = (props.data['x']) * 0.01 - 2.4;\r\n    const posY = (props.data['y']) * 0.01 - 1.6;\r\n\r\n    return (\r\n        <div className=\"table-button background-color-3 \" onClick={props.onClick} style={{left:posX+\"rem\", top:posY+\"rem\"}}>\r\n            <div className=\"table-button-name text-color-w\">{tableName}</div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction TablePosition({tableData}) {\r\n    const modalTitle = \"서빙 시작 안내\";\r\n    const modalContent = \"으로 서빙을 시작할까요?\";\r\n    \r\n    // const [modalContent, setModalContent] = useState(\"테이블을 클릭하지 않았습니다.\");\r\n    const [modalHighlight, setModalHighlight] = useState(\"\");\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [clickedTableId, setClickedTableId] = useState(0);\r\n\r\n    function handleTableClick(tableInfo) {   // 테이블 버튼을 눌렀을 때 모달을 띄우는 함수\r\n        const  tableId = tableInfo[0];\r\n        const  tableName = tableInfo[1];\r\n        var highlightString = \"\";\r\n        if (isNaN(tableName)){  // table name 이 숫자가 아닐 때 (ex. 배달)\r\n            //console.log(\"not number!\");\r\n            highlightString = tableName+\"구역\";\r\n        }\r\n        else{\r\n            highlightString = \"테이블\"+tableName+\"번\";\r\n        }\r\n        // 선택된 로봇이 존재 할 때\r\n        setIsModalOpen(true);\r\n        setModalHighlight(highlightString);\r\n        setClickedTableId(tableId);\r\n        // nothing do\r\n        console.log(\"table modal click!\");\r\n    }\r\n    \r\n    async function clickTableModalPermit(){    //모달에서 확인을 눌렀을 때 동작\r\n        const userId = sessionStorage.getItem('userId');\r\n\r\n        let [error, message] = await getDestinationRobot(userId, clickedTableId);\r\n        if (!error) {\r\n            console.log(\"[TablePosition] getDestinationRobot success : \", message);\r\n        }\r\n        else {\r\n            console.log(\"[TablePosition] getDestinationRobot fail  : \", message);\r\n        }\r\n        //모달 데이터 초기화\r\n        setIsModalOpen(false);\r\n        setModalHighlight(\"\");\r\n        setClickedTableId(0);\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {tableData.map(tableItem => (\r\n                <TableItem data={tableItem} key={tableItem['table_id']} onClick={() => handleTableClick([tableItem['table_id'], tableItem['table_name']])}/>\r\n            ))}\r\n            <Modal title={modalTitle} highlight={modalHighlight}  content={modalContent} open={isModalOpen} onCancel={()=>setIsModalOpen(false)}\r\n                    onPermit={clickTableModalPermit}>\r\n                </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TablePosition\r\n","import React, { Component } from 'react'\r\nimport RobotServing from './RobotServing';\r\nimport RobotPosition from './RobotPosition';\r\nimport TablePosition from './TablePosition';\r\nimport Modal from './../Modal/Modal';\r\n// import {getDestinationRobot, getHomeRobot, getAllHomeRobot} from '../Call/CallController';\r\nimport {getMapTable, getInitOneRobot, getDestinationRobot, getHomeRobot} from './MapController';\r\n// 아이콘   AiOutlineLock\r\nimport {GrMap} from 'react-icons/gr'\r\nimport {MdErrorOutline} from 'react-icons/md'\r\n\r\nexport class MapPresenter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        // this.mapContainer = React.createRef()\r\n        this.state = {\r\n            mapTable:[], // componenteDidMount에서 저장\r\n            robotStatus:[], //RobotPosition에서 1초마다 저장\r\n            clickedTableId:0,   //table 클릭 시 저장\r\n            clickedRobotId:0,   //로봇 클릭시 저장\r\n            isModalOpen:false,  // 모달 열림 여부 저장\r\n            modalTitle:\"제목\",  // 모달에 들어갈 정보 \r\n            modalContent: \"내용\",   //          저장\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n\r\n        let [error, result] = await getMapTable();  //table 위치 불러오기. 한번만 불러옴\r\n        if (error) {\r\n            alert(\"[MapPresenter] getMapTable 불러오기 실패 : \", error);\r\n            return;\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            mapTable: result\r\n        }))\r\n    }\r\n\r\n    setRobotStatus(props){\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            robotStatus: props\r\n        }))\r\n    }\r\n    \r\n\r\n    handelTableClick(tableInfo){\r\n        const  tableId = tableInfo[0];\r\n        const  tableName = tableInfo[1];\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isModalOpen: \"table\",\r\n            clickedTableId: tableId,\r\n            modalTitle: \"로봇 보내기\",\r\n            modalContent: tableName+\"번 테이블로 로봇을 보내겠습니까?\",\r\n            clickedRobotId: 0\r\n        }))\r\n        // nothing do\r\n        console.log(\"table modal click! \"+tableId);\r\n    }\r\n    \r\n    handelRobotClick(i){\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            clickedRobotId: i,\r\n        }))\r\n        // nothing do\r\n        console.log(\"robot click! \"+i);\r\n    }\r\n    handelNotRobotClick=()=>{\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            clickedRobotId: 0,\r\n        }))\r\n    }\r\n    handleInitClick = () => {   // 로봇 초기화 버튼\r\n        const clickedRobotId = this.state.clickedRobotId;\r\n        if (clickedRobotId == 0){   // 로봇이 선택되지 않았을 때\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: \"message\",\r\n                modalTitle: \"로봇 초기화\",\r\n                modalContent: \"선택된 로봇이 존재하지 않습니다.\"\r\n            }))\r\n            return;\r\n        }\r\n        // 선택된 로봇이 존재 할 때\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isModalOpen: \"init\",\r\n            modalTitle: \"로봇 초기화\",\r\n            modalContent: clickedRobotId+\"번 로봇을 초기화하시겠습니까?\"\r\n        }))\r\n        // nothing do\r\n        // console.log(\"init one modal click!\");\r\n    }\r\n    handleReturnClick = () => {   // 로봇 복귀 버튼\r\n        const clickedRobotId = this.state.clickedRobotId;\r\n        if (clickedRobotId == 0){   // 로봇이 선택되지 않았을 때\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: \"message\",\r\n                modalTitle: \"로봇 복귀\",\r\n                modalContent: \"선택된 로봇이 존재하지 않습니다.\"\r\n            }))\r\n            return;\r\n        }\r\n        // 선택된 로봇이 존재 할 때\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isModalOpen: \"return\",\r\n            modalTitle: \"로봇 복귀\",\r\n            modalContent: clickedRobotId+\"번 로봇을 복귀시키겠습니까?\"\r\n        }))\r\n        // nothing do\r\n        // console.log(\"init one modal click!\");\r\n    }\r\n    async clickTableModalPermit(userId){\r\n        const destinationTable = this.state.clickedTableId;\r\n\r\n        let [error, message] = await getDestinationRobot(userId, destinationTable);\r\n        if (!error) {\r\n            console.log(\"[MapPresenter] getDestinationRobot success : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false,\r\n                clickedTableId: 0\r\n            }))\r\n        }\r\n        else {\r\n            console.log(\"[MapPresenter] getDestinationRobot fail  : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false\r\n            }))\r\n        }\r\n    }\r\n    \r\n    async clickInitModalPermit(userId){\r\n        const clickedRobotId = this.state.clickedRobotId;\r\n\r\n        let [error, message] = await getInitOneRobot(userId, clickedRobotId);\r\n        if (!error) {\r\n            console.log(\"[MapPresenter] getInitOneRobot success : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false,\r\n                clickedRobotId: 0\r\n            }))\r\n        }\r\n        else {\r\n            console.log(\"[MapPresenter] getInitOneRobot fail  : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false,\r\n                clickedRobotId: 0\r\n            }))\r\n        }\r\n    }\r\n    async clickReturnModalPermit(userId){\r\n        const clickedRobotId = this.state.clickedRobotId;\r\n        let [error, message] = await getHomeRobot(userId, clickedRobotId);\r\n        if (!error) {\r\n            console.log(\"[MapPresenter] getHomeRobot success : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false,\r\n                clickedRobotId: 0\r\n            }))\r\n        }\r\n        else {\r\n            console.log(\"[MapPresenter] getHomeRobot fail  : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false\r\n            }))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        \r\n        \r\n        const userId = sessionStorage.getItem('userId');\r\n    const mapId = sessionStorage.getItem('mapId');\r\n\r\n        const isModalOpen = this.state.isModalOpen;\r\n        const robotStatus = this.state.robotStatus;\r\n        const mapBackgroundSrc = \"assets/map-background/map-background-\"+mapId+\".png\";\r\n\r\n        return (\r\n            <div className=\"content\" id=\"map\">\r\n                <div className=\"content-title text-color-1\"> <GrMap className=\"icon\" />서빙 모드</div>\r\n\r\n                <div className=\"grid-container\">\r\n\r\n                    <div className=\"grid-item item-scroll\" id=\"item-map\">\r\n                        <div id=\"map-top\">\r\n                            <div id=\"discription\">\r\n                                <MdErrorOutline className=\"icon icon-w\" />\r\n                                <p>음식을 보낼 <span className=\"text-color-3\">테이블을 선택</span>하거나 정보를 볼 <span className=\"text-color-3\">로봇을 선택</span>하세요</p>\r\n                            </div>\r\n\r\n                        </div>\r\n                        {/* ref={this.mapContainer}  */}\r\n                        <div id=\"map-container\">\r\n                            <RobotPosition clickedRobotId={this.state.clickedRobotId} setRobotStatus={p => this.setRobotStatus(p)} onClick={i=>this.handelRobotClick(i)}/>\r\n                            <TablePosition xytypeList={this.state.mapTable} onClick={i=>this.handelTableClick(i)}/>\r\n                            <img src={mapBackgroundSrc} alt=\"map-background-img\" className=\"map-background-img\"  onClick={()=>this.handelNotRobotClick()}/>\r\n                        </div>\r\n\r\n                    </div>\r\n                    \r\n                    <div className=\"grid-item\" id=\"item-serving\">\r\n                        <div className=\"grid-title text-color-1\">로봇 서빙 현황</div>\r\n                            <ul>\r\n                                {robotStatus.map(robot => (\r\n                                    <RobotServing robot={robot} key={robot.robot_id}  onClick={()=>this.handelRobotClick(robot.robot_id)} clickedRobotId={this.state.clickedRobotId} />\r\n                                ))}\r\n                            </ul>\r\n                            <div id=\"error-control\">\r\n                                <button id=\"return\" className=\"text-color-2 background-color-w\" onClick={this.handleReturnClick}>복귀</button>\r\n                                <button id=\"init\" className=\"text-color-w background-color-1\" onClick={this.handleInitClick}>초기화</button>\r\n                            </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <Modal title={this.state.modalTitle} content={this.state.modalContent} open={isModalOpen} onCancel={() => this.setState(prevState => ({ isModalOpen: false }))}\r\n                    onPermit={isModalOpen == \"table\" ? () => this.clickTableModalPermit(userId)\r\n                            : isModalOpen == \"return\" ? () => this.clickReturnModalPermit(userId)\r\n                            : isModalOpen == \"init\" ? () => this.clickInitModalPermit(userId)\r\n                                : () => this.setState(prevState => ({ isModalOpen: false }))}>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MapPresenter\r\n","\r\n\r\nimport React, {useState} from 'react'\r\nimport Modal from './../Modal/Modal';\r\nimport {getMapTable, getInitOneRobot, getDestinationRobot, getHomeRobot} from './MapController';\r\n\r\n// , setModal, setTitle, setContent\r\nfunction ErrorControlButton({clickedRobotId,setClickedRobotId}) {\r\n    \r\n    const [modalTitle, setModalTitle] = useState(\"제목\");\r\n    const [modalContent, setModalContent] = useState(\"내용\");\r\n    const [modalHighlight, setModalHighlight] = useState(\"강조\");\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    \r\n    function handleInitClick() {   // 로봇 초기화 버튼\r\n        console.log(\"init one modal click!\");\r\n\r\n        if (clickedRobotId == 0){   // 로봇이 선택되지 않았을 때\r\n            setIsModalOpen(\"message\");\r\n            setModalTitle(\"로봇 초기화\");\r\n            setModalHighlight(\"선택된 로봇\");\r\n            setModalContent(\"이 존재하지 않습니다.\");\r\n            return;\r\n        }\r\n        // 선택된 로봇이 존재 할 때\r\n        setIsModalOpen(\"init\");\r\n        setModalTitle(\"로봇 초기화\");\r\n        setModalHighlight(clickedRobotId+\"번 로봇\");\r\n        setModalContent(\"을 초기화하시겠습니까?\");\r\n        // nothing do\r\n    }\r\n    function handleReturnClick() {   // 로봇 복귀 버튼\r\n        console.log(\"return one modal click!\");\r\n\r\n        if (clickedRobotId == 0){   // 로봇이 선택되지 않았을 때\r\n            setIsModalOpen(\"message\");\r\n            setModalTitle(\"로봇 초기화\");\r\n            setModalHighlight(\"선택된 로봇\");\r\n            setModalContent(\"이 존재하지 않습니다.\");\r\n                        return;\r\n        }\r\n        // 선택된 로봇이 존재 할 때\r\n        setIsModalOpen(\"return\");\r\n        setModalTitle(\"로봇 초기화\");\r\n        setModalHighlight(clickedRobotId+\"번 로봇\");\r\n        setModalContent(\"을 복귀시키겠습니까?\");\r\n\r\n        // nothing do\r\n    }\r\n    async function clickInitModalPermit(){\r\n        const userId = sessionStorage.getItem('userId');\r\n        let [error, message] = await getInitOneRobot(userId, clickedRobotId);\r\n        if (!error) {\r\n            console.log(\"[MapPresenter] getInitOneRobot success : \", message);\r\n        }\r\n        else {\r\n            alert(\"[MapPresenter] getInitOneRobot fail  : \", message);\r\n        }\r\n            setIsModalOpen(false);\r\n            setClickedRobotId(0);\r\n\r\n    }\r\n    async function clickReturnModalPermit(){\r\n        const userId = sessionStorage.getItem('userId');\r\n        let [error, message] = await getHomeRobot(userId, clickedRobotId);\r\n        if (!error) {\r\n            console.log(\"[MapPresenter] getHomeRobot success : \", message);\r\n        }\r\n        else {\r\n            alert(\"[MapPresenter] getHomeRobot fail  : \", message);\r\n        }\r\n        setIsModalOpen(false);\r\n        setClickedRobotId(0);\r\n    }\r\n\r\n    return (\r\n        <div id=\"error-control\">\r\n            <button id=\"return\" className=\"text-color-3 background-color-w\" onClick={handleReturnClick}>복귀</button>\r\n            <button id=\"init\" className=\"text-color-w background-color-3\" onClick={handleInitClick}>초기화</button>\r\n            <Modal title={modalTitle} highlight={modalHighlight} content={modalContent} open={isModalOpen} onCancel={()=>setIsModalOpen(false)}\r\n                    onPermit={isModalOpen == \"return\" ? clickReturnModalPermit\r\n                    : isModalOpen == \"init\" ? clickInitModalPermit\r\n                        : ()=>setIsModalOpen(false)}>\r\n                </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorControlButton\r\n","import React, { useState, useEffect } from 'react'\r\n\r\n// component\r\nimport ErrorControlButton from './ErrorControlButton';\r\nimport RobotPosition from './RobotPosition';\r\nimport TablePosition from './TablePosition';\r\nimport RobotServing from './RobotServing';\r\n// function\r\nimport { getMapTable } from './MapController';\r\n// icon\r\nimport { FaHandPointer, FaMapMarkerAlt } from 'react-icons/fa';\r\nimport {HiClipboardList} from 'react-icons/hi';\r\n// http\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.10\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\n\r\nfunction ServingPresenter() {\r\n\r\n    const [clickedRobotId, setClickedRobotId] = useState(1);    //클릭된 로봇\r\n    const [robotData, setRobotData] = useState([]); //불러온 로봇 데이터\r\n    const [tableData, setTableData] = useState([]); //불러온 테이블 데이터\r\n\r\n    const mapId = sessionStorage.getItem('mapId');\r\n    const mapBackgroundSrc = \"assets/map-background/map-background-\" + mapId + \".png\";  //배경 이미지\r\n\r\n    function getRobotData() {   // 로봇 데이터 불러오기\r\n        const userId = sessionStorage.getItem('userId');\r\n\r\n        var interval = setInterval(() => {\r\n            console.log(\"[RobotPosition] get robot position\")\r\n            axios.get('/controller/robot/position/' + mapId)    /*api이름 data로 변경해야함 upgradable*/\r\n                .then((response) => {\r\n                    setRobotData(response.data.robot_position.filter(robot => robot.used == userId)); // 불러온 데이터중에서 user의 음식이 올려진 로봇만 필터링\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"call robot positions item fail.\");\r\n                    return interval;\r\n                })\r\n        }, 1000);   //1초마다 반복\r\n        return interval\r\n    }\r\n    async function getTableData() {  //table 위치 불러오기\r\n        let [error, result] = await getMapTable();\r\n        if (error) {\r\n            alert(\"[MapPresenter] getMapTable 불러오기 실패 : \", error);\r\n            return;\r\n        }\r\n        setTableData(result);\r\n        // console.log(result);\r\n    }\r\n\r\n\r\n    useEffect(() => {   // 로봇 데이터 불러오기 반복\r\n        const interval = getRobotData();\r\n        return () => clearInterval(interval);   // 다른 창으로 넘어갈때 로봇 불러오기 멈춤\r\n    }, [])\r\n    /* [robotPositionList] 쓰는 이유. (근데 쓰면 계속 불러오드람. 더 찾아보기.)\r\n    근데 여기서 새로고침을 하지 않으면 등록된 모습을 확인할 수 없다. 그 이유는 useEffect 함수의 두번째 인자로 빈 배열을 주면 처음 사이트에 들어갔을 1회만 렌더링이 되기 때문에 다시 값을 불러오지 않는다.\r\n    그래서 다음과 같이 수정해 주면 등록이 완료될 때 게시판이 업데이트 되는 모습을 확인할 수 있다.*/\r\n    useEffect(() => {   // 테이블 데이터 불러오기 \r\n        console.log(\"rendering~\");\r\n        getTableData();\r\n    }, []);    //처음 랜더링에서만\r\n\r\n    function handelNotRobotClick() {     // 배경 이미지를 클릭할때 클릭된 로봇값 초기화\r\n        setClickedRobotId(0);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"content\" id=\"map\">\r\n\r\n\r\n                <div className=\"content-title\"> <FaMapMarkerAlt className=\"icon\" />서빙 모드</div>\r\n\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item item-scroll\" id=\"item-map\">\r\n                        <div id=\"map-top\">\r\n                            <div id=\"discription\" >\r\n\r\n                                <p className=\"text-color-1\">\r\n                                    <span className=\"icon-div background-color-2\"><FaHandPointer className=\"icon-w\" /></span>\r\n                                    음식을 보낼 <span className=\"text-color-2\">테이블을 선택</span>하거나 정보를 볼 <span className=\"text-color-2\">로봇을 선택</span>하세요</p>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div id=\"map-container\">\r\n                            <RobotPosition clickedRobotId={clickedRobotId} robotData={robotData} setClickedRobotId={setClickedRobotId} pageType={\"serving\"}/>\r\n                            <TablePosition tableData={tableData} />\r\n                            <img src={mapBackgroundSrc} alt=\"map-background-img\" className=\"map-background-img\" onClick={handelNotRobotClick} />\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-serving\">\r\n                        <div className=\"grid-title text-color-1\"><HiClipboardList className=\"icon icon-2\"/>로봇 서빙 현황</div>\r\n                        <ul>\r\n                            {robotData.map(robot => (   /*upgradable 하나의 robotData의 의미로 robot말고 다른 변수명 찾기 */\r\n                                <RobotServing robot={robot} key={robot.robot_id} clickedRobotId={clickedRobotId} setClickedRobotId={setClickedRobotId} />\r\n                            ))}\r\n                        </ul>\r\n                        <ErrorControlButton clickedRobotId={clickedRobotId} setClickedRobotId={setClickedRobotId} />\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ServingPresenter\r\n","import React from 'react'\r\n\r\nfunction RobotInfo({robot, clickedRobotId}) {\r\n    if(robot == null) return null;\r\n    else if (robot.robot_id != clickedRobotId) return null;\r\n    else {\r\n        const robotImgSrc = \"/assets/robot/basic_robot.png\";  //로봇 이미지    \r\n        var destination = \"\";\r\n        var tableName = robot.table_name;\r\n        if(tableName == null){\r\n            destination = \"현재 위치\";\r\n        }\r\n        else if (isNaN(tableName)){  // table name 이 숫자가 아닐 때 (ex. 배달)\r\n            //console.log(\"not number!\");\r\n            destination = tableName+\"구역\";\r\n        }\r\n        else{\r\n            destination = \"테이블 \"+tableName+\"번\";\r\n        }\r\n\r\n        return (\r\n\r\n            <div id=\"robot-info\">\r\n                <div id=\"robot-basic-img-div\">\r\n                <img src={robotImgSrc} alt=\"robot-basic-img\" className=\"robot-basic-img\" />\r\n                </div>\r\n                <div id=\"info-text\">\r\n                    <div className=\"text-color-1\">로봇 ID : <span className=\"text-color-3\">{robot.robot_id}</span></div>\r\n                    <div className=\"text-color-1\">목적지 : <span className=\"text-color-3\">{destination}</span></div>\r\n                    <div className=\"text-color-1\">베터리 : {robot.battery}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n}\r\n\r\n}\r\n\r\nexport default RobotInfo\r\n","import React, {useState, useEffect} from 'react'\r\n// component\r\nimport ErrorControlButton from './ErrorControlButton';\r\nimport RobotPosition from './RobotPosition';\r\nimport RobotInfo from './RobotInfo';\r\n// icon\r\nimport {RiWindow2Fill} from 'react-icons/ri';\r\nimport { FaHandPointer } from 'react-icons/fa';\r\nimport { ImInfo } from 'react-icons/im';\r\n\r\n// http\r\n\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.10\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'\r\n\r\nfunction MonitoringPresenter() {\r\n\r\n    const [clickedRobotId, setClickedRobotId] = useState(1);    //클릭된 로봇\r\n    const [clickedRobotData, setClickedRobotData] = useState();    //클릭된 로봇\r\n    const [robotData, setRobotData] = useState([]); //불러온 로봇 데이터\r\n\r\n    const mapId = sessionStorage.getItem('mapId');\r\n    const mapBackgroundSrc = \"assets/map-background/map-background-\" + mapId + \"-monitoring.png\";  //배경 이미지\r\n\r\n    function getRobotData() {   // 로봇 데이터 불러오기\r\n        const userId = sessionStorage.getItem('userId');\r\n\r\n        var interval = setInterval(() => {\r\n            console.log(\"[RobotPosition] get robot position\")\r\n            axios.get('/controller/robot/position/' + mapId)    /*api이름 data로 변경해야함 upgradable*/\r\n                .then((response) => {\r\n                    setRobotData(response.data.robot_position);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"call robot positions item fail.\");\r\n                    return interval;\r\n                })\r\n        }, 1000);\r\n        return interval\r\n    }\r\n\r\n\r\n    useEffect(() => {   // 로봇 데이터 불러오기 반복\r\n        const interval = getRobotData();\r\n        return () => clearInterval(interval);   // 다른 창으로 넘어갈때 로봇 불러오기 멈춤\r\n    }, [])\r\n    /* [robotPositionList] 쓰는 이유. (근데 쓰면 계속 불러오드람. 더 찾아보기.)\r\n    근데 여기서 새로고침을 하지 않으면 등록된 모습을 확인할 수 없다. 그 이유는 useEffect 함수의 두번째 인자로 빈 배열을 주면 처음 사이트에 들어갔을 1회만 렌더링이 되기 때문에 다시 값을 불러오지 않는다.\r\n    그래서 다음과 같이 수정해 주면 등록이 완료될 때 게시판이 업데이트 되는 모습을 확인할 수 있다.*/\r\n\r\n    function handelNotRobotClick() {     // 배경 이미지를 클릭할때 클릭된 로봇값 초기화\r\n        setClickedRobotId(0);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"content\" id=\"map\">\r\n                <div className=\"content-title text-color-1\"><RiWindow2Fill className=\"icon\" />모니터링</div>\r\n\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item item-scroll\" id=\"item-map\">\r\n                        <div id=\"map-top\">\r\n                            <div id=\"discription\">\r\n                            <p className=\"text-color-1\">\r\n                                    <span className=\"icon-div background-color-2\"><FaHandPointer className=\"icon-w\" /></span>\r\n                                    <span className=\"text-color-3\">상태를 확인할 로봇을</span> 선택하세요</p>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div id=\"map-container\">\r\n                            <RobotPosition clickedRobotId={clickedRobotId} robotData={robotData} setClickedRobotId={setClickedRobotId} pageType={\"monitoring\"}/>\r\n                            <img src={mapBackgroundSrc} alt=\"map-background-img\" className=\"map-background-img\"  />\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-robot\">\r\n                        <div className=\"grid-title text-color-1\"><ImInfo className=\"icon icon-2\"/>로봇 정보</div>\r\n                        <RobotInfo clickedRobotId={clickedRobotId} robotData={robotData}/>\r\n                        <div>\r\n                        {robotData.map(robot => (   /*upgradable 하나의 robotData의 의미로 robot말고 다른 변수명 찾기 */\r\n                            <RobotInfo robot={robot} key={robot.robot_id}  clickedRobotId={clickedRobotId}/>\r\n                            ))}\r\n                        </div>\r\n                        <ErrorControlButton clickedRobotId={clickedRobotId} setClickedRobotId={setClickedRobotId} />\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MonitoringPresenter\r\n","import React, {useState, useEffect} from 'react'\r\n// import {GetRobotStatus} from './CallController';\r\nimport './../../assets/style.css';\r\n\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.10\r\n\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\n// -- 로봇 status 하나의 항목\r\nfunction RobotStatus({robot}){\r\n    return (\r\n        <li>\r\n            <span> {robot.robot_id}</span>\r\n            <span> - {robot.used == '0' ? \"대기\" : robot.used}</span> \r\n            <span> [ {robot.battery}% ]</span>\r\n        </li>\r\n    )\r\n}\r\n\r\n// -- 로봇 status 리스트에 필요한 작업(list)\r\nfunction CallStatus() {\r\n    const [robotStatusList, setRobotStatusList] = useState([]);\r\n\r\n    const mapId = sessionStorage.getItem('mapId');\r\n\r\n    function getRobotStatus(){\r\n        axios.get('/controller/robot/status/'+mapId)\r\n        .then((response)=>{\r\n            setRobotStatusList(response.data.robot_status);            \r\n        })\r\n        .catch((error) => {\r\n            console.log(\"call robot status item fail.\");\r\n        })\r\n    }\r\n    function countNotUsed(){\r\n        // console.log(\" lenghtheth : \");\r\n        const count = robotStatusList.filter(robot => robot.used === \"0\");  //아무도 사용중이지 않은 로봇 ('0')의 수 계산\r\n        return count.length;\r\n        // if (robotStatusList.length > 0) {\r\n        //     const count = robotStatusList.filter(robot => robot.used === \"0\");\r\n        //     return count.length;\r\n        // }s\r\n        // else {\r\n        //     return 0;\r\n        // }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRobotStatus();\r\n    }, [robotStatusList])\r\n    /* [robotStatusList] 쓰는 이유. (근데 쓰면 계속 불러오드람. 더 찾아보기.)\r\n    근데 여기서 새로고침을 하지 않으면 등록된 모습을 확인할 수 없다. 그 이유는 useEffect 함수의 두번째 인자로 빈 배열을 주면 처음 사이트에 들어갔을 1회만 렌더링이 되기 때문에 다시 값을 불러오지 않는다.\r\n그래서 다음과 같이 수정해 주면 등록이 완료될 때 게시판이 업데이트 되는 모습을 확인할 수 있다.*/\r\n    //불러온 데이터가 존재 할 경우\r\n    if (robotStatusList.length > 0) {\r\n        return (\r\n            <div className=\"grid-container call-status\">\r\n                <div className=\"grid-item\" id=\"item-available\">\r\n                    <h4>호출가능 로봇 수</h4>\r\n                    <div>{countNotUsed()}</div>\r\n                </div>\r\n                <div className=\"grid-item item-state\">\r\n                    <h4>로봇 상태</h4>\r\n                    <div>\r\n                        <ul>\r\n                            {robotStatusList.map(robot => (\r\n                                <RobotStatus robot={robot} key={robot.robot_id} />\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    else {  // 조회 데이터 존재하지 않을 경우\r\n        console.log(\" robotStatusList.length <= 0 존재안함\")\r\n        return (\r\n            <div className=\"grid-container call-status\">\r\n                <div className=\"grid-item\" id=\"item-available\">\r\n                    <h4>호출가능 로봇 수</h4>\r\n                    <div>0</div>\r\n                </div>\r\n                <div className=\"grid-item item-state\">\r\n                    <h4>로봇 상태</h4>\r\n                    <div>\r\n                        <button className=\"data-reload\" onClick={getRobotStatus}>데이터 로드</button>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CallStatus\r\n","import axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\nexport async function getPickupRobot(userId) {    // '픽업대'버튼 눌렀을 때 로봇을 home으로 보냄\r\n\r\n    try {\r\n        const response = await axios.get('/controller/button/to-pickup/' + userId);  // button mqtt post를 위한 정보 얻기\r\n        let error = response.data.error;\r\n        console.log(\"[CallController] getPickupRobot to-pickup 결과 ->\");\r\n        console.log(response);\r\n\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            // alert(response.data.message);\r\n            console.log(response.data.message)\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            let robotId = response.data.robot_id;\r\n            let robotHome = response.data.robot_home;\r\n            let mapName = response.data.map_name;\r\n            let postError = postButton([robotHome, mapName, robotId]);\r\n            return [postError, robotId];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[CallController] getPickupRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\nexport async function getCallRobot(userId) {    // 호출 버튼을 눌러 쉬고있는 로봇 하나를 user의 위치로 오도록 명령을 내린다.\r\n\r\n\r\n    try {\r\n            // [안전장치1] 조금의 버퍼링으로 로봇을 2번 호출하면 안됨.\r\n        /*\r\n            axios.get('/controller/button/robot-updated/' + userId)  // 최근 로봇 수정이 1초안에 있었다면 기달\r\n            .then((response) => {\r\n                console.log(\"[CallController] getCallRobot - robot-updated  결과 ->\");\r\n                console.log(response);\r\n                if (response.data.result.length) {  // 1초내 변경된 로봇의 결과가 1개 이상이라면\r\n                    var message = \"[CallController] getCallRobot - update in 3 second. please wait\";\r\n                    return [true, message];\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"[CallController] getCallRobot - robot-updated  fail get robot updated.\");\r\n                console.log(error);\r\n                return [error, response.data.message];\r\n            })\r\n            */\r\n        // [안전장치2] 조금의 버퍼링으로 로봇을 2번 호출하면 안됨.\r\n\r\n        axios.get('/controller/button/is-call/' + userId)  // 어떤 로봇이 오고있다면 반환\r\n            .then((response) => {\r\n                console.log(\"[CallController] getCallRobot - is call 결과 ->\");\r\n                console.log(response);\r\n                if (response.status == 201) {\r\n                    var message = \"[CallController] getCallRobot - some robot is coming\";\r\n                    return [true, message];\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"[CallController] getCallRobot - fail  get is call status.\");\r\n                console.log(error);\r\n                return [error, response.data.message];\r\n            })\r\n\r\n\r\n\r\n        const response = await axios.get('/controller/button/to-user/' + userId);\r\n        let error = response.data.error;\r\n        console.log(\"[CallController] getCallRobot - to-user  결과 ->\");\r\n        console.log(response);\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            console.log(response.data.message);\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            let robotId = response.data.robot_id;\r\n            let userNode = response.data.user_node;\r\n            let mapName = response.data.map_name;\r\n            let postError = postButton([userNode, mapName, robotId]);\r\n            return [postError, robotId];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[CallController] getCallRobot 호출 가능한 로봇이 없습니다. 기다려주세요.\\n\" + e.message);\r\n        return [true, e.message]\r\n    }\r\n}\r\nfunction postButton(params) {\r\n    console.log(\"[CallController] postButton param \", params);\r\n    try {\r\n        const response = axios({\r\n            method: 'post',\r\n            url: '/mqtt/button',\r\n            data: {\r\n                table_id: params[0],\r\n                map_name: params[1],\r\n                robot_id: params[2]\r\n            }\r\n        });\r\n        console.log(\"[CallController] postButton   결과 ->\");\r\n        console.log(response);\r\n        return false;\r\n\r\n    } catch (e) {\r\n        console.log(\"[CallController] postButton button 정보를 로봇으로 보내는데 실패했습니다.\\n\" + e.message);\r\n        return [true, e.message]\r\n    }\r\n\r\n}","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';     //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'\r\n\r\nfunction CallButton(props) {\r\n    const userId = sessionStorage.getItem('userId');\r\n    var responseStatus = 0;\r\n    const [buttonStatus, setButtonStatus] = useState(0);\r\n    const [calledRobot, setCalledRobot] = useState(0);\r\n\r\n    function getIsCall() {\r\n        var interval = setInterval(() => {\r\n            axios.get('/controller/button/is-call/' + userId)   // 현재 버튼 상태를 반복적으로 불러옴\r\n                .then((response) => {                    \r\n                    responseStatus = response.status    // 201 이동중 202 주방 200 픽업대에 위치\r\n                    switch (responseStatus) {\r\n                        case 201:\r\n                            console.log(\"[CallButton] 현재 매장의 로봇 이동중 : \" + responseStatus);\r\n                            if (buttonStatus != 1) {\r\n                                // console.log(buttonStatus+\"업데이트!\");\r\n                                props.updateLoading(0); //로봇의 움직임이 명령에 반응하여 다른 is call이 반응 했을 때 버튼 클릭 가능\r\n                                setButtonStatus(1);\r\n                            }\r\n                            setCalledRobot(response.data.robot_id); // 해당 주방으로 이동중인 로봇 id \r\n                            setButtonStatus(1);\r\n                            break;\r\n                        case 202:\r\n                            console.log(\"[CallButton] 현재 매장의 로봇 도착 : \" + responseStatus);\r\n                            if (buttonStatus != 2) {\r\n                                // console.log(buttonStatus+\"업데이트! \");\r\n                                props.updateLoading(0); //로봇의 움직임이 명령에 반응하여 다른 is call이 반응 했을 때 버튼 클릭 가능\r\n                                setButtonStatus(2);\r\n                            }\r\n                            setCalledRobot(response.data.robot_id); // 현재 주방에 도착한 로봇id\r\n                            setButtonStatus(2);\r\n                            break;\r\n                        case 200:\r\n                            console.log(\"[CallButton] 현재 매장의 로봇 호출안함 : \" + responseStatus);\r\n                            if (buttonStatus != 0) {\r\n                                // console.log(buttonStatus+\"업데이트!\");\r\n                                props.updateLoading(0); //로봇의 움직임이 명령에 반응하여 다른 is call이 반응 했을 때 버튼 클릭 가능\r\n                                setButtonStatus(0);\r\n                            }\r\n                                setButtonStatus(0);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    // return 1;\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"[CallButton] fail  get is-call button. error ->\");\r\n                    console.log(error);\r\n                    clearInterval(interval);\r\n\r\n                    return 0;\r\n                })\r\n            // if (buttonStatus != 1 && count == 3) {       // 로봇이 오는중이 아니고 3번의 로드 후\r\n            //     console.log(\"[CallButton] 버튼 제한 풀림\");\r\n            //     props.updateLoading(0); //버튼 잠금 푼다. 3초 로딩 후 버튼 허가\r\n            // }\r\n\r\n        }, 1000);\r\n        return interval;\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        const interval = getIsCall();   \r\n        return () => clearInterval(interval);   // 해당 function이 종료될 때 반복도 종료됨.  \r\n    }, [buttonStatus])\r\n\r\n    return (\r\n        <div >\r\n            <div id=\"called-robot\">\r\n                {buttonStatus != 0 ?\r\n                    <div><span>{calledRobot}</span> 번 로봇 배정 </div>\r\n                    :\r\n                    <div> </div>    // '호출'버튼일 때에는 배정된 로봇이 없다.\r\n                }\r\n\r\n            </div>\r\n            {\r\n                buttonStatus == 0 ? <button id=\"call-button\"  onClick={props.onClickKitchen}>호출</button>\r\n                : buttonStatus == 2 ? <button id=\"call-button\"  onClick={props.onClickPickup}>픽업대</button>\r\n                : <button id=\"call-button\">오는중</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CallButton\r\n","import React, { Component } from 'react';\r\nimport CallStatus from './CallStatus';\r\nimport {getPickupRobot, getCallRobot, getIsCall} from './CallController';\r\nimport CallButton from './CallButton';\r\nimport Modal from './../Modal/Modal';\r\n\r\nexport class CallPresenter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            loading: 0,\r\n            isModalOpen:false,\r\n            modalTitle:\"제목\",\r\n            modalContent: \"내용\",\r\n        };\r\n\r\n    }\r\n\r\n    // 로딩중에 버튼클릭 못하도록 하는 flag값을 갖는 변수 loading의 값을 변경하는 함수\r\n    updateLoading(input) {\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            loading: input\r\n        }))\r\n    }\r\n\r\n    // 모달에서 ok버튼 클릭시 \r\n    async clickPickupModalPermit(userId){\r\n\r\n        // 매장에 로봇이 도착한 상태. 픽업대 버튼을 누를때 시행되는 상황\r\n        let [error, message] = await getPickupRobot(userId);\r\n        if (!error) {\r\n            console.log(\"[CallPresenter] handleButtonClick back, robot_id : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                loading: 1, // 버튼 잠금 (로봇이 출발하지 않았을 때 다시 버튼을 누르는 것을 방지)\r\n                isModalOpen: false\r\n            }))\r\n        }\r\n        else {\r\n            console.log(\"[CallPresenter] handleButtonClick back, error  : \", message);\r\n            // alert(message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                loading: 0, // 버튼 오픈\r\n\r\n                isModalOpen: false\r\n            }))\r\n        }\r\n    }\r\n    // 모달에서 ok버튼 클릭시 \r\n    async clickKitchenModalPermit(userId){\r\n        // 로봇이 home에 있는 상태. 호출 버튼을 누를때 시행되는 상황\r\n        let [error2, message2] = await getCallRobot(userId);\r\n        if (!error2) {\r\n            console.log(\"[CallPresenter] handleButtonClick call, robot_id : \", error2);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                loading: 1, // 버튼 잠금 (로봇이 호출된 뒤 출발하기 전에 다시 버튼을 누르는것을 방지)\r\n                isModalOpen: false\r\n\r\n            }))\r\n        }\r\n        else {\r\n            console.log(\"[CallPresenter] handleButtonClick call, error  : \", message2);\r\n            // alert(message2);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                loading: 0, // 버튼 오픈\r\n                isModalOpen: false\r\n            }))\r\n        }\r\n\r\n    }\r\n    // 주요 버튼(호출 / 픽업대 / 오는중) 눌렀을 시 동작하는 함수\r\n        // 버튼 클릭시 모달을 띄우는 함수\r\n\r\n    handlePickupButtonClick() {\r\n        console.log(\"[CallPresenter] 픽업대로 버튼 클릭\");\r\n        // 오는 중 이거나 버튼을 누른지 3초 이내에는 handleButtonClick 함수를 끝낸다.\r\n        if (this.state.loading) {\r\n            console.log(\"[CallPresenter] loading...\");\r\n            return;\r\n        }\r\n        // 매장에 로봇이 도착한 상태. 픽업대 버튼을 누를때 시행되는 상황\r\n        this.setState(prevState => ({\r\n            ...prevState,   \r\n            isModalOpen: \"pickup\",\r\n            modalTitle: \"픽업대로\",\r\n            modalContent: \"해당 매장의 로봇을 픽업대로 보내겠습니까?\"\r\n        }));\r\n    }\r\n    handleKitchenButtonClick() {\r\n        console.log(\"[CallPresenter] 호출 버튼 클릭\" );\r\n        // 오는 중 이거나 버튼을 누른지 3초 이내에는 handleButtonClick 함수를 끝낸다.\r\n        if (this.state.loading) {\r\n            console.log(\"[CallPresenter] loading...\");\r\n            return;\r\n        }\r\n        // 매장에 로봇이 도착한 상태. 픽업대 버튼을 누를때 시행되는 상황\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isModalOpen: \"kitchen\",\r\n            modalTitle: \"로봇 호출\",\r\n            modalContent: \"로봇을 주방으로 호출하시겠습니까?\"\r\n        }));\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const userId = sessionStorage.getItem('userId');\r\n        const isModalOpen = this.state.isModalOpen;\r\n\r\n        return (\r\n            <div className=\"content\" id=\"call\">\r\n                <h1 > 로봇 호출</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item\" id=\"item-button\">\r\n                        <h4>로봇 호출 버튼</h4>\r\n                        <div id=\"calling-map-name\">\r\n                            {userId}의 매장 입니다.\r\n                        </div>\r\n                    \r\n                            <CallButton userId={userId} onClickPickup={() => this.handlePickupButtonClick()} onClickKitchen={() => this.handleKitchenButtonClick()}\r\n                                updateLoading={(input) => this.updateLoading(input)} />\r\n                    </div>\r\n                    <div className=\"item-call-status\">\r\n                        <CallStatus />\r\n\r\n                    </div>\r\n\r\n                </div>\r\n                <Modal title={this.state.modalTitle} content={this.state.modalContent} open={isModalOpen} onCancel={() => this.setState(prevState => ({ isModalOpen: false }))}\r\n                    onPermit={isModalOpen == \"pickup\" ? () => this.clickPickupModalPermit(userId)\r\n                                : () => this.clickKitchenModalPermit(userId)}>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CallPresenter\r\n","import React, { Component } from 'react';\r\nimport Modal from './../Modal/Modal';\r\nconst BUTTON_WRAPPER_STYLES = {\r\n    position: 'relative',\r\n    zIndex: 1\r\n  }\r\n  \r\n\r\nexport class SettingPresenter extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            isModalOpen: false\r\n        };\r\n    }\r\n    onLogout = () => {\r\n        window.sessionStorage.removeItem('userId');\r\n        window.sessionStorage.removeItem('mapId');\r\n        window.sessionStorage.removeItem('userName');\r\n        window.sessionStorage.removeItem('logoSrc');\r\n\r\n        document.location.href = '/'\r\n        \r\n    }\r\n    render() {\r\n        const isModalOpen = this.state.isModalOpen;\r\n        console.log(\"[Setting presenter] username\");\r\n        console.log(sessionStorage.getItem('userName'));\r\n        return (\r\n            <div className=\"content setting\">\r\n                <h1>설정</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item\">\r\n                    설정 페이지입니다\r\n                    <button onClick={this.onLogout.bind(this)}>로그아웃</button>\r\n                        <div style={BUTTON_WRAPPER_STYLES} onClick={() => console.log('clicked')}>\r\n                            <button onClick={() => this.setState(prevState => ({isModalOpen:true }))}>Open Modal</button>\r\n\r\n                            <Modal title=\"제목\" content = \"내용22\" open={isModalOpen} onCancel={() => this.setState(prevState => ({isModalOpen:false }))}\r\n                            onPermit={() => this.setState(prevState => ({isModalOpen:false }))}>\r\n                            </Modal>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SettingPresenter\r\n","import React, { Component } from 'react'\r\nimport Box from '@material-ui/core/Box';\r\n\r\nexport class HistoryPresenter extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"content\" id=\"history\">\r\n                <h1 > 기록</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item item-scroll\" id = \"history-list\">\r\n                        기록 페이지입니다\r\n                        <Box bgcolor=\"primary.main\" p={2} m={1}>primary.main</Box>\r\n                        <Box bgcolor=\"primary.light\" sx={{ borderRadius: 25 }} color=\"primary.contrastText\" p={2} m={1}>primary.light</Box>\r\n                        <Box bgcolor=\"primary.dark\" color=\"primary.contrastText\" p={2} m={1}>primary.dark</Box>\r\n                        <Box bgcolor=\"secondary.main\" p={2} m={1}>secondary.main</Box>\r\n                        <Box bgcolor=\"secondary.light\" color=\"secondary.contrastText\" p={2} m={1}>secondary.light</Box>\r\n                        <Box bgcolor=\"secondary.dark\" color=\"secondary.contrastText\" p={2} m={1}>secondary.dark</Box>\r\n                        <Box bgcolor=\"error.main\" p={2} m={1}>error.main</Box>\r\n                        <Box bgcolor=\"error.light\" color=\"error.contrastText\" p={2} m={1}>error.light</Box>\r\n                        <Box bgcolor=\"error.dark\" color=\"error.contrastText\" p={2} m={1}>error.dark</Box>\r\n                        <Box bgcolor=\"sidenav.main\" p={2} m={1}>error.main</Box>\r\n                        <Box bgcolor=\"sidenav.background\" color=\"neutral.contrastText\" p={2} m={1}>error.light</Box>\r\n                        <Box bgcolor=\"sidenav.text\" color=\"neutral.contrastText\" p={2} m={1}>error.dark</Box>\r\n                        <Box bgcolor=\"text.primary\" p={2} m={1}>text.primary</Box>\r\n                        <Box bgcolor=\"text.secondary\" p={2} m={1}>text.secondary</Box>\r\n                        <Box bgcolor=\"text.disabled\" p={2} m={1}>text.disabled</Box>\r\n                        <Box bgcolor=\"text.hint\" p={2} m={1}>text.hint</Box>\r\n                        <Box bgcolor=\"text.myTextColor\" p={2} m={1}>text.myTextColor</Box>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HistoryPresenter\r\n","import axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\nexport async function getRobotError(mapId) {    // 해당 맵의 로봇의 에러 기록들을 얻어온다\r\n\r\n    try {\r\n        const response = await axios.get('/robot-errors/map/' + mapId);  //\r\n        console.log(\"[ErrorController] getRobotError 결과 ->\");\r\n        console.log(response);\r\n        var status = response.status;\r\n        if (status>= 200) {\r\n            return [false, response.data];\r\n        }\r\n        return [true, \"getRobotError status is not 200.\"];\r\n\r\n    } catch (e) {\r\n        console.log(\"[ErrorController] getRobotError error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\nexport async function getRobotLog(logId) {    // 해당 에러와 연결된 로그의 정보를 불러옴\r\n\r\n    try {\r\n        const response = await axios.get('/robot-logs/' + logId);\r\n        console.log(\"[ErrorController] getRobotLog 결과 ->\");\r\n        console.log(response.data);\r\n        var status = response.status;\r\n        var errorMessage = \"\";\r\n        if (status>= 200) {\r\n            if (response.data.length > 0) {\r\n                return [false, response.data[0]];\r\n            }\r\n            else {\r\n                errorMessage = \"[ErrorController] not log data existed.\"\r\n                return [true, errorMessage];\r\n            }\r\n        }\r\n        else {\r\n            return [true, \"getRobotLog status is not 200.\"];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[ErrorController] getRobotLog error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}","import React, {useState, useEffect} from 'react'\r\n\r\nimport {getRobotError, getRobotLog} from './ErrorController';\r\nimport Modal from './../Modal/Modal';\r\n\r\n\r\n\r\nfunction ErrorPresenter() {\r\n    const [errorList, setErrorList]= useState([]);\r\n    const [modalTitle, setModalTitle]= useState(\"\");\r\n    const [modalContent, setModalContent]= useState(\"\");\r\n    const [isModalOpen, setIsModalOpen]= useState(false);\r\n    const mapId = sessionStorage.getItem('mapId');\r\n\r\n    /*\r\n    1:\r\n        created_at: \"2021-10-27 15:09:40\"\r\n        current_node_robot: \"1\"\r\n        current_node_server: \"16\"\r\n        error_id: \"5\"\r\n        error_type: \"world\"\r\n        last_log_id: null\r\n        map_id: \"7\"\r\n        robot_id: \"2\"\r\n    */\r\n    async function loadErrors() {\r\n\r\n        let [error, result] = await getRobotError(mapId);\r\n        if (!error) {\r\n            setErrorList(result);\r\n        }\r\n    }\r\n    async function loadLog(logId) {\r\n        let [error, result] = await getRobotLog(logId);\r\n        /*\r\n        created_at: \"2021-10-20 14:18:50\"\r\ncurrent_node: \"1\"\r\nfinal_node: \"1\"\r\nlog_id: \"1\"\r\nmap_existence: \"[1]1[2]0[3]0[4]0[5]0[6]0[7]0[8]0[9]0[10]0[11]0[12]0[13]0[14]0[15]0[16]0[17]0[18]0[19]0[20]0[21]0[22]0[23]2[24]3[25]0[26]0[27]0[28]0[29]0[30]0[31]0\"\r\nmap_id: \"8\"\r\nrobot_id: \"1\"\r\nrobot_path: \"9999!\"\r\n        */\r\n        var logString = \"\";\r\n        if (!error) {\r\n            logString = \"current node: \"+result.current_node+\"\\n||\\n\"+\"robot path: \"+result.robot_path+\"\\n||\\n\"+\"map existence: \"+result.map_existence;\r\n            setModalContent(logString);\r\n            return true;\r\n        }\r\n        setModalContent(logString);\r\n        return false;\r\n    }\r\n    function handelErrorClick(logId, errorId){\r\n        const isSuccess = loadLog(logId);\r\n        if(isSuccess){\r\n            setModalTitle(errorId+\"번 에러 (log \"+logId+\")\");\r\n            setIsModalOpen(true);    \r\n        }\r\n    }\r\n    function clickErrorModalButton(){\r\n            setIsModalOpen(false);    \r\n    }\r\n    useEffect(() => {\r\n        loadErrors();\r\n        console.log(errorList);\r\n\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <div className=\"content\" id=\"error\">\r\n                <h1 > 에러</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item item-scroll\" id=\"error-div\">\r\n                        에러 페이지입니다\r\n                        <table id=\"error-table\">\r\n                            <thead>\r\n                                <tr className=\"background-color-2\" align=\"center\" bgcolor=\"white\" >\r\n                                    <th>에러id</th>\r\n                                    <th>로봇</th>\r\n                                    <th>타입</th>\r\n                                    <th>로봇의 최신 current</th>\r\n                                    <th>서버의 최신 current</th>\r\n                                    <th>발생시각</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n\r\n                            <tbody>\r\n                                {errorList.map(robotError => (\r\n                                    <tr align=\"center\" bgcolor=\"white\" onClick={()=>handelErrorClick(robotError.last_log_id, robotError.error_id)}>\r\n                                        <td>{robotError.error_id}</td>\r\n                                        <th>{robotError.robot_id}</th>\r\n                                        <td>{robotError.error_type}</td>\r\n                                        <td>{robotError.current_node_robot}</td>\r\n                                        <td>{robotError.current_node_server}</td>\r\n                                        <td>{robotError.created_at}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Modal title={modalTitle} content={modalContent} open={isModalOpen}\r\n            onCancel={clickErrorModalButton} onPermit={clickErrorModalButton}>\r\n                </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorPresenter\r\n","import React from 'react'\r\n\r\nfunction PickupContent({ pickup }) {\r\n    const isNull = pickup.phone === \"\";\r\n    return (\r\n        <li className=\"pickup-item\">\r\n            <div className=\"pickup-number\"> {pickup.id}</div>\r\n            <div className=\"pickup-store\"> {pickup.store}</div>\r\n            <div className=\"pickup-status\">\r\n                {isNull ?\r\n                    <div> 비어있음</div>\r\n                    :\r\n                    <div>\r\n                        <div> 배달 주소 : {pickup.delivery}</div>\r\n                        <div> 연락처 : {pickup.phone}</div>\r\n                        <div> 대기시간 : {pickup.delay}</div>\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nfunction PickupItem({pickupList}) {\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {pickupList.map(pickupItem => (\r\n                    <PickupContent pickup={pickupItem} key={pickupList.id}/>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PickupItem\r\n","import React, { Component } from 'react'\r\nimport PickupItem from './PickupItem'\r\nexport class PickupPresenter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            pickupList : [\r\n                {id:1, store:\"대기\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"\", delay:0},\r\n                {id:2, store:\"맥도날드\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"1234\", delay:4},\r\n                {id:3, store:\"버거킹\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"1433\", delay:15},\r\n                {id:4, store:\"맘스터치\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"1134\", delay:3},\r\n                {id:5, store:\"대기\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"\", delay:0},\r\n                {id:6, store:\"롯데리아\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"1424\", delay:2}\r\n            ]\r\n        }\r\n        // this.toggle = this.toggle.bind(this);\r\n\r\n    }\r\n    render() {\r\n        const pickupList = this.state.pickupList\r\n        return (\r\n            <div className=\"content\" id=\"pickup\">\r\n                <h1> 픽업대 현황</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item item-scroll\" id=\"item-pickup-list\">\r\n                    <PickupItem pickupList={pickupList}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PickupPresenter\r\n","import React, { useEffect, useState } from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\n//component\r\nimport './style.css';\r\nimport Modal from './../Modal/Modal';\r\n//icon\r\nimport {AiOutlineLeft,AiOutlineRight, AiOutlineUnorderedList, AiOutlineQuestionCircle} from 'react-icons/ai'\r\nimport {FiSettings} from 'react-icons/fi'\r\nimport {ImUser} from 'react-icons/im'\r\nimport {HiOutlineLocationMarker} from 'react-icons/hi'\r\nimport {MdWebAsset, MdDashboard} from 'react-icons/md'\r\nimport {RiLogoutBoxRLine} from 'react-icons/ri';\r\n\r\n\r\nfunction SideNavPresenter() {\r\n\r\n    const [isFullNav, setIsFullNav] = useState(true);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    var lineHeight = \"50px\"\r\n    var dbLogoSrc = sessionStorage.getItem('logoSrc');\r\n    var userName = sessionStorage.getItem('userName');\r\n    // userName = \"롯데리아다라마\";    //test!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n    if(dbLogoSrc == null){\r\n        dbLogoSrc = \"terrace/terrace_logo\";\r\n    }\r\n    if(userName.length > 6){\r\n        lineHeight = \"30px\"\r\n    }\r\n    const logo_src = '/assets/store_logo/' + dbLogoSrc + '.png';\r\n    const modalTitle = \"로그아웃 안내\";\r\n    const modalHighlight = \"\";\r\n    const modalContent = \"로그아웃 하시겠습니까?\";\r\n// 로그아웃 함수\r\nfunction handleLogoutClick() {   // 로봇 복귀 버튼\r\n    console.log(\"logout modal click!\");\r\n    setIsModalOpen(true);\r\n}\r\nfunction clickLogoutPermit(){\r\n    window.sessionStorage.removeItem('userId');\r\n    window.sessionStorage.removeItem('mapId');\r\n    window.sessionStorage.removeItem('userName');\r\n    window.sessionStorage.removeItem('logoSrc');\r\n    document.location.href = '/login'\r\n}\r\n    return (\r\n        <div id=\"side-nav\" className={\"side-nav \" + (isFullNav ? \"big-nav\" : \"small-nav center-align\")}>\r\n\r\n            <div className=\"center-align\" id=\"top\">\r\n                {/* <div onClick={() => setIsFullNav(!isFullNav)} className=\"toggle-menu-btn right-align\">\r\n                    {isFullNav ? (\r\n                        <AiOutlineLeft className=\"icon icon-1\" />\r\n                    ) : (\r\n                        <AiOutlineRight className=\"icon icon-1\" />\r\n                    )}\r\n                </div> */}\r\n\r\n                <div className=\"user-div\">\r\n                    <div id=\"nav-user-logo-div\">\r\n                        <img id=\"nav-user-logo\" src={logo_src} alt=\"user-logo\" />\r\n                    </div>\r\n\r\n                    {/* userid로 user img url 불러오기 */}\r\n                    <span id=\"nav-user-name\" style={{lineHeight:lineHeight}}>{userName}</span>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"side-class text-color-2\">Main Menu</div>\r\n            <NavLink to=\"/call\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">로봇 호출</p>\r\n                <MdDashboard className=\"icon icon-1\" />\r\n            </NavLink>\r\n            <NavLink to=\"/serving\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">서빙 모드</p>\r\n                <HiOutlineLocationMarker className=\"icon icon-1\" />\r\n            </NavLink>\r\n            <NavLink to=\"/monitoring\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">모니터링</p>\r\n                <MdWebAsset className=\"icon icon-1\" />\r\n\r\n            </NavLink>\r\n            <NavLink to=\"/history\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">기록</p>\r\n                <AiOutlineUnorderedList className=\"icon icon-1\" />\r\n            </NavLink>\r\n            \r\n            <div className=\"side-class text-color-2\">General</div>\r\n            <NavLink to=\"/pickup\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">픽업대 상황</p>\r\n                <ImUser className=\"icon icon-1\" />\r\n            </NavLink>\r\n            <NavLink to=\"/setting\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\"> 설정</p>\r\n                <FiSettings className=\"icon icon-1\" />\r\n            </NavLink>\r\n\r\n\r\n            <NavLink to=\"/error\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">에러</p>\r\n                <AiOutlineQuestionCircle className=\"icon icon-1\" />\r\n            </NavLink>\r\n\r\n            <div className=\"center-align\" id=\"bottom\">\r\n\r\n            <button id=\"nav-login\" className=\"round-button background-color-w\" onClick={handleLogoutClick}>\r\n                        <p className=\"text-color-1\"> 로그아웃</p>\r\n                        <RiLogoutBoxRLine className=\"icon icon-1\" />\r\n                    </button>\r\n            </div>\r\n            <Modal title={modalTitle} highlight={modalHighlight} content={modalContent} open={isModalOpen} onCancel={() => setIsModalOpen(false)}\r\n                onPermit={clickLogoutPermit}>\r\n                </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SideNavPresenter;\r\n","import React from 'react'\r\nimport './style.css';\r\n// icon\r\n\r\n\r\nimport {BsBellFill} from 'react-icons/bs'\r\nimport {MdLanguage} from 'react-icons/md'\r\nimport {IoIosArrowDown} from 'react-icons/io'\r\n\r\nfunction HeaderPresenter() {\r\n    return (\r\n        <div id= \"header\">\r\n            <div id=\"logo-div\">\r\n                <img id=\"logo\" src={\"/assets/hprobot-logo/hprobot-logo-1line.png\"} alt=\"login-logo-img\" />\r\n            </div>\r\n            <div id=\"language-div\">\r\n                <MdLanguage id=\"language-icon\" />\r\n                <div>한국어</div>\r\n                <IoIosArrowDown id=\"arrow-icon\" />\r\n            </div>\r\n            <div id=\"alram-div\">\r\n                <BsBellFill className=\"icon\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeaderPresenter\r\n","import './App.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Login from './component/Login/LoginPresenter';\r\nimport User from './component/User/User';\r\nimport Authorized from './component/User/Authorized';\r\nimport Map from './component/Map/MapPresenter';\r\nimport Serving from './component/Map/ServingPresenter';\r\nimport Monitoring from './component/Map/MonitoringPresenter';\r\nimport Call from './component/Call/CallPresenter';\r\nimport Setting from './component/Setting/SettingPresenter';\r\nimport History from './component/History/HistoryPresenter';\r\nimport Error from './component/Error/ErrorPresenter';\r\nimport Pickup from './component/Pickup/PickupPresenter';\r\nimport SideNav from './component/SideNav/SideNavPresenter';\r\nimport Header from './component/Header/HeaderPresenter';\r\nimport {  BrowserRouter as Router,  Route,  Redirect,  Switch} from 'react-router-dom';\r\n\r\n\r\nfunction App() {\r\n\r\n  //로그인 상태 관리\r\n  const [isAuthorized, setIsAuthorized] = useState(false) //로그인 상태. 기본 false\r\n\r\n  useEffect(() => {\r\n    const user = sessionStorage.getItem('mapId')\r\n    if (user == null) {\r\n      // sessionStorage 에 user_id 라는 key 값으로 저장된 값이 없다면\r\n    } else {\r\n      // sessionStorage 에 user_id 라는 key 값으로 저장된 값이 있다면\r\n      // 로그인 상태 변경\r\n      setIsAuthorized(true)\r\n    }\r\n  })\r\n\r\n  return (\r\n\r\n    <div className=\"web-container\">\r\n      {!isAuthorized ? <Login /> :  // 로그인 안되어있을 땐 항상 로그인 페이지\r\n        <Router>\r\n          <div className=\"web-top-bar\">헬퍼로보틱스 관제시스템</div>\r\n          <div className=\"web-side-nav\">\r\n            <SideNav />\r\n          </div>\r\n          <div className=\"web-header\">\r\n            <Header />\r\n          </div>\r\n          <div className=\"web-content\">\r\n            <Switch>\r\n              <Route path=\"/\" exact>\r\n                {!isAuthorized ? <Login /> : <Setting />}\r\n              </Route>\r\n              <Route path=\"/serving\" exact>\r\n                <Serving />\r\n              </Route>\r\n              <Route path=\"/monitoring\" exact>\r\n                <Monitoring />\r\n              </Route>\r\n              <Route path=\"/call\" exact>\r\n                <Call />\r\n              </Route>\r\n              <Route path=\"/pickup\" exact>\r\n                <Pickup />\r\n              </Route>\r\n              <Route path=\"/history\" exact>\r\n                <History />\r\n              </Route>\r\n              <Route path=\"/error\" exact>\r\n                <Error />\r\n              </Route>\r\n              <Route path=\"/setting\" exact>\r\n                <Setting />\r\n              </Route>\r\n              <Route path=\"/my-page\" exact>\r\n                {!isAuthorized ? < User /> : <Error />}\r\n              </Route>\r\n\r\n              <Redirect to=\"/\" />\r\n              {/* 주어지지 않은 url은 home으로 자동 이동 */}\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      }\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}