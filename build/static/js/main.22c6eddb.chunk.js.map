{"version":3,"sources":["component/User/LoginController.js","component/User/Login.js","component/User/User.js","component/User/Authorized.js","component/Map/MapRail.js","component/Map/MapStatus.js","component/Map/MapMoving.js","component/Map/RobotPosition.js","component/Modal/Modal.js","component/Call/CallController.js","component/Map/MapController.js","component/Map/MapPresenter.js","component/Call/CallStatus.js","component/Call/CallButton.js","component/Call/CallPresenter.js","component/Setting/SettingPresenter.js","component/History/HistoryPresenter.js","component/Pickup/PickupItem.js","component/Pickup/PickupPresenter.js","component/SideNav/SideNavPresenter.js","App.js","index.js"],"names":["postControllerLogin","userId","userPassword","a","axios","method","url","data","response","valid","password","console","log","message","defaults","baseURL","process","headers","post","StyledTextField","withStyles","root","borderRadius","TextField","Login","useState","inputId","setInputId","inputPassword","setInputPassword","showPassword","setshowPassword","onSubmit","result","user_name","sessionStorage","setItem","map_id","logo_src","document","location","href","className","id","fontSize","src","alt","label","variant","margin","style","width","size","value","onChange","e","target","color","FormControl","sx","InputLabel","htmlFor","OutlinedInput","type","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","event","preventDefault","edge","Button","padding","marginTop","User","onLogout","window","removeItem","userName","getItem","this","bind","Component","Authorized","goLogin","MapTile","props","unit","nodeId","posX","posY","mapUnitImgSrc","height","left","top","MapRail","xytypeList","mapBackgroundSrc","map","xytype","MapStatus","robot","robot_id","battery","MapMoving","current_node","final_node","RobotItem","colorString","state","robotId","robotSize","robotImgSrc","backgroundColor","TargetItem","x","y","ax","currX","ay","currY","bx","finalX","by","finalY","centerX","centerY","Math","sqrt","pow","transformString","atan2","PI","toString","transform","RobotPosition","setRobotStatus","robotPositionList","setRobotPositionList","dumpRobotPosition","curr_x","curr_y","final_x","final_y","mapId","getRobotPosition","interval","setInterval","get","then","robot_position","catch","error","clearInterval","useEffect","length","filter","frobot","Modal","title","content","open","onPermit","onCancel","createPortal","getElementById","getDestinationRobot","destinationNode","mapName","map_name","postError","postButton","getPickupRobot","status","getBackRobot","robotHome","robot_home","getCallRobot","userNode","user_node","params","getMapView","MapPresenter","mapContainer","React","createRef","isModalOpen","clickedRobotId","robotStatus","modalTitle","modalContent","mapView","maxXsize","Number","current","offsetWidth","setState","prevState","i","ref","p","handelMapClick","handelRobotClick","clickMapModalPermit","clickRobotModalPermit","RobotStatus","used","CallStatus","robotStatusList","setRobotStatusList","getRobotStatus","robot_status","CallButton","responseStatus","call","count","updateLoading","updateCalledRobot","updateIsCall","getIsCall","isCall","CallPresenter","calledRobot","loading","input","error2","message2","toggle","BUTTON_WRAPPER_STYLES","zIndex","SettingPresenter","HistoryPresenter","Box","bgcolor","m","PickupContent","pickup","isNull","phone","store","delivery","delay","PickupItem","pickupList","pickupItem","PickupPresenter","SideNavPresenter","isAuthorized","isFullNav","setIsFullNav","to","activeClassName","App","setIsAuthorized","theme","createTheme","palette","primary","main","light","dark","secondary","sidenav","background","text","disabled","hint","myTextColor","overrides","MuiButton","ThemeProvider","path","exact","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.22c6eddb.chunk.js","sourcesContent":["import axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\nexport async function postControllerLogin(userId, userPassword) {    // map화면에서 목적지 node를 눌렀을 때, 픽업대의(1번) 로봇을 보내는 함수\r\n\r\n    try {\r\n        const response = await axios({      // 로그인 정보 서버로 보내기\r\n            method: 'post',\r\n            url: '/controller/login',\r\n            data: {\r\n                userId: userId,\r\n                userPassword: userPassword\r\n            }\r\n        });\r\n        let valid = response.data.password; \r\n        console.log(\"[LoginController] postControllerLogin 결과 ->\");\r\n        console.log(response.data);\r\n        if (valid == true){     // 유효한 로그인 정보일 때\r\n            return [valid, response.data];  \r\n        }\r\n        else {      // 로그인 실패\r\n            return [valid, response.data.message];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[LoginController] postControllerLogin error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\n","import React, {useState} from 'react'\r\nimport './../../assets/style.css';\r\nimport {postControllerLogin} from './LoginController';\r\nimport Button from '@material-ui/core/Button'; // Button을 import 한다.\r\n// import RaisedButton from '@material-ui/core/RaisedButton'; // Button을 import 한다.\r\n// import theme from './../../assets/theme';\r\n// import { ThemeProvider } from '@material-ui/core/styles'\r\n// import CssBaseline from '@material-ui/core/CssBaseline'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Visibility from '@mui/icons-material/Visibility';\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport IconButton from '@mui/material/IconButton';\r\n\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';    // 패스워드 아이콘\r\nimport PersonOutlineOutlinedIcon from '@mui/icons-material/PersonOutlineOutlined';  // 아이디 아이콘\r\n\r\n\r\n\r\nconst StyledTextField = withStyles({\r\n    root: {\r\n      '& .MuiOutlinedInput-root': {\r\n        '& fieldset': {\r\n          borderRadius: `90px`,\r\n        },\r\n      },\r\n    },\r\n})(TextField);\r\nfunction Login() {\r\n    // 테스트용 user 정보\r\n    const dumpUsers = [\r\n        { id: \"hello\", password: \"world\", mapId:7, userName:\"store21\"},\r\n        { id: \"admin\", password: \"1234\", mapId:7, userName:\"store14\"},\r\n        { id: \"a\", password: \"s\", mapId:7, userName:\"store17\"}\r\n    ];\r\n    const checkLogin = (id, pw) => {\r\n        const user = dumpUsers.find(\r\n            (user) => user.id === id && user.password === pw\r\n        );\r\n        if (user === undefined) {\r\n            // alert('user undefined.'+id)\r\n            return null;}\r\n        return user;\r\n    }\r\n    // 아이디, 패스워드 입력값 변수. 초기는 null\r\n    const [inputId, setInputId] = useState(\"\");\r\n    const [inputPassword, setInputPassword] = useState(\"\");\r\n    const [showPassword, setshowPassword] = useState(\"\");\r\n\r\n    // input에 입력시 변수 갱신\r\n    const handleInputId = (e) => {\r\n        setInputId(e.target.value)\r\n    }\r\n\r\n    const handleInputPassword = (e) => {\r\n        setInputPassword(e.target.value)\r\n    }\r\n\r\n    const handleClickShowPassword = () => {\r\n        setshowPassword(!showPassword);\r\n\r\n      };\r\n    \r\n      const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n      };\r\n    const onSubmit = async () => {\r\n        // 서버로 로그인 정보 확인\r\n        let [valid, result] = await postControllerLogin(inputId, inputPassword);\r\n        if (valid) {\r\n            // console.log(\"[LoginPresenter] post login success\");\r\n            console.log(\"[LoginPresenter] login success : \");\r\n            console.log(result.user_name);\r\n            // const userName = \r\n            sessionStorage.setItem('userId', inputId)\r\n            sessionStorage.setItem('mapId', result.map_id)\r\n            sessionStorage.setItem('userName', result.user_name)\r\n            sessionStorage.setItem('logoSrc', result.logo_src)\r\n            document.location.href = '/'\r\n\r\n        }\r\n        else {\r\n            console.log(\"[LoginPresenter] login failed, error  : \", result);\r\n            return;\r\n\r\n        }\r\n        \r\n\r\n/*\r\n        const user = checkLogin(inputId, inputPassword);\r\n        if (user === null){\r\n            console.log('입력하신 정보가 올바르지 않습니다.')\r\n        } else {\r\n            \r\n            sessionStorage.setItem('userId', inputId)\r\n            sessionStorage.setItem('mapId', user.mapId)\r\n            sessionStorage.setItem('userName', user.userName)\r\n            \r\n\r\n        }\r\n        작업 완료 되면 페이지 이동(새로고침)\r\n        document.location.href = '/'\r\n        */\r\n    }\r\n    return (\r\n        <div className=\"content\" id=\"login\">\r\n                                        \r\n\r\n            <h1 > <LockOutlinedIcon fontSize=\"large\" /> 로그인</h1>\r\n            <div className=\"grid-container\">\r\n                <div className=\"grid-item center-div\" id=\"item-form\">\r\n                    <img className=\"login-hprobot-img\" src={\"/assets/hprobot-logo/hprobot-logo-1line.png\"} alt=\"hprobot-logo\" />\r\n                    <div className=\"login-div\">\r\n                        {/* 한줄씩 하려고 br 태그 사용함. 나중에 부트스트랩 사용으로 간편하게 고칠예정 develop */}\r\n                        {/* <input type='text' name='input_id' value={inputId} onChange={handleInputId }  /> */}\r\n                        <div className=\"login-input-div\">\r\n                            <div className=\"left-div\">\r\n                                <PersonOutlineOutlinedIcon fontSize=\"large\" />\r\n                            </div>\r\n                            <StyledTextField id=\"outlined-basic\" label=\"아이디\" variant=\"outlined\" margin=\"small\" style={{ width: '100% ' }}\r\n                                size=\"small\" value={inputId} onChange={handleInputId} color=\"primary\" />\r\n                            {/* InputLabelProps={{style : {color : '#688ABD'} }} 핵사코드만 적용됨 */}\r\n                        </div>\r\n                        <div className=\"login-input-div\">\r\n                        <div className=\"left-div\">\r\n                            <LockOutlinedIcon fontSize=\"large\" />\r\n                        </div>\r\n                            <FormControl sx={{ width: '100% ' }} variant=\"outlined\" size=\"small\" margin=\"small\" color=\"primary\">\r\n                                <InputLabel htmlFor=\"outlined-adornment-password\" >패스워드</InputLabel>\r\n                                {/* style={ {color : '#688ABD'}} primary로 적용됨 */}\r\n                                <OutlinedInput\r\n                                    id=\"outlined-adornment-password\"\r\n                                    type={showPassword ? 'text' : 'password'}\r\n                                    value={inputPassword}\r\n                                    onChange={handleInputPassword}\r\n                                    endAdornment={\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                aria-label=\"toggle password visibility\"\r\n                                                onClick={handleClickShowPassword}\r\n                                                onMouseDown={handleMouseDownPassword}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    }\r\n                                    label=\"Password\"\r\n                                    sx={{ borderRadius: 16 }}\r\n\r\n                                />\r\n                            </FormControl>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Button variant=\"contained\" style={{ borderRadius: 25, padding: \"0.3rem 7rem\", marginTop: \"2rem\" }} color=\"secondary\" onClick={onSubmit}>로그인</Button>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { Component } from 'react'\r\n\r\nexport class User extends Component {\r\n    onLogout = () => {\r\n        window.sessionStorage.removeItem('userId');\r\n        window.sessionStorage.removeItem('mapId');\r\n        window.sessionStorage.removeItem('userName');\r\n        window.sessionStorage.removeItem('logoSrc');\r\n\r\n        document.location.href = '/'\r\n\r\n    }\r\n    render() {\r\n        const userName = sessionStorage.getItem('userName')\r\n        const dbLogoSrc = sessionStorage.getItem('logoSrc');\r\n        const logo_src = '/assets/store_logo/' + dbLogoSrc + '.png';\r\n        // const logo_src = '../../assets/store_logo/the_people_burger/the_people_burger_logo.png'\r\n        return (\r\n            <div className=\"content\" id=\"user\">\r\n                <h1 > 내 정보</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item\" id=\"item-profile\">\r\n                        <h4>프로필</h4>\r\n                {/* userid로 user 정보와 img url 불러오기 */}\r\n                        <img src={logo_src} alt=\"user-logo\" />\r\n\r\n                        <div> 매장명 : {userName}</div>\r\n                        <button onClick={this.onLogout.bind(this)}>로그아웃</button>\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-2\">\r\n                        <h4>호출 통계</h4>\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-3\">\r\n                        <h4>최근 주문</h4>\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-4\">\r\n                        <h4>뭐할까</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default User\r\n","import React, { Component } from 'react'\r\n\r\nexport class Authorized extends Component {\r\n    goLogin = () => {\r\n\r\n\r\n        document.location.href = '/login'\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"content authorized\">\r\n                <h1>권한이 필요합니다.</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item\">\r\n                    <h4>로그아웃 상태입니다. 로그인 후 다시 접속해주세요.</h4>\r\n                    <button onClick={this.goLogin.bind(this)}>로그인하러 가기</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Authorized\r\n","import React from 'react'\r\n\r\nfunction MapTile(props) {\r\n    const unit = props.unit;\r\n    const nodeId = props.data['node_id'];\r\n    const posX = (props.data['x']) * unit;\r\n    const posY = (props.data['y']) * unit;\r\n    const type = props.data['type'];\r\n    const mapUnitImgSrc = \"/assets/unit/map_unit_\" + type + \".jpg\";\r\n    return (\r\n        <div className=\"map-tile\" onClick={props.onClick} style={{ width: unit, height:unit, left:posX, top:posY}}>\r\n            <div className=\"map-tile-node-id\">{nodeId}</div>\r\n            <img src={mapUnitImgSrc} alt=\"\" className='map-tile-img' style={{ width: unit, height:unit}} />\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction MapRail(props) {\r\n    \r\n    const unit = props.unit;\r\n    const xytypeList = props.xytypeList;\r\n    const mapId = sessionStorage.getItem('mapId');\r\n    const mapBackgroundSrc = \"assets/map-background/map-background-\"+mapId+\".png\";\r\n    return (\r\n        <div>\r\n            {xytypeList.map(xytype => (\r\n                <MapTile unit={unit} data={xytype} key={xytype['node_id']} onClick={() => props.onClick(xytype['node_id'])}/>\r\n            ))}\r\n            <img src={mapBackgroundSrc} alt=\"map-background-img\" className=\"map-background-img\" />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MapRail\r\n","import React from 'react'\r\n\r\nfunction MapStatus({robot, onClick}) {\r\n    return (\r\n        <li className=\"pickup-button\" onClick={onClick}> \r\n            <span> {robot.robot_id}번 로봇</span>\r\n            <span> [ {robot.battery}% ]</span>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default MapStatus\r\n","import React from 'react'\r\n\r\nfunction MapMoving({robot}) {\r\n    if (robot.current_node == robot.final_node) return null;\r\n    return (\r\n        <li>\r\n            <span> {robot.robot_id}번 로봇</span>\r\n            <span> [ {robot.final_node} ]</span>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default MapMoving\r\n","import React, {useState, useEffect} from 'react'\r\n\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.10\r\n\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';     //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'\r\n\r\nfunction RobotItem(props) {\r\n    const statusColor = [\"gray\", \"green\", \"red\", \"orange\", \"yellow\", \"blue\"]\r\n    const colorString= statusColor[props.state];\r\n    const posX = (props.posX-(-0.3)) * props.unit; //-0.5\r\n    const posY = (props.posY-(-0.3)) * props.unit;\r\n    const robotId = props.robotId;\r\n    const robotSize = (props.unit*0.5)+'px';\r\n    const robotImgSrc = \"/assets/robot/num_robot_\" + robotId + \".png\";\r\n    return (\r\n        <div className=\"robot\" style={{ left: posX, top: posY, backgroundColor: colorString, height: robotSize, width: robotSize}}>\r\n            <img src={robotImgSrc} alt=\"num-robot-img\" className='num-robot-img'/>\r\n        </div>\r\n    )\r\n\r\n}\r\nfunction calcAngleDegrees(x, y) {   // 하나의 좌표와 원점사이의 arctan(degree각도) 계산\r\n    return Math.atan2(y, x) * 180 / Math.PI;\r\n}\r\n\r\nfunction TargetItem(props){\r\n\r\n    const ax = (props.currX-(-0.5)) * props.unit;\r\n    const ay = (props.currY-(-0.5)) * props.unit;\r\n    const bx = (props.finalX-(-0.5)) * props.unit;\r\n    const by = (props.finalY-(-0.5)) * props.unit;\r\n    // 선분의 중심은 두 점사이의 중심\r\n    const centerX = (ax+bx)/2;\r\n    const centerY = (ay+by)/2;\r\n\r\n  \r\n    // 선분의 길이는 두 점 사이의 길이 (width)\r\n    const size = Math.sqrt(Math.pow(ax-bx, 2) + Math.pow(ay-by,2));\r\n\r\n\r\n    // target -형태의 div 시작위치는 중점에서 길이의 반절만큼 왼쪽으로 가야함\r\n    const top = centerY;\r\n    const left = centerX - (size)/2;\r\n\r\n   \r\n    // 수평선으로부터 회전된 각도는 한 점이 원점이라고 할 때 arctan 값\r\n    const degree = calcAngleDegrees(ax-bx, ay-by);\r\n    const transformString = \"rotate(\"+degree.toString() + \"deg)\"\r\n    return (\r\n        <div className=\"target\" style={{ left: left, top: top, width: size, transform:transformString}}>\r\n        </div>\r\n    )\r\n    \r\n}\r\nfunction RobotPosition({unit, setRobotStatus}) {\r\n\r\n\r\n    // const unit = props.unit;\r\n    const [robotPositionList, setRobotPositionList] = useState([]);\r\n    // 덤프데이터..\r\n    const dumpRobotPosition =  [\r\n        {\r\n            map_id: 7, robot_id: 1, state: 2, current_node: 1, final_node: 18, battery:100,\r\n            curr_x: 9, curr_y: 2, final_x: 4, final_y: 2\r\n        },\r\n        {\r\n            map_id: 7, robot_id: 2, state: 2, current_node: 2, final_node: 2, battery:100,\r\n            curr_x: 10, curr_y: 2, final_x: 10, final_y: 2\r\n        },\r\n        {\r\n            map_id: 7, robot_id: 3, state: 2, current_node: 3, final_node: 3, battery:100,\r\n            curr_x: 11, curr_y: 2, final_x: 11, final_y: 2\r\n        }\r\n    ]\r\n\r\n    const mapId = sessionStorage.getItem('mapId');\r\n\r\n    function getRobotPosition() {\r\n        var interval = setInterval(() => {\r\n            console.log(\"[RobotPosition] get robot position\")\r\n            axios.get('/controller/robot/position/' + mapId)\r\n                .then((response) => {\r\n                    setRobotPositionList(response.data.robot_position);\r\n                    setRobotStatus(response.data.robot_position);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"call robot positions item fail.\");\r\n                    setRobotPositionList(dumpRobotPosition);\r\n                    clearInterval(interval);\r\n                    return interval;\r\n\r\n                })\r\n        }, 1000);\r\n        return interval\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const interval = getRobotPosition();\r\n        return () => clearInterval(interval);\r\n    }, [])\r\n    /* [robotPositionList] 쓰는 이유. (근데 쓰면 계속 불러오드람. 더 찾아보기.)\r\n    근데 여기서 새로고침을 하지 않으면 등록된 모습을 확인할 수 없다. 그 이유는 useEffect 함수의 두번째 인자로 빈 배열을 주면 처음 사이트에 들어갔을 1회만 렌더링이 되기 때문에 다시 값을 불러오지 않는다.\r\n    그래서 다음과 같이 수정해 주면 등록이 완료될 때 게시판이 업데이트 되는 모습을 확인할 수 있다.*/\r\n\r\n    //불러온 데이터가 존재 할 경우 curr_x: 11, curr_y: 2, final_x: 11, final_y: 2\r\n    if (robotPositionList.length > 0) {\r\n        return (\r\n            <div>\r\n                {robotPositionList.map(robot => (\r\n                    <RobotItem \r\n                    unit={unit} robotId={robot.robot_id} state={robot.state} posX={robot.curr_x} posY={robot.curr_y}\r\n                    key={robot.robot_id} />\r\n                ))}\r\n                {robotPositionList.filter(robot => robot.state == 1).map(frobot => (\r\n                    <TargetItem \r\n                    unit={unit} currX={frobot.curr_x} currY={frobot.curr_y} finalX={frobot.final_x} finalY={frobot.final_y}\r\n                    key={frobot.robot_id} />\r\n                ))}\r\n\r\n            </div>\r\n        )\r\n    }else {  // 조회 데이터 존재하지 않을 경우\r\n        console.log(\" robotPositionList.length <= 0 존재안함\")\r\n        return (\r\n            <div>\r\n                <button className=\"data-reload\" onClick={getRobotPosition}>데이터 로드</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    // return (\r\n    //     <div className=\"robot\" id={idString} style={{ left: posX, top: posY}}>\r\n    //         {/* {idString} */}\r\n    //     </div>\r\n    // )\r\n}\r\n\r\n\r\nexport default RobotPosition\r\n","import React from 'react';\r\nimport {createPortal} from 'react-dom';\r\n\r\n\r\n/*\r\nimport styled from 'styled-components';\r\n\r\nconst ModalBg = styled.div`\r\n  display: flex;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 9999;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-color: #ffffffe2;\r\n`;\r\n\r\nconst ModalBox = styled.div`\r\n  width: 25rem;\r\n  background-color: white;\r\n`;\r\n*/\r\n// const MODAL_STYLES = {\r\n//     position: 'fixed',\r\n//     top: '50%',\r\n//     left: '50%',\r\n//     transform: 'translate(-50%, -50%)',\r\n//     backgroundColor: '#FFF',\r\n//     padding: '2rem',\r\n//     width : '20%',\r\n//     height : '15%',\r\n//     zIndex: 1000\r\n//   }\r\n//   // style={OVERLAY_STYLES}\r\n//   // style={MODAL_STYLES}\r\n//   const OVERLAY_STYLES = {\r\n//     position: 'fixed',\r\n//   top: 0,\r\n//   left: 0,\r\n//   right: 0,\r\n//   bottom: 0,\r\n//   backgroundColor: 'rgba(0, 0, 0, .7)',\r\n//   zIndex: 1000\r\n// }\r\nfunction Modal({ title, content, open, onPermit, onCancel }) {\r\n  if (!open) return null;\r\n  return createPortal(\r\n    <div id=\"modal\">\r\n      <div className=\"overlay\" />\r\n      <div className=\"modal-box\">\r\n        <h3 className=\"modal-title\">{title}</h3>\r\n        <p className=\"modal-content\">{content}</p>\r\n        <div className=\"button-div\">\r\n          <button onClick={onPermit}>확인</button>\r\n          <button onClick={onCancel}>취소</button>\r\n        </div>\r\n      </div>\r\n    </div>,\r\n    document.getElementById('modal')\r\n\r\n  )\r\n}\r\n/*\r\nfunction Modal({ setModalShow }) {\r\n    const handleOk = () => {\r\n        console.log('댓글 삭제');\r\n      };\r\n    return createPortal(\r\n        <div className=\"ModalBg\">\r\n        <div className= 'ModalBox'>\r\n          <h2>댓글 삭제</h2>\r\n          <div>댓글을 정말로 삭제하시겠습니까?</div>\r\n          <div>\r\n            <button cancel onClick={() => setModalShow(false)}>\r\n              취소\r\n            </button>\r\n            <button onClick={() => handleOk()}>확인</button>\r\n          </div>\r\n        </div>\r\n      </div>,\r\n      document.getElementById('modal')\r\n    )\r\n}\r\n*/\r\nexport default Modal\r\n","import axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\nexport async function getDestinationRobot(userId, destinationNode) {    // map화면에서 목적지 node를 눌렀을 때, 픽업대의(1번) 로봇을 보내는 함수\r\n\r\n    try {\r\n        const response = await axios.get('/controller/button/to-destination/' + userId);  // button mqtt post를 위한 정보 얻기 : robot id, map name, (final node =destinationNode)\r\n        let error = response.data.error; \r\n        console.log(\"[CallController] getDestinationRobot to-destination 결과 ->\");\r\n        console.log(response);\r\n\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            // alert(response.data.message);\r\n            console.log(response.data.message)\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            let robotId = response.data.robot_id;\r\n            let mapName = response.data.map_name;\r\n            let postError = postButton([destinationNode, mapName, robotId]);\r\n            return [postError, robotId];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[CallController] getDestinationRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\nexport async function getPickupRobot(userId, robotId) {    // map화면에서 로봇버튼을 눌렀을 때, 해당 번호의 로봇을 픽업대의(1번)로 보내는 함수\r\n\r\n    try {\r\n        const response = await axios.get('/controller/button/to-pickup/' + userId + \"/\" + robotId);  // button mqtt post를 위한 정보 얻기 : map name\r\n        let error = response.data.error;\r\n        console.log(\"[CallController] getPickupRobot to-pickup 결과 ->\");\r\n        console.log(response);\r\n\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            // alert(response.data.message);\r\n            console.log(response.data.message)\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            let mapName = response.data.map_name;\r\n            let postError = postButton([1, mapName, robotId]);\r\n            return [postError, response.status];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[CallController] getPickupRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\n\r\nexport async function getBackRobot(userId) {    // '픽업대'버튼 눌렀을 때 로봇을 home으로 보냄\r\n\r\n    try {\r\n        const response = await axios.get('/controller/button/to-home/' + userId);  // button mqtt post를 위한 정보 얻기\r\n        let error = response.data.error;\r\n        console.log(\"[CallController] getBackRobot to-home 결과 ->\");\r\n        console.log(response);\r\n\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            // alert(response.data.message);\r\n            console.log(response.data.message)\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            let robotId = response.data.robot_id;\r\n            let robotHome = response.data.robot_home;\r\n            let mapName = response.data.map_name;\r\n            let postError = postButton([robotHome, mapName, robotId]);\r\n            return [postError, robotId];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[CallController] getBackRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\nexport async function getCallRobot(userId) {    // 호출 버튼을 눌러 쉬고있는 로봇 하나를 user의 위치로 오도록 명령을 내린다.\r\n\r\n\r\n    // [안전장치1] 조금의 버퍼링으로 로봇을 2번 호출하면 안됨.\r\n    try {\r\n        axios.get('/controller/button/robot-updated/' + userId)  // 최근 로봇 수정이 1초안에 있었다면 기달\r\n            .then((response) => {\r\n                console.log(\"[CallController] getCallRobot - robot-updated  결과 ->\");\r\n                console.log(response);\r\n                if (response.data.result.length) {  // 1초내 변경된 로봇의 결과가 1개 이상이라면\r\n                    var message = \"[CallController] getCallRobot - update in 3 second. please wait\";\r\n                    return [true, message];\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"[CallController] getCallRobot - robot-updated  fail get robot updated.\");\r\n                console.log(error);\r\n                return [error, response.data.message];\r\n            })\r\n        // [안전장치2] 조금의 버퍼링으로 로봇을 2번 호출하면 안됨.\r\n\r\n        axios.get('/controller/button/is-call/' + userId)  // 어떤 로봇이 오고있다면 반환\r\n            .then((response) => {\r\n                console.log(\"[CallController] getCallRobot - is call 결과 ->\");\r\n                console.log(response);\r\n                if (response.status == 201) {\r\n                    var message = \"[CallController] getCallRobot - some robot is coming\";\r\n                    return [true, message];\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"[CallController] getCallRobot - fail  get is call status.\");\r\n                console.log(error);\r\n                return [error, response.data.message];\r\n            })\r\n\r\n\r\n\r\n        const response = await axios.get('/controller/button/to-user/' + userId);\r\n        let error = response.data.error;\r\n        console.log(\"[CallController] getCallRobot - to-user  결과 ->\");\r\n        console.log(response);\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            console.log(response.data.message);\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            let robotId = response.data.robot_id;\r\n            let userNode = response.data.user_node;\r\n            let mapName = response.data.map_name;\r\n            let postError = postButton([userNode, mapName, robotId]);\r\n            return [postError, robotId];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[CallController] getCallRobot 호출 가능한 로봇이 없습니다. 기다려주세요.\\n\" + e.message);\r\n        return [true, e.message]\r\n    }\r\n}\r\nfunction postButton(params) {\r\n    console.log(\"[CallController] postButton param \", params);\r\n    try {\r\n        const response = axios({\r\n            method: 'post',\r\n            url: '/mqtt/button',\r\n            data: {\r\n                final_node: params[0],\r\n                map_name: params[1],\r\n                robot_id: params[2]\r\n            }\r\n        });\r\n        console.log(\"[CallController] postButton   결과 ->\");\r\n        console.log(response);\r\n        return false;\r\n\r\n    } catch (e) {\r\n        console.log(\"[CallController] postButton button 정보를 로봇으로 보내는데 실패했습니다.\\n\" + e.message);\r\n        return [true, e.message]\r\n    }\r\n\r\n}","import axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\nexport async function getMapView() {    // map화면에서 목적지 node를 눌렀을 때, 픽업대의(1번) 로봇을 보내는 함수\r\n    \r\n    const mapId = sessionStorage.getItem('mapId');\r\n    try {\r\n        const response = await axios.get('/map-views/'+mapId);  // 해당 map id의 map view얻기\r\n        \r\n        if (response.status == 200) { \r\n            return [false, response.data]\r\n        }\r\n        else {\r\n        // console.log(\"[MapController] getMapView server error.\\n\");\r\n        return [response.data.error, response.data.message];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[MapController] getMapView error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport MapRail from './MapRail';\r\nimport MapStatus from './MapStatus';\r\nimport MapMoving from './MapMoving';\r\nimport RobotPosition from './RobotPosition';\r\nimport Modal from './../Modal/Modal';\r\nimport {createPortal} from 'react-dom';\r\nimport {getDestinationRobot, getPickupRobot} from '../Call/CallController';\r\nimport {getMapView} from './MapController';\r\n\r\nexport class MapPresenter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.mapContainer = React.createRef()\r\n        this.state = { unit: 0,\r\n            isModalOpen:false,\r\n            destinationNode:0,\r\n            clickedRobotId:0,\r\n            robotStatus:[],\r\n            modalTitle:\"제목\",\r\n            modalContent: \"내용\",\r\n            mapView : \r\n            [\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"0\",\r\n                    \"x\": \"14\",\r\n                    \"y\": \"7\",\r\n                    \"type\": \"0\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"1\",\r\n                    \"x\": \"11\",\r\n                    \"y\": \"2\",\r\n                    \"type\": \"6\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"2\",\r\n                    \"x\": \"12\",\r\n                    \"y\": \"2\",\r\n                    \"type\": \"12\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"3\",\r\n                    \"x\": \"13\",\r\n                    \"y\": \"2\",\r\n                    \"type\": \"10\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"4\",\r\n                    \"x\": \"13\",\r\n                    \"y\": \"1\",\r\n                    \"type\": \"9\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"5\",\r\n                    \"x\": \"12\",\r\n                    \"y\": \"1\",\r\n                    \"type\": \"12\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"6\",\r\n                    \"x\": \"11\",\r\n                    \"y\": \"1\",\r\n                    \"type\": \"12\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"7\",\r\n                    \"x\": \"10\",\r\n                    \"y\": \"1\",\r\n                    \"type\": \"13\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"8\",\r\n                    \"x\": \"9\",\r\n                    \"y\": \"1\",\r\n                    \"type\": \"12\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"9\",\r\n                    \"x\": \"8\",\r\n                    \"y\": \"1\",\r\n                    \"type\": \"12\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"10\",\r\n                    \"x\": \"7\",\r\n                    \"y\": \"1\",\r\n                    \"type\": \"12\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"11\",\r\n                    \"x\": \"6\",\r\n                    \"y\": \"1\",\r\n                    \"type\": \"13\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"12\",\r\n                    \"x\": \"5\",\r\n                    \"y\": \"1\",\r\n                    \"type\": \"12\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"13\",\r\n                    \"x\": \"4\",\r\n                    \"y\": \"1\",\r\n                    \"type\": \"12\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"14\",\r\n                    \"x\": \"3\",\r\n                    \"y\": \"1\",\r\n                    \"type\": \"5\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"15\",\r\n                    \"x\": \"3\",\r\n                    \"y\": \"2\",\r\n                    \"type\": \"3\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"16\",\r\n                    \"x\": \"3\",\r\n                    \"y\": \"3\",\r\n                    \"type\": \"3\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"17\",\r\n                    \"x\": \"3\",\r\n                    \"y\": \"4\",\r\n                    \"type\": \"2\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"18\",\r\n                    \"x\": \"6\",\r\n                    \"y\": \"2\",\r\n                    \"type\": \"3\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"19\",\r\n                    \"x\": \"6\",\r\n                    \"y\": \"3\",\r\n                    \"type\": \"2\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"20\",\r\n                    \"x\": \"10\",\r\n                    \"y\": \"2\",\r\n                    \"type\": \"3\"\r\n                },\r\n                {\r\n                    \"map_id\": \"8\",\r\n                    \"node_id\": \"21\",\r\n                    \"x\": \"10\",\r\n                    \"y\": \"3\",\r\n                    \"type\": \"2\"\r\n                }\r\n            ]\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        var maxXsize = 11;\r\n        let [error, result] = await getMapView();\r\n        if (error) {\r\n            console.log(\"[MapController] \"+result);\r\n            return;\r\n        }\r\n        else {\r\n            // console.log(result);\r\n            maxXsize=Number(result[0]['x'])+1;\r\n            // console.log(maxXsize);\r\n        }\r\n        const size = this.mapContainer.current.offsetWidth;  //mapContainer 컨테이너의 가로길이 측정\r\n        // this.setState({unit: size/maxXsize});    //MAX X 의 개수로 나눔\r\n        console.log(\"[MapController] maxXsize : \"+maxXsize);\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            unit: size/maxXsize,\r\n            mapView: result\r\n        }))\r\n        //절대 위치 구하기\r\n        \r\n        // const target = document.getElementById('item-map'); // 요소의 id 값이 target이라 가정\r\n        // const clientRect = target.getBoundingClientRect(); // DomRect 구하기 (각종 좌표값이 들어있는 객체)\r\n        // const relativeTop = clientRect.top; // Viewport의 시작지점을 기준으로한 상대좌표 Y 값.\r\n        // const mapContainer = document.getElementById('item-map');\r\n        \r\n    }\r\n    setRobotStatus(props){\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            robotStatus: props\r\n        }))\r\n    }\r\n    handelRobotClick(i){\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isModalOpen: \"robot\",\r\n            clickedRobotId: i,\r\n            modalTitle: \"로봇 복귀\",\r\n            modalContent: i+\"번 로봇을 주차장으로 복귀시키겠습니까?\"\r\n        }))\r\n        // nothing do\r\n        console.log(\"map modal click! \"+i);\r\n    }\r\n    handelMapClick(i){\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isModalOpen: \"map\",\r\n            destinationNode: i,\r\n            modalTitle: \"로봇 보내기\",\r\n            modalContent: i+\"번 위치로 로봇을 보내겠습니까?\"\r\n        }))\r\n        // nothing do\r\n        console.log(\"map modal click! \"+i);\r\n    }\r\n    async clickRobotModalPermit(userId){\r\n        const clickedRobotId = this.state.clickedRobotId;\r\n\r\n        let [error, message] = await getPickupRobot(userId, clickedRobotId);\r\n        if (!error) {\r\n            console.log(\"[MapPresenter] getPickupRobot success : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false,\r\n                clickedRobotId: 0\r\n            }))\r\n        }\r\n        else {\r\n            console.log(\"[MapPresenter] getPickupRobot fail  : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false\r\n            }))\r\n        }\r\n    }\r\n    async clickMapModalPermit(userId){\r\n        const destinationNode = this.state.destinationNode;\r\n\r\n        let [error, message] = await getDestinationRobot(userId, destinationNode);\r\n        if (!error) {\r\n            console.log(\"[MapPresenter] getDestinationRobot success : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false,\r\n                destinationNode: 0\r\n            }))\r\n        }\r\n        else {\r\n            console.log(\"[MapPresenter] getDestinationRobot fail  : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false\r\n            }))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        \r\n        \r\n        const userId = sessionStorage.getItem('userId');\r\n        const isModalOpen = this.state.isModalOpen;\r\n        const robotStatus = this.state.robotStatus;\r\n        const unit= this.state.unit;\r\n        return (\r\n            <div className=\"content\" id=\"map\">\r\n                <h1 > 실시간 로봇위치</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item\" id=\"item-map\">\r\n                        실시간 로봇위치 페이지입니다\r\n                        <div>\r\n                            <span style={{ color: \"green\" }}>_ moving _</span>\r\n                            <span style={{ color: \"red\" }}>_ stop _</span>\r\n                            <span style={{ color: \"orange\" }}>_ charging _</span>\r\n                            <span style={{ color: \"gray\" }}>_ not server _</span>\r\n                            <span style={{ color: \"black\" }}>_ etc _</span>\r\n                        </div>\r\n                        <div>_</div>\r\n                        <div ref={this.mapContainer} id=\"map-container\">\r\n                            <RobotPosition unit={unit} setRobotStatus={p => this.setRobotStatus(p)}/>\r\n                            <MapRail xytypeList={this.state.mapView} unit={unit} onClick={i=>this.handelMapClick(i)}/>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-status\">\r\n                        <h4>로봇 상태</h4>\r\n                        <div>\r\n                            <ul>\r\n                                {robotStatus.map(robot => (\r\n                                    <MapStatus robot={robot} key={robot.robot_id}  onClick={() => this.handelRobotClick(robot.robot_id)}/>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-live\">\r\n                        <h4> 도착 지점 목록</h4>\r\n                        <div>\r\n                            <ul>\r\n                                {robotStatus.map(robot => (\r\n                                    <MapMoving robot={robot} key={robot.robot_id} />\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Modal title={this.state.modalTitle} content={this.state.modalContent} open={isModalOpen} onCancel={() => this.setState(prevState => ({ isModalOpen: false }))}\r\n                    onPermit={isModalOpen == \"map\" ? () =>this.clickMapModalPermit(userId) : () =>this.clickRobotModalPermit(userId)}>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MapPresenter\r\n","import React, {useState, useEffect} from 'react'\r\n// import {GetRobotStatus} from './CallController';\r\nimport './../../assets/style.css';\r\n\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.10\r\n\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\n// -- 로봇 status 하나의 항목\r\nfunction RobotStatus({robot}){\r\n    return (\r\n        <li>\r\n            <span> {robot.robot_id}</span>\r\n            <span> - {robot.used == '0' ? \"대기\" : robot.used}</span> \r\n            <span> [ {robot.battery}% ]</span>\r\n        </li>\r\n    )\r\n}\r\n\r\n// -- 로봇 status 리스트에 필요한 작업(list)\r\nfunction CallStatus() {\r\n    const [robotStatusList, setRobotStatusList] = useState([]);\r\n\r\n    const mapId = sessionStorage.getItem('mapId');\r\n\r\n    function getRobotStatus(){\r\n        axios.get('/controller/robot/status/'+mapId)\r\n        .then((response)=>{\r\n            setRobotStatusList(response.data.robot_status);            \r\n        })\r\n        .catch((error) => {\r\n            console.log(\"call robot status item fail.\");\r\n        })\r\n    }\r\n    function countNotUsed(){\r\n        // console.log(\" lenghtheth : \");\r\n        const count = robotStatusList.filter(robot => robot.used === \"0\");  //아무도 사용중이지 않은 로봇 ('0')의 수 계산\r\n        return count.length;\r\n        // if (robotStatusList.length > 0) {\r\n        //     const count = robotStatusList.filter(robot => robot.used === \"0\");\r\n        //     return count.length;\r\n        // }s\r\n        // else {\r\n        //     return 0;\r\n        // }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRobotStatus();\r\n    }, [robotStatusList])\r\n    /* [robotStatusList] 쓰는 이유. (근데 쓰면 계속 불러오드람. 더 찾아보기.)\r\n    근데 여기서 새로고침을 하지 않으면 등록된 모습을 확인할 수 없다. 그 이유는 useEffect 함수의 두번째 인자로 빈 배열을 주면 처음 사이트에 들어갔을 1회만 렌더링이 되기 때문에 다시 값을 불러오지 않는다.\r\n그래서 다음과 같이 수정해 주면 등록이 완료될 때 게시판이 업데이트 되는 모습을 확인할 수 있다.*/\r\n    //불러온 데이터가 존재 할 경우\r\n    if (robotStatusList.length > 0) {\r\n        return (\r\n            <div className=\"grid-container call-status\">\r\n                <div className=\"grid-item\" id=\"item-available\">\r\n                    <h4>호출가능 로봇 수</h4>\r\n                    <div>{countNotUsed()}</div>\r\n                </div>\r\n                <div className=\"grid-item item-state\">\r\n                    <h4>로봇 상태</h4>\r\n                    <div>\r\n                        <ul>\r\n                            {robotStatusList.map(robot => (\r\n                                <RobotStatus robot={robot} key={robot.robot_id} />\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    else {  // 조회 데이터 존재하지 않을 경우\r\n        console.log(\" robotStatusList.length <= 0 존재안함\")\r\n        return (\r\n            <div className=\"grid-container call-status\">\r\n                <div className=\"grid-item\" id=\"item-available\">\r\n                    <h4>호출가능 로봇 수</h4>\r\n                    <div>0</div>\r\n                </div>\r\n                <div className=\"grid-item item-state\">\r\n                    <h4>로봇 상태</h4>\r\n                    <div>\r\n                        <button className=\"data-reload\" onClick={getRobotStatus}>데이터 로드</button>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CallStatus\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';     //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'\r\n\r\nfunction CallButton(props) {\r\n    const userId = sessionStorage.getItem('userId');\r\n    var responseStatus = 0;\r\n    // const countRef = useRef(0);\r\n\r\n    function getIsCall() {\r\n        var call = 1;\r\n        var count = 0;\r\n        props.updateLoading(1); //3초동안 load할 때 버튼누르지 않도록 설정\r\n\r\n        var interval = setInterval(() => {\r\n\r\n            axios.get('/controller/button/is-call/' + userId)\r\n                .then((response) => {\r\n\r\n                    responseStatus = response.status\r\n                    switch (responseStatus) {\r\n                        case 201:\r\n                            console.log(\"[CallButton] 현재 매장의 로봇 이동중 : \" + responseStatus);\r\n                            props.updateCalledRobot(response.data.robot_id);\r\n                            props.updateIsCall(1);\r\n                            call = 1;\r\n                            // setIsCall(1);\r\n                            break;\r\n                        case 202:\r\n                            console.log(\"[CallButton] 현재 매장의 로봇 도착 : \" + responseStatus);\r\n                            props.updateCalledRobot(response.data.robot_id);\r\n                            props.updateIsCall(2);\r\n                            call = 2;\r\n\r\n                            // setIsCall(2);\r\n                            break;\r\n                        case 200:\r\n                            console.log(\"[CallButton] 현재 매장의 로봇 호출안함 : \" + responseStatus);\r\n                            props.updateIsCall(0);\r\n                            call = 0;\r\n\r\n                            // setIsCall(0);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    // return 1;\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"[CallButton] fail  get is-call button. error ->\");\r\n                    console.log(error);\r\n                    clearInterval(interval);\r\n\r\n                    return 0;\r\n                })\r\n            if (call != 1 && count >= 3) {       // 로봇이 오는중이 아니고 3번의 로드 후\r\n                console.log(\"[CallButton] 로드 종료 \");\r\n                props.updateLoading(0); //3초 로딩 후 버튼 허가\r\n                clearInterval(interval);\r\n            }\r\n            count += 1;\r\n        }, 1000);\r\n        return;\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        getIsCall();\r\n    }, [props.isCall])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <button id=\"call-button\" onClick={props.onClick}>\r\n                {props.isCall == 0 ? \"호출\" :\r\n                    props.isCall == 2 ? \"픽업대\" : \"오는중\"}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CallButton\r\n","import React, { Component } from 'react';\r\nimport CallStatus from './CallStatus';\r\nimport {getBackRobot, getCallRobot, getIsCall} from './CallController';\r\nimport CallButton from './CallButton';\r\nexport class CallPresenter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            isCall: 0,\r\n            calledRobot: 0,\r\n            count: 2,\r\n            loading: 1\r\n        };\r\n\r\n    }\r\n    updateIsCall(input) {\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isCall: input\r\n        }))\r\n\r\n    }\r\n    updateLoading(input) {\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            loading: input\r\n        }))\r\n\r\n    }\r\n    updateCalledRobot(input) {\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            calledRobot: input\r\n        }))\r\n\r\n    }\r\n    async toggle(userId) {\r\n        const isCall = this.state.isCall;\r\n        const count = this.state.count;\r\n        console.log(\"[CallPresenter] 버튼 클릭. 버튼상태: \" + isCall)\r\n        if (this.state.loading) {\r\n            console.log(\"[CallPresenter] loading...\");\r\n            return;\r\n        } else {\r\n            this.updateLoading(1);  //연속클릭 못하고 처리 후 클릭하도록 잠금\r\n        }\r\n\r\n        switch (isCall) {\r\n            case 2:     // 매장에 로봇이 도착한 상태. 픽업대 버튼을 누를때 시행되는 상황\r\n                let [error, message] = await getBackRobot(userId);\r\n                if (!error) {\r\n                    console.log(\"[CallPresenter] toggle back, robot_id : \", message);\r\n                    this.setState(prevState => ({\r\n                        ...prevState,\r\n                        isCall: 0,\r\n                        count: count + 1     //실제 로봇수 아님, 임시 테스트용\r\n                    }))\r\n                }\r\n                else {\r\n                    console.log(\"[CallPresenter] toggle back, error  : \", message);\r\n\r\n                    // alert(message);\r\n                }\r\n                break;\r\n            case 0:     // 로봇이 home에 있는 상태. 호출 버튼을 누를때 시행되는 상황\r\n                let [error2, message2] = await getCallRobot(userId);\r\n                if (!error2) {\r\n                    console.log(\"[CallPresenter] toggle call, robot_id : \", error2);\r\n                    this.setState(prevState => ({\r\n                        ...prevState,\r\n                        isCall: 1,\r\n                        count: count - 1,\r\n                    }))\r\n                }\r\n                else {\r\n                    console.log(\"[CallPresenter] toggle call, error  : \", message2);\r\n                    // alert(message2);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.updateLoading(0);  // 처리 후 잠금 푼다.\r\n\r\n    }\r\n\r\n    render() {\r\n        const userId = sessionStorage.getItem('userId');\r\n        const isCall = this.state.isCall;\r\n\r\n        return (\r\n            <div className=\"content\" id=\"call\">\r\n                <h1 > 로봇 호출</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item\" id=\"item-button\">\r\n                        <h4>로봇 호출 버튼</h4>\r\n                        <div id=\"calling-map-name\">\r\n                            {userId}의 매장 입니다.\r\n                        </div>\r\n                        <div id=\"called-robot\">\r\n                            {isCall != 0 ?\r\n                                <div><span>{this.state.calledRobot}</span> 번 로봇 배정 </div>  //state에서 직접 불러옴. render위에서 부르면 왜인지 object뜸\r\n                                :\r\n                                <div> </div>\r\n                            }\r\n\r\n                        </div>\r\n                        {/* <button id=\"call-button\" onClick={this.toggle.bind(this, userId, mapId, userName)}>\r\n                {isCall? \"픽업대\" : \"호출\"} updateCalledRobot\r\n            </button> */}\r\n                        <CallButton userId={userId} isCall={isCall} onClick={() => this.toggle(userId)}\r\n                            updateIsCall={(input) => this.updateIsCall(input)} updateCalledRobot={(input) => this.updateCalledRobot(input)} updateLoading={(input) => this.updateLoading(input)} />\r\n                    </div>\r\n                    <div className=\"item-call-status\">\r\n                        <CallStatus />\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CallPresenter\r\n","import React, { Component } from 'react';\r\nimport Modal from './../Modal/Modal';\r\nconst BUTTON_WRAPPER_STYLES = {\r\n    position: 'relative',\r\n    zIndex: 1\r\n  }\r\n  \r\n\r\nexport class SettingPresenter extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            isModalOpen: false\r\n        };\r\n    }\r\n    onLogout = () => {\r\n        window.sessionStorage.removeItem('userId');\r\n        window.sessionStorage.removeItem('mapId');\r\n        window.sessionStorage.removeItem('userName');\r\n        window.sessionStorage.removeItem('logoSrc');\r\n\r\n        document.location.href = '/'\r\n        \r\n    }\r\n    render() {\r\n        const isModalOpen = this.state.isModalOpen;\r\n        console.log(\"[Setting presenter] username\");\r\n        console.log(sessionStorage.getItem('userName'));\r\n        return (\r\n            <div className=\"content setting\">\r\n                <h1>설정</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item\">\r\n                    설정 페이지입니다\r\n                    <button onClick={this.onLogout.bind(this)}>로그아웃</button>\r\n                        <div style={BUTTON_WRAPPER_STYLES} onClick={() => console.log('clicked')}>\r\n                            <button onClick={() => this.setState(prevState => ({isModalOpen:true }))}>Open Modal</button>\r\n\r\n                            <Modal title=\"제목\" content = \"내용22\" open={isModalOpen} onCancel={() => this.setState(prevState => ({isModalOpen:false }))}\r\n                            onPermit={() => this.setState(prevState => ({isModalOpen:false }))}>\r\n                            </Modal>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SettingPresenter\r\n","import React, { Component } from 'react'\r\nimport Box from '@material-ui/core/Box';\r\n\r\nexport class HistoryPresenter extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"content history\">\r\n                <h1 > 기록</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item\">\r\n                        기록 페이지입니다\r\n                        <Box bgcolor=\"primary.main\" p={2} m={1}>primary.main</Box>\r\n                        <Box bgcolor=\"primary.light\" sx={{ borderRadius: 25 }} color=\"primary.contrastText\" p={2} m={1}>primary.light</Box>\r\n                        <Box bgcolor=\"primary.dark\" color=\"primary.contrastText\" p={2} m={1}>primary.dark</Box>\r\n                        <Box bgcolor=\"secondary.main\" p={2} m={1}>secondary.main</Box>\r\n                        <Box bgcolor=\"secondary.light\" color=\"secondary.contrastText\" p={2} m={1}>secondary.light</Box>\r\n                        <Box bgcolor=\"secondary.dark\" color=\"secondary.contrastText\" p={2} m={1}>secondary.dark</Box>\r\n                        <Box bgcolor=\"error.main\" p={2} m={1}>error.main</Box>\r\n                        <Box bgcolor=\"error.light\" color=\"error.contrastText\" p={2} m={1}>error.light</Box>\r\n                        <Box bgcolor=\"error.dark\" color=\"error.contrastText\" p={2} m={1}>error.dark</Box>\r\n                        <Box bgcolor=\"sidenav.main\" p={2} m={1}>error.main</Box>\r\n                        <Box bgcolor=\"sidenav.background\" color=\"neutral.contrastText\" p={2} m={1}>error.light</Box>\r\n                        <Box bgcolor=\"sidenav.text\" color=\"neutral.contrastText\" p={2} m={1}>error.dark</Box>\r\n                        <Box bgcolor=\"text.primary\" p={2} m={1}>text.primary</Box>\r\n                        <Box bgcolor=\"text.secondary\" p={2} m={1}>text.secondary</Box>\r\n                        <Box bgcolor=\"text.disabled\" p={2} m={1}>text.disabled</Box>\r\n                        <Box bgcolor=\"text.hint\" p={2} m={1}>text.hint</Box>\r\n                        <Box bgcolor=\"text.myTextColor\" p={2} m={1}>text.myTextColor</Box>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HistoryPresenter\r\n","import React from 'react'\r\n\r\nfunction PickupContent({ pickup }) {\r\n    const isNull = pickup.phone === \"\";\r\n    return (\r\n        <li className=\"pickup-item\">\r\n            <div className=\"pickup-number\"> {pickup.id}</div>\r\n            <div className=\"pickup-store\"> {pickup.store}</div>\r\n            <div className=\"pickup-status\">\r\n                {isNull ?\r\n                    <div> 비어있음</div>\r\n                    :\r\n                    <div>\r\n                        <div> 배달 주소 : {pickup.delivery}</div>\r\n                        <div> 연락처 : {pickup.phone}</div>\r\n                        <div> 대기시간 : {pickup.delay}</div>\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nfunction PickupItem({pickupList}) {\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {pickupList.map(pickupItem => (\r\n                    <PickupContent pickup={pickupItem} key={pickupList.id}/>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PickupItem\r\n","import React, { Component } from 'react'\r\nimport PickupItem from './PickupItem'\r\nexport class PickupPresenter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            pickupList : [\r\n                {id:1, store:\"대기\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"\", delay:0},\r\n                {id:2, store:\"맥도날드\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"1234\", delay:4},\r\n                {id:3, store:\"버거킹\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"1433\", delay:15},\r\n                {id:4, store:\"맘스터치\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"1134\", delay:3},\r\n                {id:5, store:\"대기\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"\", delay:0},\r\n                {id:6, store:\"롯데리아\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"1424\", delay:2}\r\n            ]\r\n        }\r\n        // this.toggle = this.toggle.bind(this);\r\n\r\n    }\r\n    render() {\r\n        const pickupList = this.state.pickupList\r\n        return (\r\n            <div className=\"content\" id=\"pickup\">\r\n                <h1> 픽업대 현황</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item\" id=\"item-pickup-list\">\r\n                    <PickupItem pickupList={pickupList}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PickupPresenter\r\n","import React, { useEffect, useState } from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\n// import './SideNav.css';\r\nimport './../../assets/style.css';\r\nimport {AiOutlineArrowLeft, AiOutlineRobot, AiOutlineHistory, AiOutlineSetting, AiOutlineUser} from 'react-icons/ai'\r\nimport {FaEquals,FaMapMarkerAlt, FaParking} from 'react-icons/fa'\r\n\r\nfunction SideNavPresenter({isAuthorized}) {\r\n    const menus = [\r\n        { name: \"실시간 로봇위치\", path: \"/map\", iconClassName: \"bi bi-speedometer2\"},\r\n        { name: \"로봇 호출\", path: \"/call\", iconClassName: \"FaRobot\" },\r\n        { name: \"픽업대 상황\", path: \"/pickup\", iconClassName: \"bi bi-speedometer2\" },\r\n        { name: \"기록\", path: \"/history\", iconClassName: \"bi bi-speedometer2\" },\r\n        { name: \"설정\", path: \"/setting\", iconClassName: \"bi bi-speedometer2\" }\r\n\r\n    ];\r\n    const [isFullNav, setIsFullNav] = useState(true);\r\n\r\n    const dbLogoSrc = sessionStorage.getItem('logoSrc');\r\n    const logo_src = '/assets/store_logo/' + dbLogoSrc + '.png';\r\n    // const logo_src = '/assets/store_logo/the_people_burger/the_people_burger_logo.png'\r\n\r\n    return (\r\n        <div id=\"side-nav\" className={\"side-nav \"+(isFullNav ? \"big-nav\" : \"small-nav\")}>\r\n            <div id=\"title\">\r\n                <div onClick={() => setIsFullNav(!isFullNav)} className=\"toggle-menu-btn\">\r\n                    {isFullNav ? (\r\n                        <AiOutlineArrowLeft />\r\n                    ) : (\r\n                        <FaEquals />\r\n                    )}\r\n                </div>\r\n                <img src={\"/assets/hprobot-logo/hprobot-logo-white-2line.png\"} alt=\"hprobot-logo\" />\r\n                {/* <img src={require(\"../../assets/simbol.png\").default} alt=\"hprobot\" /> */}\r\n                <div>Helper Robotics</div>\r\n\r\n            </div>\r\n            {/* {menus.map((menu, idx) => {\r\n                return (\r\n                    <NavLink to={menu.path} key={idx} className=\"nav-item\" activeClassName=\"nav-active\">\r\n                        {menu.name}\r\n                    </NavLink>\r\n                );\r\n            })} */}\r\n            <NavLink to=\"/map\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <div className=\"nav-icon\"><FaMapMarkerAlt /></div>\r\n                <p>실시간 로봇위치</p>\r\n            </NavLink>\r\n            <NavLink to=\"/call\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <div className=\"nav-icon\"><AiOutlineRobot /></div>\r\n                <p>로봇 호출</p>\r\n            </NavLink>\r\n            <NavLink to=\"/pickup\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <div className=\"nav-icon\"><FaParking /></div>\r\n                <p>픽업대 상황</p>\r\n            </NavLink>\r\n            <NavLink to=\"/history\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <div className=\"nav-icon\"><AiOutlineHistory /></div>\r\n                <p>기록</p>\r\n            </NavLink>\r\n            <NavLink to=\"/setting\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <div className=\"nav-icon\"><AiOutlineSetting /></div>\r\n                <p>설정</p>\r\n            </NavLink>\r\n\r\n            {isAuthorized ?\r\n\r\n                <NavLink to='/my-page' id=\"nav-user\">\r\n                        {/* <img src={require('/assets/store_logo/the_people_burger/the_people_burger_logo.png').default} alt=\"logo\" /> */}\r\n                        <img src={logo_src} alt=\"user-logo\" />\r\n\r\n                {/* userid로 user img url 불러오기 */}\r\n                    <p>{sessionStorage.getItem('userName')} 매장</p>\r\n                </NavLink>\r\n                :\r\n\r\n            <NavLink to='/login' id=\"nav-login\">\r\n                <div className=\"nav-icon\"><AiOutlineUser /></div>\r\n\r\n            <p>로그인</p>\r\n        </NavLink>\r\n        \r\n        }\r\n            \r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SideNavPresenter;\r\n","import './App.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Login from './component/User/Login';\r\nimport User from './component/User/User';\r\nimport Authorized from './component/User/Authorized';\r\nimport Map from './component/Map/MapPresenter';\r\nimport Call from './component/Call/CallPresenter';\r\nimport Setting from './component/Setting/SettingPresenter';\r\nimport History from './component/History/HistoryPresenter';\r\nimport Pickup from './component/Pickup/PickupPresenter';\r\nimport SideNav from './component/SideNav/SideNavPresenter';\r\nimport {  BrowserRouter as Router,  Route,  Redirect,  Switch} from 'react-router-dom';\r\nimport { createTheme }  from '@material-ui/core/styles'\r\nimport {createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\n\r\nfunction App() {\r\n\r\n  //로그인 상태 관리\r\n  const [isAuthorized, setIsAuthorized] = useState(false) //로그인 상태. 기본 false\r\n\r\n  useEffect(() => {\r\n    const user = sessionStorage.getItem('mapId')\r\n    if (user == null) {\r\n      // sessionStorage 에 user_id 라는 key 값으로 저장된 값이 없다면\r\n      // alert('isLogin ?? no:: ' + isAuthorized)\r\n    } else {\r\n      // sessionStorage 에 user_id 라는 key 값으로 저장된 값이 있다면\r\n      // 로그인 상태 변경\r\n      setIsAuthorized(true)\r\n      // alert('isLogin ?? yes:: map ' + user)\r\n    }\r\n  })\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#688ABD', //로그인 버튼, 테두리 색상\r\n      light: \"#ff0000\",\r\n      dark: \"#0000ff\"\r\n    },\r\n    secondary: {\r\n      main: '#446AA3', // item의 title 색상\r\n      // light: \"#446AA3\",\r\n      // dark: \"#446AA3\"\r\n    },\r\n    error: {\r\n      main: '#6B9ED9', // 모달 색상\r\n      // light: \"#6B9ED9\",\r\n      // dark: \"#6B9ED9\"\r\n    },\r\n    sidenav: {    // 사이드바 색상\r\n      main: '#446AA3',\r\n      background: '#124D84',\r\n      text: '#C0BEFF',\r\n      // contrastText: '#fff',\r\n    },\r\n    text: {\r\n      primary: '#384C68',\r\n      secondary: '#688ABD', // 로그인 아이디 인풋 전 색상. 왜인지 모름\r\n      disabled: '#4caf50',\r\n      hint: '#ffc107',\r\n      myTextColor : '#384C68'\r\n    }\r\n  },\r\n  overrides: {\r\n    MuiButton: {\r\n      label: {\r\n        color: \"#f1f1f1\",\r\n      },\r\n    },\r\n  },\r\n})\r\n  /*\r\n  const theme2 = createTheme({\r\n    palette: {\r\n        primary: {\r\n          main: \"#00fd00\",\r\n          light: \"#ff0000\",\r\n          dark: \"#0000ff\"\r\n        },\r\n        secondary: {\r\n          main: \"#ff0000\"\r\n        },\r\n        neutral: {\r\n          main: '#ff0000',\r\n          contrastText: '#fff',\r\n        },\r\n      },\r\n    components: {\r\n        \r\n      // Name of the component\r\n      MuiButton: {\r\n        styleOverrides: {\r\n          // Name of the slot\r\n          root: {\r\n            // Some CSS\r\n            fontSize: '1rem',\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });\r\n*/\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n\r\n    <div className=\"web-container\">\r\n      <Router>\r\n        <div className=\"web-side-nav\">\r\n          <SideNav isAuthorized={isAuthorized}/>\r\n        </div>\r\n        <div className=\"web-content\">\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n\r\n              {!isAuthorized ? <Login /> : <Setting />}\r\n            </Route>\r\n            <Route path=\"/map\" exact>\r\n              {!isAuthorized ? < Authorized /> : <Map />}\r\n            </Route>\r\n            <Route path=\"/call\" exact>\r\n              {!isAuthorized ? < Authorized /> : <Call />}\r\n            </Route>\r\n            <Route path=\"/pickup\" exact>\r\n              {!isAuthorized ? < Authorized /> : <Pickup />}\r\n            </Route>\r\n            <Route path=\"/history\" exact>\r\n              {!isAuthorized ? < Authorized /> : <History />}\r\n            </Route>\r\n            <Route path=\"/setting\" exact>\r\n              <Setting />\r\n            </Route>\r\n            <Route path=\"/login\" exact>\r\n              < Login />\r\n            </Route>\r\n            <Route path=\"/my-page\" exact>\r\n              < User />\r\n            </Route>\r\n\r\n            <Redirect to=\"/\" />\r\n            {/* 주어지지 않은 url은 home으로 자동 이동 */}\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n    </ThemeProvider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}