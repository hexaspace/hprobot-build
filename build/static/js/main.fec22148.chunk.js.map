{"version":3,"sources":["component/User/LoginController.js","component/User/Login.js","component/User/User.js","component/User/Authorized.js","component/Map/RobotServing.js","component/Map/RobotPosition.js","component/Modal/Modal.js","component/Map/MapController.js","component/Map/TablePosition.js","component/Map/MapPresenter.js","component/Map/ErrorControlButton.js","component/Map/ServingPresenter.js","component/Map/RobotInfo.js","component/Map/MonitoringPresenter.js","component/Call/CallStatus.js","component/Call/CallController.js","component/Call/CallButton.js","component/Call/CallPresenter.js","component/Setting/SettingPresenter.js","component/History/HistoryPresenter.js","component/Error/ErrorController.js","component/Error/ErrorPresenter.js","component/Pickup/PickupItem.js","component/Pickup/PickupPresenter.js","component/SideNav/SideNavPresenter.js","App.js","index.js"],"names":["postControllerLogin","userId","userPassword","a","axios","method","url","data","response","valid","password","console","log","defaults","baseURL","message","process","headers","post","StyledTextField","withStyles","root","borderRadius","TextField","Login","useState","inputId","setInputId","inputPassword","setInputPassword","showPassword","setshowPassword","onSubmit","result","user_name","sessionStorage","setItem","map_id","logo_src","document","location","href","alert","className","id","src","alt","label","variant","margin","style","width","size","value","onChange","e","target","color","FormControl","sx","InputLabel","htmlFor","OutlinedInput","type","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","event","preventDefault","edge","User","onLogout","window","removeItem","userName","getItem","this","bind","Component","Authorized","goLogin","RobotServing","robot","clickedRobotId","setClickedRobotId","stateString","state","current_node","final_node","statusColor","robot_id","destination","tableName","table_name","isNaN","backgroundColor","RobotItem","props","robotImgSrc","robotId","pageType","posX","posY","left","top","TargetItem","x","y","ax","currX","ay","currY","bx","finalX","by","finalY","centerX","centerY","Math","sqrt","pow","transformString","atan2","PI","toString","transform","RobotPosition","robotData","length","map","curr_x","curr_y","filter","frobot","final_x","final_y","Modal","title","highlight","content","open","onPermit","onCancel","createPortal","getElementById","getMapTable","mapId","get","status","error","getInitOneRobot","getDestinationRobot","destinationTable","where","mapName","map_name","postError","postButton","getHomeRobot","params","table_id","TableItem","TablePosition","tableData","modalHighlight","setModalHighlight","isModalOpen","setIsModalOpen","clickedTableId","setClickedTableId","tableItem","tableInfo","tableId","highlightString","handleTableClick","ErrorControlButton","modalTitle","setModalTitle","modalContent","setModalContent","ServingPresenter","setRobotData","setTableData","mapBackgroundSrc","useEffect","interval","setInterval","then","robot_position","used","catch","getRobotData","clearInterval","getTableData","RobotInfo","battery","MonitoringPresenter","RobotStatus","CallStatus","robotStatusList","setRobotStatusList","getRobotStatus","robot_status","getPickupRobot","robotHome","robot_home","getCallRobot","userNode","user_node","CallButton","responseStatus","buttonStatus","setButtonStatus","calledRobot","setCalledRobot","updateLoading","getIsCall","onClickKitchen","onClickPickup","CallPresenter","loading","input","setState","prevState","error2","message2","handlePickupButtonClick","handleKitchenButtonClick","clickPickupModalPermit","clickKitchenModalPermit","BUTTON_WRAPPER_STYLES","zIndex","SettingPresenter","HistoryPresenter","Box","bgcolor","p","m","getRobotError","getRobotLog","logId","errorMessage","ErrorPresenter","errorList","setErrorList","logString","robot_path","map_existence","handelErrorClick","errorId","loadLog","clickErrorModalButton","loadErrors","align","robotError","last_log_id","error_id","error_type","current_node_robot","current_node_server","created_at","PickupContent","pickup","isNull","phone","store","delivery","delay","PickupItem","pickupList","pickupItem","PickupPresenter","SideNavPresenter","isAuthorized","isFullNav","setIsFullNav","to","activeClassName","App","setIsAuthorized","theme","createTheme","palette","primary","main","light","dark","secondary","sidenav","background","text","disabled","hint","myTextColor","overrides","MuiButton","ThemeProvider","path","exact","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fec22148.chunk.js","sourcesContent":["import axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\nexport async function postControllerLogin(userId, userPassword) {    // map화면에서 목적지 node를 눌렀을 때, 픽업대의(1번) 로봇을 보내는 함수\r\n\r\n    try {\r\n        const response = await axios({      // 로그인 정보 서버로 보내기\r\n            method: 'post',\r\n            url: '/controller/login',\r\n            data: {\r\n                userId: userId,\r\n                userPassword: userPassword\r\n            }\r\n        });\r\n        let valid = response.data.password; \r\n        console.log(axios.defaults.baseURL);\r\n        console.log(\"[LoginController] postControllerLogin 결과 ->\");\r\n        console.log(response);\r\n        if (valid == true){     // 유효한 로그인 정보일 때\r\n            return [valid, response.data];  \r\n        }\r\n        else if(valid == false){      // 로그인 실패\r\n            return [valid, response.data.message];\r\n        }\r\n        else {\r\n            return [false, \"[LoginController] server not connected\"];\r\n\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[LoginController] postControllerLogin error catch.\\n\" + e.message);\r\n        \r\n        return [false, e.message]\r\n    }\r\n}\r\n","import React, {useState} from 'react'\r\nimport './../../assets/style.css';\r\nimport {postControllerLogin} from './LoginController';\r\nimport Button from '@material-ui/core/Button'; // Button을 import 한다.\r\n// import RaisedButton from '@material-ui/core/RaisedButton'; // Button을 import 한다.\r\n// import theme from './../../assets/theme';\r\n// import { ThemeProvider } from '@material-ui/core/styles'\r\n// import CssBaseline from '@material-ui/core/CssBaseline'  BiLogIn\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Visibility from '@mui/icons-material/Visibility';\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { borders } from '@mui/system';\r\n\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';    // 패스워드 아이콘\r\nimport PersonOutlineOutlinedIcon from '@mui/icons-material/PersonOutlineOutlined';  // 아이디 아이콘\r\n\r\n// 아이콘   AiOutlineLock\r\nimport { IconContext } from \"react-icons\";\r\n\r\nimport {BiLogIn} from 'react-icons/bi'\r\nimport {AiOutlineLock, AiOutlineUser} from 'react-icons/ai'\r\n\r\n\r\n\r\n\r\n\r\nconst StyledTextField = withStyles({\r\n    root: {\r\n      '& .MuiOutlinedInput-root': {\r\n        '& fieldset': {\r\n          borderRadius: `90px`,\r\n        },\r\n      },\r\n    },\r\n})(TextField);\r\nfunction Login() {\r\n    // 테스트용 user 정보\r\n    const dumpUsers = [\r\n        { id: \"hello\", password: \"world\", mapId:7, userName:\"store21\"},\r\n        { id: \"admin\", password: \"1234\", mapId:7, userName:\"store14\"},\r\n        { id: \"a\", password: \"s\", mapId:7, userName:\"store17\"}\r\n    ];\r\n    const checkLogin = (id, pw) => {\r\n        const user = dumpUsers.find(\r\n            (user) => user.id === id && user.password === pw\r\n        );\r\n        if (user === undefined) {\r\n            // alert('user undefined.'+id)\r\n            return null;}\r\n        return user;\r\n    }\r\n    // 아이디, 패스워드 입력값 변수. 초기는 null\r\n    const [inputId, setInputId] = useState(\"\");\r\n    const [inputPassword, setInputPassword] = useState(\"\");\r\n    const [showPassword, setshowPassword] = useState(\"\");\r\n\r\n    // input에 입력시 변수 갱신\r\n    const handleInputId = (e) => {\r\n        setInputId(e.target.value)\r\n    }\r\n\r\n    const handleInputPassword = (e) => {\r\n        setInputPassword(e.target.value)\r\n    }\r\n\r\n    const handleClickShowPassword = () => {\r\n        setshowPassword(!showPassword);\r\n\r\n      };\r\n    \r\n      const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n      };\r\n    const onSubmit = async () => {\r\n        // 서버로 로그인 정보 확인\r\n        \r\n        let [valid, result] = await postControllerLogin(inputId, inputPassword);\r\n        if (valid) {\r\n            // console.log(\"[LoginPresenter] post login success\");\r\n            console.log(\"[LoginPresenter] login success : \");\r\n            console.log(result.user_name);\r\n            // const userName = \r\n            sessionStorage.setItem('userId', inputId)\r\n            sessionStorage.setItem('mapId', result.map_id)\r\n            sessionStorage.setItem('userName', result.user_name)\r\n            sessionStorage.setItem('logoSrc', result.logo_src)\r\n            document.location.href = '/'\r\n\r\n        }\r\n        else {\r\n            console.log(\"[LoginPresenter] login failed, error  : \", result);\r\n            alert(result);\r\n            return;\r\n\r\n        }\r\n        \r\n\r\n/*\r\n        const user = checkLogin(inputId, inputPassword);\r\n        if (user === null){\r\n            console.log('입력하신 정보가 올바르지 않습니다.')\r\n        } else {\r\n            \r\n            sessionStorage.setItem('userId', inputId)\r\n            sessionStorage.setItem('mapId', user.mapId)\r\n            sessionStorage.setItem('userName', user.userName)\r\n            \r\n\r\n        }\r\n        작업 완료 되면 페이지 이동(새로고침)\r\n        document.location.href = '/'size=\"3rem\"\r\n        */\r\n    }\r\n    return (\r\n        <div className=\"content\" id=\"login\">\r\n            <BiLogIn className=\"icon\" />\r\n            <div className=\"content-title \"> 로그인</div>\r\n            <div className=\"grid-container\">\r\n                <div className=\"grid-item center-align\" id=\"item-login\">\r\n                    <img className=\"login-hprobot-img\" src={\"/assets/hprobot-logo/hprobot-logo-1line.png\"} alt=\"hprobot-logo\" />\r\n                    {/* 한줄씩 하려고 br 태그 사용함. 나중에 부트스트랩 사용으로 간편하게 고칠예정 develop */}\r\n                    <div className=\"login-input-div\">\r\n                        <div className=\"left-align\">\r\n                            <AiOutlineUser className=\"icon\" />\r\n                        </div>\r\n\r\n                        <StyledTextField id=\"outlined-basic\" label=\"아이디\" variant=\"outlined\" margin=\"small\" style={{ width: '100% ' }}\r\n                            size=\"small\" value={inputId} onChange={handleInputId} color=\"primary\" />\r\n                        {/* InputLabelProps={{style : {color : '#688ABD'} }} 핵사코드만 적용됨 */}\r\n                    </div>\r\n                    <div className=\"login-input-div\">\r\n                        <div className=\"left-align\">\r\n                            <AiOutlineLock className=\"icon\" />\r\n                        </div>\r\n                        <FormControl sx={{ width: '100% ' }} variant=\"outlined\" size=\"small\" margin=\"small\" color=\"primary\">\r\n                            <InputLabel htmlFor=\"outlined-adornment-password\" >패스워드</InputLabel>\r\n                            {/* style={ {color : '#688ABD'}} primary로 적용됨 */}\r\n                            <OutlinedInput\r\n                                id=\"outlined-adornment-password\"\r\n                                type={showPassword ? 'text' : 'password'}\r\n                                value={inputPassword}\r\n                                onChange={handleInputPassword}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={handleClickShowPassword}\r\n                                            onMouseDown={handleMouseDownPassword}\r\n                                            edge=\"end\"\r\n                                        >\r\n                                            {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                                label=\"Password\"\r\n                                sx={{ borderRadius: 25 }}\r\n                            />\r\n                        </FormControl>\r\n                    </div>\r\n                    <div>\r\n                        <button className=\"round-button text-color-w background-color-1\" onClick={onSubmit}>로그인</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { Component } from 'react'\r\n\r\nexport class User extends Component {\r\n    onLogout = () => {\r\n        window.sessionStorage.removeItem('userId');\r\n        window.sessionStorage.removeItem('mapId');\r\n        window.sessionStorage.removeItem('userName');\r\n        window.sessionStorage.removeItem('logoSrc');\r\n\r\n        document.location.href = '/'\r\n\r\n    }\r\n    render() {\r\n        const userName = sessionStorage.getItem('userName')\r\n        const dbLogoSrc = sessionStorage.getItem('logoSrc');\r\n        const logo_src = '/assets/store_logo/' + dbLogoSrc + '.png';\r\n        // const logo_src = '../../assets/store_logo/the_people_burger/the_people_burger_logo.png'\r\n        return (\r\n            <div className=\"content\" id=\"user\">\r\n                <h1 > 내 정보</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item\" id=\"item-profile\">\r\n                        <h4>프로필</h4>\r\n                {/* userid로 user 정보와 img url 불러오기 */}\r\n                        <img src={logo_src} alt=\"user-logo\" />\r\n\r\n                        <div> 매장명 : {userName}</div>\r\n                        <button onClick={this.onLogout.bind(this)}>로그아웃</button>\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-2\">\r\n                        <h4>호출 통계</h4>\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-3\">\r\n                        <h4>최근 주문</h4>\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-4\">\r\n                        <h4>뭐할까</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default User\r\n","import React, { Component } from 'react'\r\n// icon\r\nimport {AiOutlineWarning} from 'react-icons/ai'\r\nimport {BiLogIn} from 'react-icons/bi'\r\n\r\nexport class Authorized extends Component {\r\n    goLogin = () => {\r\n        document.location.href = '/login'\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"content\" id=\"authorized\">\r\n                <div className=\"content-title text-color-1\"> <BiLogIn className=\"icon\" />로그인</div>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item center-align\" id=\"item-authorized\">\r\n                        <AiOutlineWarning className=\"icon\" id=\"warning-icon\" />\r\n                        <p className=\"text-color-2\" id=\"authorized-text\">로그인이 필요합니다</p>\r\n                        <button className=\"round-button text-color-w background-color-1\" onClick={this.goLogin.bind(this)}>로그인하러 가기</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Authorized\r\n","import React from 'react'\r\nimport {BiCheckSquare} from 'react-icons/bi'\r\nfunction RobotServing({robot, clickedRobotId, setClickedRobotId}) {\r\n    var stateString = \"이동중\" \r\n\r\n    if (robot.state == 2) return null;  // 물건 없음\r\n    else if(robot.current_node == robot.final_node) stateString=\"서빙완료\"; //물건 올린 상태에서 목적지 도착\r\n    const robotImgSrc = \"/assets/robot/octa_robot_white.png\";   //로봇 이미지\r\n    // serving정보칸 배경 색상 (강조 여부)\r\n    var statusColor = \"#ffffff00\";\r\n    if(robot.robot_id == clickedRobotId){\r\n        statusColor = \"#0000ff11\";\r\n    }\r\n    // 테이블 이름에 따른 목적지 문자열 구분(숫자 / 배달)\r\n    var destination = \"\";\r\n        var tableName = robot.table_name;\r\n        if(tableName == null){\r\n            destination = \"현재 위치\";\r\n        }\r\n        else if (isNaN(tableName)){  // table name 이 숫자가 아닐 때 (ex. 배달)\r\n            //console.log(\"not number!\");\r\n            destination = tableName+\"구역\";\r\n        }\r\n        else{\r\n            destination = \"테이블 \"+tableName+\"번\";\r\n        }\r\n    /*upgradable 함수의 위치? 함수형 컴포넌트에서... */\r\n    function handelRobotClick(){\r\n        // console.log(\"robot click!\");\r\n        setClickedRobotId(robot.robot_id);\r\n    }\r\n\r\n    return (\r\n        <li id=\"robot-serving-item\" onClick={handelRobotClick} style={{ backgroundColor:statusColor}}>\r\n            <img src={robotImgSrc} alt=\"robot-icon-img\" className='robot-icon-img float' />\r\n                <div id = \"serving-info\" className=\"float\">\r\n\r\n                    <span id=\"arrive-robot-string\" className=\"text-color-1\">로봇</span>\r\n                    <span id=\"arrive-robot\" className=\"text-color-1\" >{robot.robot_id}</span>\r\n\r\n                </div>\r\n                <div id = \"serving-info\" className=\"float\">\r\n                <span id=\"arrive-node\" className=\"text-color-2\">{destination}</span>\r\n                <span id=\"arrive-robot-string\" className=\"text-color-1\"> {stateString}</span>\r\n                {stateString == \"이동중\" ?\r\n                    <div id=\"arrow-div\">\r\n                        <div id=\"arrow-right-div\">\r\n                        <p id=\"arrow-right\"></p>\r\n                        <p id=\"arrow-right\"></p>\r\n                        </div>\r\n                    </div>\r\n                    : <BiCheckSquare className=\"icon icon-2\"/>\r\n                }\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default RobotServing\r\n","\r\nimport React, {useState, useEffect} from 'react'\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.10\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'\r\n\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';     //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\n\r\nfunction RobotItem(props) {\r\n    var robotImgSrc = \"/assets/robot/octa_robot_white.png\"; // 로봇 이미지 (색상과 번짐이 다름)\r\n    if(props.robotId == props.clickedRobotId){\r\n        robotImgSrc = \"/assets/robot/octa_robot_yellow.png\";       // 클릭된 로봇이라면 노랑\r\n    }\r\n    else if(props.pageType == \"monitoring\" && props.state == \"1\"){  // 모니터링 페이지에서 이동중이라면 초록\r\n        robotImgSrc = \"/assets/robot/octa_robot_green.png\";\r\n    }\r\n    const posX = (props.posX) * 0.01-0.5; //-0.5    // db에 저장된 xy위치는 1rem의 100배의 수치이다.\r\n    const posY = (props.posY) * 0.01-0.5;   //중앙에 위치하기 위해 0.5전부터 그림. 이건 상수가 아닌 변수로 /*upgradeable*/\r\n    \r\n\r\n    function handelRobotClick(){\r\n        // console.log(\"robot click!\");\r\n        props.setClickedRobotId(props.robotId);\r\n    }\r\n    return (\r\n        <div className=\"robot\"  onClick={handelRobotClick} style={{ left: posX+\"rem\", top: posY+\"rem\"}}>\r\n            <img src={robotImgSrc} alt=\"robot-icon-img\" className='robot-icon-img'/>\r\n        </div>\r\n    )\r\n\r\n}\r\nfunction calcAngleDegrees(x, y) {   // 하나의 좌표와 원점사이의 arctan(degree각도) 계산\r\n    return Math.atan2(y, x) * 180 / Math.PI;\r\n}\r\n\r\nfunction TargetItem(props){\r\n\r\n    const ax = (props.currX-(-0.5)) * 0.01;\r\n    const ay = (props.currY-(-0.5)) * 0.01;\r\n    const bx = (props.finalX-(-0.5)) * 0.01;\r\n    const by = (props.finalY-(-0.5)) * 0.01;\r\n    // 선분의 중심은 두 점사이의 중심\r\n    const centerX = (ax+bx)/2;\r\n    const centerY = (ay+by)/2;\r\n\r\n    // 선분의 길이는 두 점 사이의 길이 (width)\r\n    const size = Math.sqrt(Math.pow(ax-bx, 2) + Math.pow(ay-by,2));\r\n\r\n    // target -형태의 div 시작위치는 중점에서 길이의 반절만큼 왼쪽으로 가야함\r\n    const top = centerY;\r\n    const left = centerX - (size)/2;\r\n\r\n    // 수평선으로부터 회전된 각도는 한 점이 원점이라고 할 때 arctan 값\r\n    const degree = calcAngleDegrees(ax-bx, ay-by);\r\n    const transformString = \"rotate(\"+degree.toString() + \"deg)\"\r\n    return (\r\n        <div className=\"target\" style={{ left: left+\"rem\", top: top+\"rem\", width: size+\"rem\", transform:transformString}}>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction RobotPosition({ clickedRobotId, robotData, setClickedRobotId, pageType }) {\r\n    function test() {\r\n        console.log(\"test\");\r\n        return;\r\n    }\r\n    if (robotData.length > 0 || pageType==\"serving\") {\r\n        return (\r\n            <div>\r\n                {robotData.map(robot => (\r\n\r\n                    <RobotItem\r\n                        key={robot.robot_id} clickedRobotId={clickedRobotId} setClickedRobotId={setClickedRobotId} pageType={pageType}\r\n                        robotId={robot.robot_id} state={robot.state} posX={robot.curr_x} posY={robot.curr_y} />\r\n                ))}\r\n                {robotData.filter(robot => robot.state == 1).map(frobot => (\r\n                    <TargetItem\r\n                        currX={frobot.curr_x} currY={frobot.curr_y} finalX={frobot.final_x} finalY={frobot.final_y}\r\n                        key={frobot.robot_id} />\r\n                ))}\r\n\r\n            </div>\r\n        )\r\n    } else {  // 조회 데이터 존재하지 않을 경우\r\n        console.log(\" robot data를 불러오는데 실패했습니다.\");\r\n        return (\r\n            <div>\r\n                <button className=\"data-reload\" onClick={test}>데이터 불러오기</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default RobotPosition\r\n","import React from 'react';\r\nimport {createPortal} from 'react-dom';\r\n// icon\r\nimport { AiOutlineInfoCircle } from 'react-icons/ai';\r\n\r\n\r\nfunction Modal({ title,highlight, content, open, onPermit, onCancel }) {\r\n  if (!open) return null;\r\n  return createPortal(\r\n    <div id=\"modal\">\r\n      <div id=\"overlay\" />\r\n      <div id=\"modal-box\" className=\"background-color-w text-color-1\">\r\n        <h3 id=\"modal-title\" className=\"text-color-1\"><AiOutlineInfoCircle className=\"icon icon-2\"/>{title}</h3>\r\n        <div id=\"modal-content\" className=\"text-color-1\"><span className=\"text-color-2\">{highlight}</span>{content}</div>\r\n          <button id=\"cancle-button\" className=\"text-color-1 background-color-w\" onClick={onCancel}>아니오</button>\r\n          <button id=\"ok-button\" className=\"text-color-w background-color-2\" onClick={onPermit}>예</button>\r\n      </div>\r\n    </div>,\r\n    document.getElementById('modal')\r\n\r\n  )\r\n}\r\n\r\nexport default Modal\r\n","import axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\nexport async function getMapView() {    // map화면에서 목적지 node를 눌렀을 때, 픽업대의(1번) 로봇을 보내는 함수\r\n    \r\n    const mapId = sessionStorage.getItem('mapId');\r\n    try {\r\n        const response = await axios.get('/map-views/'+mapId);  // 해당 map id의 map view얻기\r\n        \r\n        if (response.status == 200) { \r\n            return [false, response.data]\r\n        }\r\n        else {\r\n        // console.log(\"[MapController] getMapView server error.\\n\");\r\n        return [response.data.error, response.data.message];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[MapController] getMapView error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\n\r\nexport async function getMapTable() {    // map화면에서 목적지 table을 보여주는\r\n    \r\n    const mapId = sessionStorage.getItem('mapId');\r\n    try {\r\n        const response = await axios.get('/map-tables/table/'+mapId);  // 해당 map id의 map table\r\n        \r\n        if (response.status == 200) { \r\n            return [false, response.data]\r\n        }\r\n        else {\r\n        // console.log(\"[MapController] getMapTable server error.\\n\");\r\n        return [response.data.error, response.data.message];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[MapController] getMapTable error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\nexport async function getInitRobot(userId) {    // 해당 map에 있는 모든 로봇을 초기화하는 함수 /robot/initialize/{userId}\r\n\r\n    try {\r\n        const response = await axios.get('/controller/robot/initialize/' + userId );  // button mqtt post를 위한 정보 얻기 : map name\r\n        // let error = response.data.error;\r\n        console.log(\"[MapController] getInitRobot 결과 ->\");\r\n        console.log(response);\r\n        return [response.data.error, response.data.message]\r\n\r\n    } catch (e) {\r\n        console.log(\"[MapController] getInitRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\n\r\nexport async function getInitOneRobot(userId, robotId) {    // 특정 map, robot을 초기화 하는 함수 /robot/initialize/{userId}\r\n\r\n    try {\r\n        const response = await axios.get('/controller/robot/initialize/' + userId +\"/\"+robotId);  // button mqtt post를 위한 정보 얻기 : map name\r\n        console.log(\"[MapController] getInitOneRobot 결과 ->\");\r\n        console.log(response);\r\n        return [response.data.error, response.data.message]\r\n\r\n    } catch (e) {\r\n        console.log(\"[MapController] getInitOneRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\n\r\nexport async function getDestinationRobot(userId, destinationTable) {    // map화면에서 목적지 node를 눌렀을 때, 픽업대의(1번) 로봇을 보내는 함수\r\n\r\n    try {\r\n        const response = await axios.get('/controller/button/to-destination/' + userId);  // button mqtt post를 위한 정보 얻기 : robot id, map name, (final node =destinationNode)\r\n        let error = response.data.error; \r\n        console.log(\"[MapController] getDestinationRobot to-destination 결과 ->\");\r\n        console.log(response);\r\n\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            // alert(response.data.message);\r\n            console.log(response.data.message)\r\n            console.log(response.data.where)\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            let robotId = response.data.robot_id;\r\n            let mapName = response.data.map_name;\r\n            let postError = postButton([destinationTable, mapName, robotId]);\r\n            return [postError, robotId];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[MapController] getDestinationRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\nexport async function getHomeRobot(userId, robotId) {    // map화면에서 로봇버튼을 눌렀을 때, 해당 번호의 로봇을 픽업대의(1번)로 보내는 함수\r\n\r\n    try {\r\n        const response = await axios.get('/controller/button/to-home/' + userId + \"/\" + robotId);  // button mqtt post를 위한 정보 얻기 : map name\r\n        let error = response.data.error;\r\n        console.log(\"[MapController] getHomeRobot to-home 결과 ->\");\r\n        console.log(response);\r\n\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            // alert(response.data.message);\r\n            console.log(response.data.message)\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            let mapName = response.data.map_name;\r\n            let postError = postButton([0, mapName, robotId]);\r\n            return [postError, response.status];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[MapController] getHomeRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\n\r\nexport async function getAllHomeRobot(userId) {    // map화면에서 로봇버튼을 눌렀을 때, 해당 번호의 로봇을 픽업대의(1번)로 보내는 함수\r\n\r\n    try {\r\n        const response = await axios.get('/controller/button/to-home-all/' + userId );  // button mqtt post를 위한 정보 얻기 : map name\r\n        let error = response.data.error;\r\n        console.log(\"[MapController] getAllHomeRobot to-home-all 결과 ->\");\r\n        console.log(response);\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            // alert(response.data.message);\r\n            console.log(response.data.message)\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            const robotList=response.data.robot_list;    // 해당 map의 robot list를 알아야함\r\n            console.log(\"robotId lsit -> \",robotList);\r\n            \r\n            let mapName = response.data.map_name;\r\n            var postError = false;\r\n            robotList.forEach(robotId => {\r\n                postError = postButton([0, mapName, robotId]);  // 1은 목적지. store에선 항상 복귀집이 1번이다.\r\n                if(postError){\r\n                    console.log(\"[MapController] getAllHomeRobot postError error.\");\r\n                    return [true, robotList];\r\n                }\r\n            });\r\n            return [false, robotList];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[MapController] getAllHomeRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\nfunction postButton(params) {\r\n    console.log(\"[MapController] postButton param \", params);\r\n    try {\r\n        const response = axios({\r\n            method: 'post',\r\n            url: '/mqtt/button',\r\n            data: {\r\n                table_id: params[0],\r\n                map_name: params[1],\r\n                robot_id: params[2]\r\n            }\r\n        });\r\n        console.log(\"[MapController] postButton   결과 ->\");\r\n        console.log(response);\r\n        return false;\r\n\r\n    } catch (e) {\r\n        console.log(\"[MapController] postButton button 정보를 로봇으로 보내는데 실패했습니다.\\n\" + e.message);\r\n        // return [true, e.message]\r\n        return true;\r\n    }\r\n\r\n}","import React, {useState} from 'react'\r\nimport Modal from './../Modal/Modal';\r\nimport {getDestinationRobot} from './MapController';\r\n\r\nfunction TableItem(props) {\r\n    const tableName = props.data['table_name'];\r\n    const posX = (props.data['x']) * 0.01 - 2.4;\r\n    const posY = (props.data['y']) * 0.01 - 1.6;\r\n\r\n    return (\r\n        <div className=\"table-button background-color-3 \" onClick={props.onClick} style={{left:posX+\"rem\", top:posY+\"rem\"}}>\r\n            <div className=\"table-button-name text-color-w\">{tableName}</div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction TablePosition({tableData}) {\r\n    const modalTitle = \"서빙 시작 안내\";\r\n    const modalContent = \"으로 서빙을 시작할까요?\";\r\n    \r\n    // const [modalContent, setModalContent] = useState(\"테이블을 클릭하지 않았습니다.\");\r\n    const [modalHighlight, setModalHighlight] = useState(\"\");\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [clickedTableId, setClickedTableId] = useState(0);\r\n\r\n    function handleTableClick(tableInfo) {   // 테이블 버튼을 눌렀을 때 모달을 띄우는 함수\r\n        const  tableId = tableInfo[0];\r\n        const  tableName = tableInfo[1];\r\n        var highlightString = \"\";\r\n        if (isNaN(tableName)){  // table name 이 숫자가 아닐 때 (ex. 배달)\r\n            //console.log(\"not number!\");\r\n            highlightString = tableName+\"구역\";\r\n        }\r\n        else{\r\n            highlightString = \"테이블\"+tableName+\"번\";\r\n        }\r\n        // 선택된 로봇이 존재 할 때\r\n        setIsModalOpen(true);\r\n        setModalHighlight(highlightString);\r\n        setClickedTableId(tableId);\r\n        // nothing do\r\n        console.log(\"table modal click!\");\r\n    }\r\n    \r\n    async function clickTableModalPermit(){    //모달에서 확인을 눌렀을 때 동작\r\n        const userId = sessionStorage.getItem('userId');\r\n\r\n        let [error, message] = await getDestinationRobot(userId, clickedTableId);\r\n        if (!error) {\r\n            console.log(\"[TablePosition] getDestinationRobot success : \", message);\r\n        }\r\n        else {\r\n            console.log(\"[TablePosition] getDestinationRobot fail  : \", message);\r\n        }\r\n        //모달 데이터 초기화\r\n        setIsModalOpen(false);\r\n        setModalHighlight(\"\");\r\n        setClickedTableId(0);\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {tableData.map(tableItem => (\r\n                <TableItem data={tableItem} key={tableItem['table_id']} onClick={() => handleTableClick([tableItem['table_id'], tableItem['table_name']])}/>\r\n            ))}\r\n            <Modal title={modalTitle} highlight={modalHighlight}  content={modalContent} open={isModalOpen} onCancel={()=>setIsModalOpen(false)}\r\n                    onPermit={clickTableModalPermit}>\r\n                </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TablePosition\r\n","import React, { Component } from 'react'\r\nimport RobotServing from './RobotServing';\r\nimport RobotPosition from './RobotPosition';\r\nimport TablePosition from './TablePosition';\r\nimport Modal from './../Modal/Modal';\r\n// import {getDestinationRobot, getHomeRobot, getAllHomeRobot} from '../Call/CallController';\r\nimport {getMapTable, getInitOneRobot, getDestinationRobot, getHomeRobot} from './MapController';\r\n// 아이콘   AiOutlineLock\r\nimport {GrMap} from 'react-icons/gr'\r\nimport {MdErrorOutline} from 'react-icons/md'\r\n\r\nexport class MapPresenter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        // this.mapContainer = React.createRef()\r\n        this.state = {\r\n            mapTable:[], // componenteDidMount에서 저장\r\n            robotStatus:[], //RobotPosition에서 1초마다 저장\r\n            clickedTableId:0,   //table 클릭 시 저장\r\n            clickedRobotId:0,   //로봇 클릭시 저장\r\n            isModalOpen:false,  // 모달 열림 여부 저장\r\n            modalTitle:\"제목\",  // 모달에 들어갈 정보 \r\n            modalContent: \"내용\",   //          저장\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n\r\n        let [error, result] = await getMapTable();  //table 위치 불러오기. 한번만 불러옴\r\n        if (error) {\r\n            alert(\"[MapPresenter] getMapTable 불러오기 실패 : \", error);\r\n            return;\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            mapTable: result\r\n        }))\r\n    }\r\n\r\n    setRobotStatus(props){\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            robotStatus: props\r\n        }))\r\n    }\r\n    \r\n\r\n    handelTableClick(tableInfo){\r\n        const  tableId = tableInfo[0];\r\n        const  tableName = tableInfo[1];\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isModalOpen: \"table\",\r\n            clickedTableId: tableId,\r\n            modalTitle: \"로봇 보내기\",\r\n            modalContent: tableName+\"번 테이블로 로봇을 보내겠습니까?\",\r\n            clickedRobotId: 0\r\n        }))\r\n        // nothing do\r\n        console.log(\"table modal click! \"+tableId);\r\n    }\r\n    \r\n    handelRobotClick(i){\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            clickedRobotId: i,\r\n        }))\r\n        // nothing do\r\n        console.log(\"robot click! \"+i);\r\n    }\r\n    handelNotRobotClick=()=>{\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            clickedRobotId: 0,\r\n        }))\r\n    }\r\n    handleInitClick = () => {   // 로봇 초기화 버튼\r\n        const clickedRobotId = this.state.clickedRobotId;\r\n        if (clickedRobotId == 0){   // 로봇이 선택되지 않았을 때\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: \"message\",\r\n                modalTitle: \"로봇 초기화\",\r\n                modalContent: \"선택된 로봇이 존재하지 않습니다.\"\r\n            }))\r\n            return;\r\n        }\r\n        // 선택된 로봇이 존재 할 때\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isModalOpen: \"init\",\r\n            modalTitle: \"로봇 초기화\",\r\n            modalContent: clickedRobotId+\"번 로봇을 초기화하시겠습니까?\"\r\n        }))\r\n        // nothing do\r\n        // console.log(\"init one modal click!\");\r\n    }\r\n    handleReturnClick = () => {   // 로봇 복귀 버튼\r\n        const clickedRobotId = this.state.clickedRobotId;\r\n        if (clickedRobotId == 0){   // 로봇이 선택되지 않았을 때\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: \"message\",\r\n                modalTitle: \"로봇 복귀\",\r\n                modalContent: \"선택된 로봇이 존재하지 않습니다.\"\r\n            }))\r\n            return;\r\n        }\r\n        // 선택된 로봇이 존재 할 때\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isModalOpen: \"return\",\r\n            modalTitle: \"로봇 복귀\",\r\n            modalContent: clickedRobotId+\"번 로봇을 복귀시키겠습니까?\"\r\n        }))\r\n        // nothing do\r\n        // console.log(\"init one modal click!\");\r\n    }\r\n    async clickTableModalPermit(userId){\r\n        const destinationTable = this.state.clickedTableId;\r\n\r\n        let [error, message] = await getDestinationRobot(userId, destinationTable);\r\n        if (!error) {\r\n            console.log(\"[MapPresenter] getDestinationRobot success : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false,\r\n                clickedTableId: 0\r\n            }))\r\n        }\r\n        else {\r\n            console.log(\"[MapPresenter] getDestinationRobot fail  : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false\r\n            }))\r\n        }\r\n    }\r\n    \r\n    async clickInitModalPermit(userId){\r\n        const clickedRobotId = this.state.clickedRobotId;\r\n\r\n        let [error, message] = await getInitOneRobot(userId, clickedRobotId);\r\n        if (!error) {\r\n            console.log(\"[MapPresenter] getInitOneRobot success : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false,\r\n                clickedRobotId: 0\r\n            }))\r\n        }\r\n        else {\r\n            console.log(\"[MapPresenter] getInitOneRobot fail  : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false,\r\n                clickedRobotId: 0\r\n            }))\r\n        }\r\n    }\r\n    async clickReturnModalPermit(userId){\r\n        const clickedRobotId = this.state.clickedRobotId;\r\n        let [error, message] = await getHomeRobot(userId, clickedRobotId);\r\n        if (!error) {\r\n            console.log(\"[MapPresenter] getHomeRobot success : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false,\r\n                clickedRobotId: 0\r\n            }))\r\n        }\r\n        else {\r\n            console.log(\"[MapPresenter] getHomeRobot fail  : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                isModalOpen: false\r\n            }))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        \r\n        \r\n        const userId = sessionStorage.getItem('userId');\r\n    const mapId = sessionStorage.getItem('mapId');\r\n\r\n        const isModalOpen = this.state.isModalOpen;\r\n        const robotStatus = this.state.robotStatus;\r\n        const mapBackgroundSrc = \"assets/map-background/map-background-\"+mapId+\".png\";\r\n\r\n        return (\r\n            <div className=\"content\" id=\"map\">\r\n                <div className=\"content-title text-color-1\"> <GrMap className=\"icon\" />서빙 모드</div>\r\n\r\n                <div className=\"grid-container\">\r\n\r\n                    <div className=\"grid-item item-scroll\" id=\"item-map\">\r\n                        <div id=\"map-top\">\r\n                            <div id=\"discription\">\r\n                                <MdErrorOutline className=\"icon icon-w\" />\r\n                                <p>음식을 보낼 <span className=\"text-color-3\">테이블을 선택</span>하거나 정보를 볼 <span className=\"text-color-3\">로봇을 선택</span>하세요</p>\r\n                            </div>\r\n\r\n                        </div>\r\n                        {/* ref={this.mapContainer}  */}\r\n                        <div id=\"map-container\">\r\n                            <RobotPosition clickedRobotId={this.state.clickedRobotId} setRobotStatus={p => this.setRobotStatus(p)} onClick={i=>this.handelRobotClick(i)}/>\r\n                            <TablePosition xytypeList={this.state.mapTable} onClick={i=>this.handelTableClick(i)}/>\r\n                            <img src={mapBackgroundSrc} alt=\"map-background-img\" className=\"map-background-img\"  onClick={()=>this.handelNotRobotClick()}/>\r\n                        </div>\r\n\r\n                    </div>\r\n                    \r\n                    <div className=\"grid-item\" id=\"item-serving\">\r\n                        <div className=\"grid-title text-color-1\">로봇 서빙 현황</div>\r\n                            <ul>\r\n                                {robotStatus.map(robot => (\r\n                                    <RobotServing robot={robot} key={robot.robot_id}  onClick={()=>this.handelRobotClick(robot.robot_id)} clickedRobotId={this.state.clickedRobotId} />\r\n                                ))}\r\n                            </ul>\r\n                            <div id=\"error-control\">\r\n                                <button id=\"return\" className=\"text-color-2 background-color-w\" onClick={this.handleReturnClick}>복귀</button>\r\n                                <button id=\"init\" className=\"text-color-w background-color-1\" onClick={this.handleInitClick}>초기화</button>\r\n                            </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <Modal title={this.state.modalTitle} content={this.state.modalContent} open={isModalOpen} onCancel={() => this.setState(prevState => ({ isModalOpen: false }))}\r\n                    onPermit={isModalOpen == \"table\" ? () => this.clickTableModalPermit(userId)\r\n                            : isModalOpen == \"return\" ? () => this.clickReturnModalPermit(userId)\r\n                            : isModalOpen == \"init\" ? () => this.clickInitModalPermit(userId)\r\n                                : () => this.setState(prevState => ({ isModalOpen: false }))}>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MapPresenter\r\n","\r\n\r\nimport React, {useState} from 'react'\r\nimport Modal from './../Modal/Modal';\r\nimport {getMapTable, getInitOneRobot, getDestinationRobot, getHomeRobot} from './MapController';\r\n\r\n// , setModal, setTitle, setContent\r\nfunction ErrorControlButton({clickedRobotId,setClickedRobotId}) {\r\n    \r\n    const [modalTitle, setModalTitle] = useState(\"제목\");\r\n    const [modalContent, setModalContent] = useState(\"내용\");\r\n    const [modalHighlight, setModalHighlight] = useState(\"강조\");\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    \r\n    function handleInitClick() {   // 로봇 초기화 버튼\r\n        console.log(\"init one modal click!\");\r\n\r\n        if (clickedRobotId == 0){   // 로봇이 선택되지 않았을 때\r\n            setIsModalOpen(\"message\");\r\n            setModalTitle(\"로봇 초기화\");\r\n            setModalHighlight(\"선택된 로봇\");\r\n            setModalContent(\"이 존재하지 않습니다.\");\r\n            return;\r\n        }\r\n        // 선택된 로봇이 존재 할 때\r\n        setIsModalOpen(\"init\");\r\n        setModalTitle(\"로봇 초기화\");\r\n        setModalHighlight(clickedRobotId+\"번 로봇\");\r\n        setModalContent(\"을 초기화하시겠습니까?\");\r\n        // nothing do\r\n    }\r\n    function handleReturnClick() {   // 로봇 복귀 버튼\r\n        console.log(\"return one modal click!\");\r\n\r\n        if (clickedRobotId == 0){   // 로봇이 선택되지 않았을 때\r\n            setIsModalOpen(\"message\");\r\n            setModalTitle(\"로봇 초기화\");\r\n            setModalHighlight(\"선택된 로봇\");\r\n            setModalContent(\"이 존재하지 않습니다.\");\r\n                        return;\r\n        }\r\n        // 선택된 로봇이 존재 할 때\r\n        setIsModalOpen(\"return\");\r\n        setModalTitle(\"로봇 초기화\");\r\n        setModalHighlight(clickedRobotId+\"번 로봇\");\r\n        setModalContent(\"을 복귀시키겠습니까?\");\r\n\r\n        // nothing do\r\n    }\r\n    async function clickInitModalPermit(){\r\n        const userId = sessionStorage.getItem('userId');\r\n        let [error, message] = await getInitOneRobot(userId, clickedRobotId);\r\n        if (!error) {\r\n            console.log(\"[MapPresenter] getInitOneRobot success : \", message);\r\n        }\r\n        else {\r\n            alert(\"[MapPresenter] getInitOneRobot fail  : \", message);\r\n        }\r\n            setIsModalOpen(false);\r\n            setClickedRobotId(0);\r\n\r\n    }\r\n    async function clickReturnModalPermit(){\r\n        const userId = sessionStorage.getItem('userId');\r\n        let [error, message] = await getHomeRobot(userId, clickedRobotId);\r\n        if (!error) {\r\n            console.log(\"[MapPresenter] getHomeRobot success : \", message);\r\n        }\r\n        else {\r\n            alert(\"[MapPresenter] getHomeRobot fail  : \", message);\r\n        }\r\n        setIsModalOpen(false);\r\n        setClickedRobotId(0);\r\n    }\r\n\r\n    return (\r\n        <div id=\"error-control\">\r\n            <button id=\"return\" className=\"text-color-3 background-color-w\" onClick={handleReturnClick}>복귀</button>\r\n            <button id=\"init\" className=\"text-color-w background-color-3\" onClick={handleInitClick}>초기화</button>\r\n            <Modal title={modalTitle} highlight={modalHighlight} content={modalContent} open={isModalOpen} onCancel={()=>setIsModalOpen(false)}\r\n                    onPermit={isModalOpen == \"return\" ? clickReturnModalPermit\r\n                    : isModalOpen == \"init\" ? clickInitModalPermit\r\n                        : ()=>setIsModalOpen(false)}>\r\n                </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorControlButton\r\n","import React, { useState, useEffect } from 'react'\r\n\r\n// component\r\nimport ErrorControlButton from './ErrorControlButton';\r\nimport RobotPosition from './RobotPosition';\r\nimport TablePosition from './TablePosition';\r\nimport RobotServing from './RobotServing';\r\n// function\r\nimport { getMapTable } from './MapController';\r\n// icon\r\nimport { FaHandPointer, FaMapMarkerAlt } from 'react-icons/fa';\r\nimport {HiClipboardList} from 'react-icons/hi';\r\n// http\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.10\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\n\r\nfunction ServingPresenter() {\r\n\r\n    const [clickedRobotId, setClickedRobotId] = useState(1);    //클릭된 로봇\r\n    const [robotData, setRobotData] = useState([]); //불러온 로봇 데이터\r\n    const [tableData, setTableData] = useState([]); //불러온 테이블 데이터\r\n\r\n    const mapId = sessionStorage.getItem('mapId');\r\n    const mapBackgroundSrc = \"assets/map-background/map-background-\" + mapId + \".png\";  //배경 이미지\r\n\r\n    function getRobotData() {   // 로봇 데이터 불러오기\r\n        const userId = sessionStorage.getItem('userId');\r\n\r\n        var interval = setInterval(() => {\r\n            console.log(\"[RobotPosition] get robot position\")\r\n            axios.get('/controller/robot/position/' + mapId)    /*api이름 data로 변경해야함 upgradable*/\r\n                .then((response) => {\r\n                    setRobotData(response.data.robot_position.filter(robot => robot.used == userId)); // 불러온 데이터중에서 user의 음식이 올려진 로봇만 필터링\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"call robot positions item fail.\");\r\n                    return interval;\r\n                })\r\n        }, 1000);   //1초마다 반복\r\n        return interval\r\n    }\r\n    async function getTableData() {  //table 위치 불러오기\r\n        let [error, result] = await getMapTable();\r\n        if (error) {\r\n            alert(\"[MapPresenter] getMapTable 불러오기 실패 : \", error);\r\n            return;\r\n        }\r\n        setTableData(result);\r\n        // console.log(result);\r\n    }\r\n\r\n\r\n    useEffect(() => {   // 로봇 데이터 불러오기 반복\r\n        const interval = getRobotData();\r\n        return () => clearInterval(interval);   // 다른 창으로 넘어갈때 로봇 불러오기 멈춤\r\n    }, [])\r\n    /* [robotPositionList] 쓰는 이유. (근데 쓰면 계속 불러오드람. 더 찾아보기.)\r\n    근데 여기서 새로고침을 하지 않으면 등록된 모습을 확인할 수 없다. 그 이유는 useEffect 함수의 두번째 인자로 빈 배열을 주면 처음 사이트에 들어갔을 1회만 렌더링이 되기 때문에 다시 값을 불러오지 않는다.\r\n    그래서 다음과 같이 수정해 주면 등록이 완료될 때 게시판이 업데이트 되는 모습을 확인할 수 있다.*/\r\n    useEffect(() => {   // 테이블 데이터 불러오기 \r\n        console.log(\"rendering~\");\r\n        getTableData();\r\n    }, []);    //처음 랜더링에서만\r\n\r\n    function handelNotRobotClick() {     // 배경 이미지를 클릭할때 클릭된 로봇값 초기화\r\n        setClickedRobotId(0);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"content\" id=\"map\">\r\n\r\n\r\n                <div className=\"content-title\"> <FaMapMarkerAlt className=\"icon\" />서빙 모드</div>\r\n\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item item-scroll\" id=\"item-map\">\r\n                        <div id=\"map-top\">\r\n                            <div id=\"discription\" >\r\n\r\n                                <p className=\"text-color-1\">\r\n                                    <span className=\"icon-div background-color-2\"><FaHandPointer className=\"icon-w\" /></span>\r\n                                    음식을 보낼 <span className=\"text-color-2\">테이블을 선택</span>하거나 정보를 볼 <span className=\"text-color-2\">로봇을 선택</span>하세요</p>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div id=\"map-container\">\r\n                            <RobotPosition clickedRobotId={clickedRobotId} robotData={robotData} setClickedRobotId={setClickedRobotId} pageType={\"serving\"}/>\r\n                            <TablePosition tableData={tableData} />\r\n                            <img src={mapBackgroundSrc} alt=\"map-background-img\" className=\"map-background-img\" onClick={handelNotRobotClick} />\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-serving\">\r\n                        <div className=\"grid-title text-color-1\"><HiClipboardList className=\"icon icon-2\"/>로봇 서빙 현황</div>\r\n                        <ul>\r\n                            {robotData.map(robot => (   /*upgradable 하나의 robotData의 의미로 robot말고 다른 변수명 찾기 */\r\n                                <RobotServing robot={robot} key={robot.robot_id} clickedRobotId={clickedRobotId} setClickedRobotId={setClickedRobotId} />\r\n                            ))}\r\n                        </ul>\r\n                        <ErrorControlButton clickedRobotId={clickedRobotId} setClickedRobotId={setClickedRobotId} />\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ServingPresenter\r\n","import React from 'react'\r\n\r\nfunction RobotInfo({robot, clickedRobotId}) {\r\n    if(robot == null) return null;\r\n    else if (robot.robot_id != clickedRobotId) return null;\r\n    else {\r\n        const robotImgSrc = \"/assets/robot/basic_robot.png\";  //로봇 이미지    \r\n        var destination = \"\";\r\n        var tableName = robot.table_name;\r\n        if(tableName == null){\r\n            destination = \"현재 위치\";\r\n        }\r\n        else if (isNaN(tableName)){  // table name 이 숫자가 아닐 때 (ex. 배달)\r\n            //console.log(\"not number!\");\r\n            destination = tableName+\"구역\";\r\n        }\r\n        else{\r\n            destination = \"테이블 \"+tableName+\"번\";\r\n        }\r\n\r\n        return (\r\n\r\n            <div id=\"robot-info\">\r\n                <div id=\"robot-basic-img-div\">\r\n                <img src={robotImgSrc} alt=\"robot-basic-img\" className=\"robot-basic-img\" />\r\n                </div>\r\n                <div id=\"info-text\">\r\n                    <div className=\"text-color-1\">로봇 ID : <span className=\"text-color-3\">{robot.robot_id}</span></div>\r\n                    <div className=\"text-color-1\">목적지 : <span className=\"text-color-3\">{destination}</span></div>\r\n                    <div className=\"text-color-1\">베터리 : {robot.battery}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n}\r\n\r\n}\r\n\r\nexport default RobotInfo\r\n","import React, {useState, useEffect} from 'react'\r\n// component\r\nimport ErrorControlButton from './ErrorControlButton';\r\nimport RobotPosition from './RobotPosition';\r\nimport RobotInfo from './RobotInfo';\r\n// icon\r\nimport {RiWindow2Fill} from 'react-icons/ri';\r\nimport { FaHandPointer } from 'react-icons/fa';\r\nimport { ImInfo } from 'react-icons/im';\r\n\r\n// http\r\n\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.10\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'\r\n\r\nfunction MonitoringPresenter() {\r\n\r\n    const [clickedRobotId, setClickedRobotId] = useState(1);    //클릭된 로봇\r\n    const [clickedRobotData, setClickedRobotData] = useState();    //클릭된 로봇\r\n    const [robotData, setRobotData] = useState([]); //불러온 로봇 데이터\r\n\r\n    const mapId = sessionStorage.getItem('mapId');\r\n    const mapBackgroundSrc = \"assets/map-background/map-background-\" + mapId + \"-monitoring.png\";  //배경 이미지\r\n\r\n    function getRobotData() {   // 로봇 데이터 불러오기\r\n        const userId = sessionStorage.getItem('userId');\r\n\r\n        var interval = setInterval(() => {\r\n            console.log(\"[RobotPosition] get robot position\")\r\n            axios.get('/controller/robot/position/' + mapId)    /*api이름 data로 변경해야함 upgradable*/\r\n                .then((response) => {\r\n                    setRobotData(response.data.robot_position);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"call robot positions item fail.\");\r\n                    return interval;\r\n                })\r\n        }, 1000);\r\n        return interval\r\n    }\r\n\r\n\r\n    useEffect(() => {   // 로봇 데이터 불러오기 반복\r\n        const interval = getRobotData();\r\n        return () => clearInterval(interval);   // 다른 창으로 넘어갈때 로봇 불러오기 멈춤\r\n    }, [])\r\n    /* [robotPositionList] 쓰는 이유. (근데 쓰면 계속 불러오드람. 더 찾아보기.)\r\n    근데 여기서 새로고침을 하지 않으면 등록된 모습을 확인할 수 없다. 그 이유는 useEffect 함수의 두번째 인자로 빈 배열을 주면 처음 사이트에 들어갔을 1회만 렌더링이 되기 때문에 다시 값을 불러오지 않는다.\r\n    그래서 다음과 같이 수정해 주면 등록이 완료될 때 게시판이 업데이트 되는 모습을 확인할 수 있다.*/\r\n\r\n    function handelNotRobotClick() {     // 배경 이미지를 클릭할때 클릭된 로봇값 초기화\r\n        setClickedRobotId(0);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"content\" id=\"map\">\r\n                <div className=\"content-title text-color-1\"><RiWindow2Fill className=\"icon\" />모니터링</div>\r\n\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item item-scroll\" id=\"item-map\">\r\n                        <div id=\"map-top\">\r\n                            <div id=\"discription\">\r\n                            <p className=\"text-color-1\">\r\n                                    <span className=\"icon-div background-color-2\"><FaHandPointer className=\"icon-w\" /></span>\r\n                                    <span className=\"text-color-3\">상태를 확인할 로봇을</span> 선택하세요</p>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div id=\"map-container\">\r\n                            <RobotPosition clickedRobotId={clickedRobotId} robotData={robotData} setClickedRobotId={setClickedRobotId} pageType={\"monitoring\"}/>\r\n                            <img src={mapBackgroundSrc} alt=\"map-background-img\" className=\"map-background-img\"  />\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"grid-item\" id=\"item-robot\">\r\n                        <div className=\"grid-title text-color-1\"><ImInfo className=\"icon icon-2\"/>로봇 정보</div>\r\n                        <RobotInfo clickedRobotId={clickedRobotId} robotData={robotData}/>\r\n                        <div>\r\n                        {robotData.map(robot => (   /*upgradable 하나의 robotData의 의미로 robot말고 다른 변수명 찾기 */\r\n                            <RobotInfo robot={robot} key={robot.robot_id}  clickedRobotId={clickedRobotId}/>\r\n                            ))}\r\n                        </div>\r\n                        <ErrorControlButton clickedRobotId={clickedRobotId} setClickedRobotId={setClickedRobotId} />\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MonitoringPresenter\r\n","import React, {useState, useEffect} from 'react'\r\n// import {GetRobotStatus} from './CallController';\r\nimport './../../assets/style.css';\r\n\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.10\r\n\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.10\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\n// -- 로봇 status 하나의 항목\r\nfunction RobotStatus({robot}){\r\n    return (\r\n        <li>\r\n            <span> {robot.robot_id}</span>\r\n            <span> - {robot.used == '0' ? \"대기\" : robot.used}</span> \r\n            <span> [ {robot.battery}% ]</span>\r\n        </li>\r\n    )\r\n}\r\n\r\n// -- 로봇 status 리스트에 필요한 작업(list)\r\nfunction CallStatus() {\r\n    const [robotStatusList, setRobotStatusList] = useState([]);\r\n\r\n    const mapId = sessionStorage.getItem('mapId');\r\n\r\n    function getRobotStatus(){\r\n        axios.get('/controller/robot/status/'+mapId)\r\n        .then((response)=>{\r\n            setRobotStatusList(response.data.robot_status);            \r\n        })\r\n        .catch((error) => {\r\n            console.log(\"call robot status item fail.\");\r\n        })\r\n    }\r\n    function countNotUsed(){\r\n        // console.log(\" lenghtheth : \");\r\n        const count = robotStatusList.filter(robot => robot.used === \"0\");  //아무도 사용중이지 않은 로봇 ('0')의 수 계산\r\n        return count.length;\r\n        // if (robotStatusList.length > 0) {\r\n        //     const count = robotStatusList.filter(robot => robot.used === \"0\");\r\n        //     return count.length;\r\n        // }s\r\n        // else {\r\n        //     return 0;\r\n        // }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRobotStatus();\r\n    }, [robotStatusList])\r\n    /* [robotStatusList] 쓰는 이유. (근데 쓰면 계속 불러오드람. 더 찾아보기.)\r\n    근데 여기서 새로고침을 하지 않으면 등록된 모습을 확인할 수 없다. 그 이유는 useEffect 함수의 두번째 인자로 빈 배열을 주면 처음 사이트에 들어갔을 1회만 렌더링이 되기 때문에 다시 값을 불러오지 않는다.\r\n그래서 다음과 같이 수정해 주면 등록이 완료될 때 게시판이 업데이트 되는 모습을 확인할 수 있다.*/\r\n    //불러온 데이터가 존재 할 경우\r\n    if (robotStatusList.length > 0) {\r\n        return (\r\n            <div className=\"grid-container call-status\">\r\n                <div className=\"grid-item\" id=\"item-available\">\r\n                    <h4>호출가능 로봇 수</h4>\r\n                    <div>{countNotUsed()}</div>\r\n                </div>\r\n                <div className=\"grid-item item-state\">\r\n                    <h4>로봇 상태</h4>\r\n                    <div>\r\n                        <ul>\r\n                            {robotStatusList.map(robot => (\r\n                                <RobotStatus robot={robot} key={robot.robot_id} />\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    else {  // 조회 데이터 존재하지 않을 경우\r\n        console.log(\" robotStatusList.length <= 0 존재안함\")\r\n        return (\r\n            <div className=\"grid-container call-status\">\r\n                <div className=\"grid-item\" id=\"item-available\">\r\n                    <h4>호출가능 로봇 수</h4>\r\n                    <div>0</div>\r\n                </div>\r\n                <div className=\"grid-item item-state\">\r\n                    <h4>로봇 상태</h4>\r\n                    <div>\r\n                        <button className=\"data-reload\" onClick={getRobotStatus}>데이터 로드</button>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CallStatus\r\n","import axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\nexport async function getPickupRobot(userId) {    // '픽업대'버튼 눌렀을 때 로봇을 home으로 보냄\r\n\r\n    try {\r\n        const response = await axios.get('/controller/button/to-pickup/' + userId);  // button mqtt post를 위한 정보 얻기\r\n        let error = response.data.error;\r\n        console.log(\"[CallController] getPickupRobot to-pickup 결과 ->\");\r\n        console.log(response);\r\n\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            // alert(response.data.message);\r\n            console.log(response.data.message)\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            let robotId = response.data.robot_id;\r\n            let robotHome = response.data.robot_home;\r\n            let mapName = response.data.map_name;\r\n            let postError = postButton([robotHome, mapName, robotId]);\r\n            return [postError, robotId];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[CallController] getPickupRobot error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\nexport async function getCallRobot(userId) {    // 호출 버튼을 눌러 쉬고있는 로봇 하나를 user의 위치로 오도록 명령을 내린다.\r\n\r\n\r\n    try {\r\n            // [안전장치1] 조금의 버퍼링으로 로봇을 2번 호출하면 안됨.\r\n        /*\r\n            axios.get('/controller/button/robot-updated/' + userId)  // 최근 로봇 수정이 1초안에 있었다면 기달\r\n            .then((response) => {\r\n                console.log(\"[CallController] getCallRobot - robot-updated  결과 ->\");\r\n                console.log(response);\r\n                if (response.data.result.length) {  // 1초내 변경된 로봇의 결과가 1개 이상이라면\r\n                    var message = \"[CallController] getCallRobot - update in 3 second. please wait\";\r\n                    return [true, message];\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"[CallController] getCallRobot - robot-updated  fail get robot updated.\");\r\n                console.log(error);\r\n                return [error, response.data.message];\r\n            })\r\n            */\r\n        // [안전장치2] 조금의 버퍼링으로 로봇을 2번 호출하면 안됨.\r\n\r\n        axios.get('/controller/button/is-call/' + userId)  // 어떤 로봇이 오고있다면 반환\r\n            .then((response) => {\r\n                console.log(\"[CallController] getCallRobot - is call 결과 ->\");\r\n                console.log(response);\r\n                if (response.status == 201) {\r\n                    var message = \"[CallController] getCallRobot - some robot is coming\";\r\n                    return [true, message];\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"[CallController] getCallRobot - fail  get is call status.\");\r\n                console.log(error);\r\n                return [error, response.data.message];\r\n            })\r\n\r\n\r\n\r\n        const response = await axios.get('/controller/button/to-user/' + userId);\r\n        let error = response.data.error;\r\n        console.log(\"[CallController] getCallRobot - to-user  결과 ->\");\r\n        console.log(response);\r\n        if (error) { //error일때, 즉 response.state가 201 또는 400일때\r\n            console.log(response.data.message);\r\n            return [error, response.data.message]\r\n        }\r\n        else {  // error 안났을때, 200\r\n            let robotId = response.data.robot_id;\r\n            let userNode = response.data.user_node;\r\n            let mapName = response.data.map_name;\r\n            let postError = postButton([userNode, mapName, robotId]);\r\n            return [postError, robotId];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[CallController] getCallRobot 호출 가능한 로봇이 없습니다. 기다려주세요.\\n\" + e.message);\r\n        return [true, e.message]\r\n    }\r\n}\r\nfunction postButton(params) {\r\n    console.log(\"[CallController] postButton param \", params);\r\n    try {\r\n        const response = axios({\r\n            method: 'post',\r\n            url: '/mqtt/button',\r\n            data: {\r\n                table_id: params[0],\r\n                map_name: params[1],\r\n                robot_id: params[2]\r\n            }\r\n        });\r\n        console.log(\"[CallController] postButton   결과 ->\");\r\n        console.log(response);\r\n        return false;\r\n\r\n    } catch (e) {\r\n        console.log(\"[CallController] postButton button 정보를 로봇으로 보내는데 실패했습니다.\\n\" + e.message);\r\n        return [true, e.message]\r\n    }\r\n\r\n}","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';     //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'\r\n\r\nfunction CallButton(props) {\r\n    const userId = sessionStorage.getItem('userId');\r\n    var responseStatus = 0;\r\n    const [buttonStatus, setButtonStatus] = useState(0);\r\n    const [calledRobot, setCalledRobot] = useState(0);\r\n\r\n    function getIsCall() {\r\n        var interval = setInterval(() => {\r\n            axios.get('/controller/button/is-call/' + userId)   // 현재 버튼 상태를 반복적으로 불러옴\r\n                .then((response) => {                    \r\n                    responseStatus = response.status    // 201 이동중 202 주방 200 픽업대에 위치\r\n                    switch (responseStatus) {\r\n                        case 201:\r\n                            console.log(\"[CallButton] 현재 매장의 로봇 이동중 : \" + responseStatus);\r\n                            if (buttonStatus != 1) {\r\n                                // console.log(buttonStatus+\"업데이트!\");\r\n                                props.updateLoading(0); //로봇의 움직임이 명령에 반응하여 다른 is call이 반응 했을 때 버튼 클릭 가능\r\n                                setButtonStatus(1);\r\n                            }\r\n                            setCalledRobot(response.data.robot_id); // 해당 주방으로 이동중인 로봇 id \r\n                            setButtonStatus(1);\r\n                            break;\r\n                        case 202:\r\n                            console.log(\"[CallButton] 현재 매장의 로봇 도착 : \" + responseStatus);\r\n                            if (buttonStatus != 2) {\r\n                                // console.log(buttonStatus+\"업데이트! \");\r\n                                props.updateLoading(0); //로봇의 움직임이 명령에 반응하여 다른 is call이 반응 했을 때 버튼 클릭 가능\r\n                                setButtonStatus(2);\r\n                            }\r\n                            setCalledRobot(response.data.robot_id); // 현재 주방에 도착한 로봇id\r\n                            setButtonStatus(2);\r\n                            break;\r\n                        case 200:\r\n                            console.log(\"[CallButton] 현재 매장의 로봇 호출안함 : \" + responseStatus);\r\n                            if (buttonStatus != 0) {\r\n                                // console.log(buttonStatus+\"업데이트!\");\r\n                                props.updateLoading(0); //로봇의 움직임이 명령에 반응하여 다른 is call이 반응 했을 때 버튼 클릭 가능\r\n                                setButtonStatus(0);\r\n                            }\r\n                                setButtonStatus(0);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    // return 1;\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"[CallButton] fail  get is-call button. error ->\");\r\n                    console.log(error);\r\n                    clearInterval(interval);\r\n\r\n                    return 0;\r\n                })\r\n            // if (buttonStatus != 1 && count == 3) {       // 로봇이 오는중이 아니고 3번의 로드 후\r\n            //     console.log(\"[CallButton] 버튼 제한 풀림\");\r\n            //     props.updateLoading(0); //버튼 잠금 푼다. 3초 로딩 후 버튼 허가\r\n            // }\r\n\r\n        }, 1000);\r\n        return interval;\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        const interval = getIsCall();   \r\n        return () => clearInterval(interval);   // 해당 function이 종료될 때 반복도 종료됨.  \r\n    }, [buttonStatus])\r\n\r\n    return (\r\n        <div >\r\n            <div id=\"called-robot\">\r\n                {buttonStatus != 0 ?\r\n                    <div><span>{calledRobot}</span> 번 로봇 배정 </div>\r\n                    :\r\n                    <div> </div>    // '호출'버튼일 때에는 배정된 로봇이 없다.\r\n                }\r\n\r\n            </div>\r\n            {\r\n                buttonStatus == 0 ? <button id=\"call-button\"  onClick={props.onClickKitchen}>호출</button>\r\n                : buttonStatus == 2 ? <button id=\"call-button\"  onClick={props.onClickPickup}>픽업대</button>\r\n                : <button id=\"call-button\">오는중</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CallButton\r\n","import React, { Component } from 'react';\r\nimport CallStatus from './CallStatus';\r\nimport {getPickupRobot, getCallRobot, getIsCall} from './CallController';\r\nimport CallButton from './CallButton';\r\nimport Modal from './../Modal/Modal';\r\n\r\nexport class CallPresenter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            loading: 0,\r\n            isModalOpen:false,\r\n            modalTitle:\"제목\",\r\n            modalContent: \"내용\",\r\n        };\r\n\r\n    }\r\n\r\n    // 로딩중에 버튼클릭 못하도록 하는 flag값을 갖는 변수 loading의 값을 변경하는 함수\r\n    updateLoading(input) {\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            loading: input\r\n        }))\r\n    }\r\n\r\n    // 모달에서 ok버튼 클릭시 \r\n    async clickPickupModalPermit(userId){\r\n\r\n        // 매장에 로봇이 도착한 상태. 픽업대 버튼을 누를때 시행되는 상황\r\n        let [error, message] = await getPickupRobot(userId);\r\n        if (!error) {\r\n            console.log(\"[CallPresenter] handleButtonClick back, robot_id : \", message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                loading: 1, // 버튼 잠금 (로봇이 출발하지 않았을 때 다시 버튼을 누르는 것을 방지)\r\n                isModalOpen: false\r\n            }))\r\n        }\r\n        else {\r\n            console.log(\"[CallPresenter] handleButtonClick back, error  : \", message);\r\n            // alert(message);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                loading: 0, // 버튼 오픈\r\n\r\n                isModalOpen: false\r\n            }))\r\n        }\r\n    }\r\n    // 모달에서 ok버튼 클릭시 \r\n    async clickKitchenModalPermit(userId){\r\n        // 로봇이 home에 있는 상태. 호출 버튼을 누를때 시행되는 상황\r\n        let [error2, message2] = await getCallRobot(userId);\r\n        if (!error2) {\r\n            console.log(\"[CallPresenter] handleButtonClick call, robot_id : \", error2);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                loading: 1, // 버튼 잠금 (로봇이 호출된 뒤 출발하기 전에 다시 버튼을 누르는것을 방지)\r\n                isModalOpen: false\r\n\r\n            }))\r\n        }\r\n        else {\r\n            console.log(\"[CallPresenter] handleButtonClick call, error  : \", message2);\r\n            // alert(message2);\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                loading: 0, // 버튼 오픈\r\n                isModalOpen: false\r\n            }))\r\n        }\r\n\r\n    }\r\n    // 주요 버튼(호출 / 픽업대 / 오는중) 눌렀을 시 동작하는 함수\r\n        // 버튼 클릭시 모달을 띄우는 함수\r\n\r\n    handlePickupButtonClick() {\r\n        console.log(\"[CallPresenter] 픽업대로 버튼 클릭\");\r\n        // 오는 중 이거나 버튼을 누른지 3초 이내에는 handleButtonClick 함수를 끝낸다.\r\n        if (this.state.loading) {\r\n            console.log(\"[CallPresenter] loading...\");\r\n            return;\r\n        }\r\n        // 매장에 로봇이 도착한 상태. 픽업대 버튼을 누를때 시행되는 상황\r\n        this.setState(prevState => ({\r\n            ...prevState,   \r\n            isModalOpen: \"pickup\",\r\n            modalTitle: \"픽업대로\",\r\n            modalContent: \"해당 매장의 로봇을 픽업대로 보내겠습니까?\"\r\n        }));\r\n    }\r\n    handleKitchenButtonClick() {\r\n        console.log(\"[CallPresenter] 호출 버튼 클릭\" );\r\n        // 오는 중 이거나 버튼을 누른지 3초 이내에는 handleButtonClick 함수를 끝낸다.\r\n        if (this.state.loading) {\r\n            console.log(\"[CallPresenter] loading...\");\r\n            return;\r\n        }\r\n        // 매장에 로봇이 도착한 상태. 픽업대 버튼을 누를때 시행되는 상황\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            isModalOpen: \"kitchen\",\r\n            modalTitle: \"로봇 호출\",\r\n            modalContent: \"로봇을 주방으로 호출하시겠습니까?\"\r\n        }));\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const userId = sessionStorage.getItem('userId');\r\n        const isModalOpen = this.state.isModalOpen;\r\n\r\n        return (\r\n            <div className=\"content\" id=\"call\">\r\n                <h1 > 로봇 호출</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item\" id=\"item-button\">\r\n                        <h4>로봇 호출 버튼</h4>\r\n                        <div id=\"calling-map-name\">\r\n                            {userId}의 매장 입니다.\r\n                        </div>\r\n                    \r\n                            <CallButton userId={userId} onClickPickup={() => this.handlePickupButtonClick()} onClickKitchen={() => this.handleKitchenButtonClick()}\r\n                                updateLoading={(input) => this.updateLoading(input)} />\r\n                    </div>\r\n                    <div className=\"item-call-status\">\r\n                        <CallStatus />\r\n\r\n                    </div>\r\n\r\n                </div>\r\n                <Modal title={this.state.modalTitle} content={this.state.modalContent} open={isModalOpen} onCancel={() => this.setState(prevState => ({ isModalOpen: false }))}\r\n                    onPermit={isModalOpen == \"pickup\" ? () => this.clickPickupModalPermit(userId)\r\n                                : () => this.clickKitchenModalPermit(userId)}>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CallPresenter\r\n","import React, { Component } from 'react';\r\nimport Modal from './../Modal/Modal';\r\nconst BUTTON_WRAPPER_STYLES = {\r\n    position: 'relative',\r\n    zIndex: 1\r\n  }\r\n  \r\n\r\nexport class SettingPresenter extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            isModalOpen: false\r\n        };\r\n    }\r\n    onLogout = () => {\r\n        window.sessionStorage.removeItem('userId');\r\n        window.sessionStorage.removeItem('mapId');\r\n        window.sessionStorage.removeItem('userName');\r\n        window.sessionStorage.removeItem('logoSrc');\r\n\r\n        document.location.href = '/'\r\n        \r\n    }\r\n    render() {\r\n        const isModalOpen = this.state.isModalOpen;\r\n        console.log(\"[Setting presenter] username\");\r\n        console.log(sessionStorage.getItem('userName'));\r\n        return (\r\n            <div className=\"content setting\">\r\n                <h1>설정</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item\">\r\n                    설정 페이지입니다\r\n                    <button onClick={this.onLogout.bind(this)}>로그아웃</button>\r\n                        <div style={BUTTON_WRAPPER_STYLES} onClick={() => console.log('clicked')}>\r\n                            <button onClick={() => this.setState(prevState => ({isModalOpen:true }))}>Open Modal</button>\r\n\r\n                            <Modal title=\"제목\" content = \"내용22\" open={isModalOpen} onCancel={() => this.setState(prevState => ({isModalOpen:false }))}\r\n                            onPermit={() => this.setState(prevState => ({isModalOpen:false }))}>\r\n                            </Modal>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SettingPresenter\r\n","import React, { Component } from 'react'\r\nimport Box from '@material-ui/core/Box';\r\n\r\nexport class HistoryPresenter extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"content\" id=\"history\">\r\n                <h1 > 기록</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item item-scroll\" id = \"history-list\">\r\n                        기록 페이지입니다\r\n                        <Box bgcolor=\"primary.main\" p={2} m={1}>primary.main</Box>\r\n                        <Box bgcolor=\"primary.light\" sx={{ borderRadius: 25 }} color=\"primary.contrastText\" p={2} m={1}>primary.light</Box>\r\n                        <Box bgcolor=\"primary.dark\" color=\"primary.contrastText\" p={2} m={1}>primary.dark</Box>\r\n                        <Box bgcolor=\"secondary.main\" p={2} m={1}>secondary.main</Box>\r\n                        <Box bgcolor=\"secondary.light\" color=\"secondary.contrastText\" p={2} m={1}>secondary.light</Box>\r\n                        <Box bgcolor=\"secondary.dark\" color=\"secondary.contrastText\" p={2} m={1}>secondary.dark</Box>\r\n                        <Box bgcolor=\"error.main\" p={2} m={1}>error.main</Box>\r\n                        <Box bgcolor=\"error.light\" color=\"error.contrastText\" p={2} m={1}>error.light</Box>\r\n                        <Box bgcolor=\"error.dark\" color=\"error.contrastText\" p={2} m={1}>error.dark</Box>\r\n                        <Box bgcolor=\"sidenav.main\" p={2} m={1}>error.main</Box>\r\n                        <Box bgcolor=\"sidenav.background\" color=\"neutral.contrastText\" p={2} m={1}>error.light</Box>\r\n                        <Box bgcolor=\"sidenav.text\" color=\"neutral.contrastText\" p={2} m={1}>error.dark</Box>\r\n                        <Box bgcolor=\"text.primary\" p={2} m={1}>text.primary</Box>\r\n                        <Box bgcolor=\"text.secondary\" p={2} m={1}>text.secondary</Box>\r\n                        <Box bgcolor=\"text.disabled\" p={2} m={1}>text.disabled</Box>\r\n                        <Box bgcolor=\"text.hint\" p={2} m={1}>text.hint</Box>\r\n                        <Box bgcolor=\"text.myTextColor\" p={2} m={1}>text.myTextColor</Box>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HistoryPresenter\r\n","import axios from 'axios';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://localhost:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.baseURL = 'http://15.165.182.103:8080/server/src/public';    //15.165.182.103\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\nexport async function getRobotError(mapId) {    // 해당 맵의 로봇의 에러 기록들을 얻어온다\r\n\r\n    try {\r\n        const response = await axios.get('/robot-errors/map/' + mapId);  //\r\n        console.log(\"[ErrorController] getRobotError 결과 ->\");\r\n        console.log(response);\r\n        var status = response.status;\r\n        if (status>= 200) {\r\n            return [false, response.data];\r\n        }\r\n        return [true, \"getRobotError status is not 200.\"];\r\n\r\n    } catch (e) {\r\n        console.log(\"[ErrorController] getRobotError error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}\r\nexport async function getRobotLog(logId) {    // 해당 에러와 연결된 로그의 정보를 불러옴\r\n\r\n    try {\r\n        const response = await axios.get('/robot-logs/' + logId);\r\n        console.log(\"[ErrorController] getRobotLog 결과 ->\");\r\n        console.log(response.data);\r\n        var status = response.status;\r\n        var errorMessage = \"\";\r\n        if (status>= 200) {\r\n            if (response.data.length > 0) {\r\n                return [false, response.data[0]];\r\n            }\r\n            else {\r\n                errorMessage = \"[ErrorController] not log data existed.\"\r\n                return [true, errorMessage];\r\n            }\r\n        }\r\n        else {\r\n            return [true, \"getRobotLog status is not 200.\"];\r\n        }\r\n    } catch (e) {\r\n        console.log(\"[ErrorController] getRobotLog error catch.\\n\" + e.message);\r\n        \r\n        return [true, e.message]\r\n    }\r\n}","import React, {useState, useEffect} from 'react'\r\n\r\nimport {getRobotError, getRobotLog} from './ErrorController';\r\nimport Modal from './../Modal/Modal';\r\n\r\n\r\n\r\nfunction ErrorPresenter() {\r\n    const [errorList, setErrorList]= useState([]);\r\n    const [modalTitle, setModalTitle]= useState(\"\");\r\n    const [modalContent, setModalContent]= useState(\"\");\r\n    const [isModalOpen, setIsModalOpen]= useState(false);\r\n    const mapId = sessionStorage.getItem('mapId');\r\n\r\n    /*\r\n    1:\r\n        created_at: \"2021-10-27 15:09:40\"\r\n        current_node_robot: \"1\"\r\n        current_node_server: \"16\"\r\n        error_id: \"5\"\r\n        error_type: \"world\"\r\n        last_log_id: null\r\n        map_id: \"7\"\r\n        robot_id: \"2\"\r\n    */\r\n    async function loadErrors() {\r\n\r\n        let [error, result] = await getRobotError(mapId);\r\n        if (!error) {\r\n            setErrorList(result);\r\n        }\r\n    }\r\n    async function loadLog(logId) {\r\n        let [error, result] = await getRobotLog(logId);\r\n        /*\r\n        created_at: \"2021-10-20 14:18:50\"\r\ncurrent_node: \"1\"\r\nfinal_node: \"1\"\r\nlog_id: \"1\"\r\nmap_existence: \"[1]1[2]0[3]0[4]0[5]0[6]0[7]0[8]0[9]0[10]0[11]0[12]0[13]0[14]0[15]0[16]0[17]0[18]0[19]0[20]0[21]0[22]0[23]2[24]3[25]0[26]0[27]0[28]0[29]0[30]0[31]0\"\r\nmap_id: \"8\"\r\nrobot_id: \"1\"\r\nrobot_path: \"9999!\"\r\n        */\r\n        var logString = \"\";\r\n        if (!error) {\r\n            logString = \"current node: \"+result.current_node+\"\\n||\\n\"+\"robot path: \"+result.robot_path+\"\\n||\\n\"+\"map existence: \"+result.map_existence;\r\n            setModalContent(logString);\r\n            return true;\r\n        }\r\n        setModalContent(logString);\r\n        return false;\r\n    }\r\n    function handelErrorClick(logId, errorId){\r\n        const isSuccess = loadLog(logId);\r\n        if(isSuccess){\r\n            setModalTitle(errorId+\"번 에러 (log \"+logId+\")\");\r\n            setIsModalOpen(true);    \r\n        }\r\n    }\r\n    function clickErrorModalButton(){\r\n            setIsModalOpen(false);    \r\n    }\r\n    useEffect(() => {\r\n        loadErrors();\r\n        console.log(errorList);\r\n\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <div className=\"content\" id=\"error\">\r\n                <h1 > 에러</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item item-scroll\" id=\"error-div\">\r\n                        에러 페이지입니다\r\n                        <table id=\"error-table\">\r\n                            <thead>\r\n                                <tr className=\"background-color-2\" align=\"center\" bgcolor=\"white\" >\r\n                                    <th>에러id</th>\r\n                                    <th>로봇</th>\r\n                                    <th>타입</th>\r\n                                    <th>로봇의 최신 current</th>\r\n                                    <th>서버의 최신 current</th>\r\n                                    <th>발생시각</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n\r\n                            <tbody>\r\n                                {errorList.map(robotError => (\r\n                                    <tr align=\"center\" bgcolor=\"white\" onClick={()=>handelErrorClick(robotError.last_log_id, robotError.error_id)}>\r\n                                        <td>{robotError.error_id}</td>\r\n                                        <th>{robotError.robot_id}</th>\r\n                                        <td>{robotError.error_type}</td>\r\n                                        <td>{robotError.current_node_robot}</td>\r\n                                        <td>{robotError.current_node_server}</td>\r\n                                        <td>{robotError.created_at}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Modal title={modalTitle} content={modalContent} open={isModalOpen}\r\n            onCancel={clickErrorModalButton} onPermit={clickErrorModalButton}>\r\n                </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorPresenter\r\n","import React from 'react'\r\n\r\nfunction PickupContent({ pickup }) {\r\n    const isNull = pickup.phone === \"\";\r\n    return (\r\n        <li className=\"pickup-item\">\r\n            <div className=\"pickup-number\"> {pickup.id}</div>\r\n            <div className=\"pickup-store\"> {pickup.store}</div>\r\n            <div className=\"pickup-status\">\r\n                {isNull ?\r\n                    <div> 비어있음</div>\r\n                    :\r\n                    <div>\r\n                        <div> 배달 주소 : {pickup.delivery}</div>\r\n                        <div> 연락처 : {pickup.phone}</div>\r\n                        <div> 대기시간 : {pickup.delay}</div>\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nfunction PickupItem({pickupList}) {\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {pickupList.map(pickupItem => (\r\n                    <PickupContent pickup={pickupItem} key={pickupList.id}/>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PickupItem\r\n","import React, { Component } from 'react'\r\nimport PickupItem from './PickupItem'\r\nexport class PickupPresenter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            pickupList : [\r\n                {id:1, store:\"대기\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"\", delay:0},\r\n                {id:2, store:\"맥도날드\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"1234\", delay:4},\r\n                {id:3, store:\"버거킹\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"1433\", delay:15},\r\n                {id:4, store:\"맘스터치\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"1134\", delay:3},\r\n                {id:5, store:\"대기\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"\", delay:0},\r\n                {id:6, store:\"롯데리아\", delivery: \"왕십리 한양대 코맥스타운\", phone: \"1424\", delay:2}\r\n            ]\r\n        }\r\n        // this.toggle = this.toggle.bind(this);\r\n\r\n    }\r\n    render() {\r\n        const pickupList = this.state.pickupList\r\n        return (\r\n            <div className=\"content\" id=\"pickup\">\r\n                <h1> 픽업대 현황</h1>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"grid-item item-scroll\" id=\"item-pickup-list\">\r\n                    <PickupItem pickupList={pickupList}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PickupPresenter\r\n","import React, { useEffect, useState } from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\n//component\r\nimport './../../assets/style.css';\r\nimport Modal from './../Modal/Modal';\r\n//icon\r\nimport {AiOutlineLeft,AiOutlineRight, AiOutlineRobot, AiOutlineHistory, AiOutlineSetting} from 'react-icons/ai'\r\nimport {FaEquals,FaMapMarkerAlt, FaParking} from 'react-icons/fa'\r\nimport {MdErrorOutline} from 'react-icons/md'\r\nimport {RiWindow2Fill, RiLogoutBoxRLine, RiLoginBoxLine} from 'react-icons/ri';\r\n\r\nfunction SideNavPresenter({isAuthorized}) {\r\n    const menus = [\r\n        { name: \"서빙 모드\", path: \"/map\", iconClassName: \"bi bi-speedometer2\"},\r\n        { name: \"로봇 호출\", path: \"/call\", iconClassName: \"FaRobot\" },\r\n        { name: \"픽업대 상황\", path: \"/pickup\", iconClassName: \"bi bi-speedometer2\" },\r\n        { name: \"기록\", path: \"/history\", iconClassName: \"bi bi-speedometer2\" },\r\n        { name: \"에러기록\", path: \"/error\", iconClassName: \"bi bi-speedometer2\" },\r\n        { name: \"설정\", path: \"/setting\", iconClassName: \"bi bi-speedometer2\" }\r\n\r\n    ];\r\n    const [isFullNav, setIsFullNav] = useState(true);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    const dbLogoSrc = sessionStorage.getItem('logoSrc');\r\n    const logo_src = '/assets/store_logo/' + dbLogoSrc + '.png';\r\n    const modalTitle = \"로그아웃 안내\";\r\n    const modalHighlight = \"\";\r\n    const modalContent = \"로그아웃 하시겠습니까?\";\r\n    // const logo_src = '/assets/store_logo/the_people_burger/the_people_burger_logo.png'\r\n// 로그아웃 함수\r\nfunction handleLogoutClick() {   // 로봇 복귀 버튼\r\n    console.log(\"logout modal click!\");\r\n    setIsModalOpen(true);\r\n}\r\nfunction clickLogoutPermit(){\r\n    window.sessionStorage.removeItem('userId');\r\n    window.sessionStorage.removeItem('mapId');\r\n    window.sessionStorage.removeItem('userName');\r\n    window.sessionStorage.removeItem('logoSrc');\r\n    document.location.href = '/login'\r\n}\r\n    return (\r\n        <div id=\"side-nav\" className={\"side-nav \" + (isFullNav ? \"big-nav\" : \"small-nav center-align\")}>\r\n            \r\n            <div className=\"center-align\" id=\"top\">\r\n            <div onClick={() => setIsFullNav(!isFullNav)} className=\"toggle-menu-btn right-align\">\r\n                    {isFullNav ? (\r\n                        <AiOutlineLeft className=\"icon icon-1\"/>\r\n                    ) : (\r\n                        <AiOutlineRight className=\"icon icon-1\"/>\r\n                    )}\r\n                </div>\r\n                {isAuthorized ?\r\n                    <NavLink to='/my-page' id=\"nav-user\" >\r\n                        {/* <img src={require('/assets/store_logo/the_people_burger/the_people_burger_logo.png').default} alt=\"logo\" /> */}\r\n                        <div className=\"user-div\">\r\n                        <img id=\"nav-user-logo\" src={logo_src} alt=\"user-logo\" />\r\n                        {/* userid로 user img url 불러오기 */}\r\n                        <p>{sessionStorage.getItem('userName')} 매장</p>\r\n                        </div>\r\n                    </NavLink>\r\n                    :\r\n                        <div className=\" user-div\">\r\n                        </div>\r\n                }\r\n            </div>\r\n            \r\n            <div className=\"side-class text-color-2\">Main Menu</div>\r\n            <NavLink to=\"/serving\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">서빙 모드</p>\r\n                <FaMapMarkerAlt className=\"icon icon-1\"/>\r\n\r\n            </NavLink>\r\n            <NavLink to=\"/monitoring\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">모니터링</p>\r\n                <RiWindow2Fill className=\"icon icon-1\"/>\r\n\r\n            </NavLink>\r\n            <NavLink to=\"/history\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">기록</p>\r\n                <AiOutlineHistory className=\"icon icon-1\"/>\r\n            </NavLink>\r\n            <NavLink to=\"/call\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">로봇 호출</p>\r\n                <AiOutlineRobot className=\"icon icon-1\" />\r\n            </NavLink>\r\n            <div className=\"side-class text-color-2\">General</div>\r\n\r\n            <NavLink to=\"/setting\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\"> 설정</p>\r\n                <AiOutlineSetting className=\"icon icon-1\"/>\r\n            </NavLink>\r\n            <NavLink to=\"/pickup\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">픽업대 상황</p>\r\n                <FaParking className=\"icon icon-1\"/>\r\n            </NavLink>\r\n            \r\n            <NavLink to=\"/error\" className=\"nav-item\" activeClassName=\"nav-active\">\r\n                <p className=\" text-color-1\">에러</p>\r\n                <MdErrorOutline className=\"icon icon-1\"/>\r\n            </NavLink>\r\n\r\n            <div className=\"center-align\" id=\"bottom\">\r\n                \r\n                {isAuthorized ?\r\n                    <button id=\"nav-login\" className=\"round-button background-color-w\" onClick={handleLogoutClick}> \r\n                    <p className=\"text-color-1\"> 로그아웃</p>\r\n                    <RiLogoutBoxRLine className=\"icon icon-1\"/>\r\n                    </button>\r\n                \r\n                    :\r\n                    <NavLink to='/login' id=\"nav-login\" className=\"round-button\">\r\n                        <p className=\"text-color-1\">로그인</p>\r\n                        <RiLoginBoxLine className=\"icon icon-1\"/>\r\n\r\n                    </NavLink>\r\n                }\r\n            </div>\r\n            <Modal title={modalTitle} highlight={modalHighlight} content={modalContent} open={isModalOpen} onCancel={()=>setIsModalOpen(false)}\r\n                    onPermit={clickLogoutPermit}>\r\n                </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SideNavPresenter;\r\n","import './App.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Login from './component/User/Login';\r\nimport User from './component/User/User';\r\nimport Authorized from './component/User/Authorized';\r\nimport Map from './component/Map/MapPresenter';\r\nimport Serving from './component/Map/ServingPresenter';\r\nimport Monitoring from './component/Map/MonitoringPresenter';\r\nimport Call from './component/Call/CallPresenter';\r\nimport Setting from './component/Setting/SettingPresenter';\r\nimport History from './component/History/HistoryPresenter';\r\nimport Error from './component/Error/ErrorPresenter';\r\nimport Pickup from './component/Pickup/PickupPresenter';\r\nimport SideNav from './component/SideNav/SideNavPresenter';\r\nimport {  BrowserRouter as Router,  Route,  Redirect,  Switch} from 'react-router-dom';\r\nimport { createTheme }  from '@material-ui/core/styles'\r\nimport {createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\n\r\nfunction App() {\r\n\r\n  //로그인 상태 관리\r\n  const [isAuthorized, setIsAuthorized] = useState(false) //로그인 상태. 기본 false\r\n\r\n  useEffect(() => {\r\n    const user = sessionStorage.getItem('mapId')\r\n    if (user == null) {\r\n      // sessionStorage 에 user_id 라는 key 값으로 저장된 값이 없다면\r\n      // alert('isLogin ?? no:: ' + isAuthorized)\r\n    } else {\r\n      // sessionStorage 에 user_id 라는 key 값으로 저장된 값이 있다면\r\n      // 로그인 상태 변경\r\n      setIsAuthorized(true)\r\n      // alert('isLogin ?? yes:: map ' + user)\r\n    }\r\n  })\r\nconst theme = createTheme({ // 로그인만 사용\r\n  palette: {\r\n    primary: {\r\n      main: '#688ABD', //로그인 버튼, 테두리 색상\r\n      light: \"#ff0000\",\r\n      dark: \"#0000ff\"\r\n    },\r\n    secondary: {\r\n      main: '#446AA3', // item의 title 색상\r\n    },\r\n    error: {\r\n      main: '#6B9ED9', // 모달 색상\r\n      // light: \"#6B9ED9\",\r\n      // dark: \"#6B9ED9\"\r\n    },\r\n    sidenav: {    // 사이드바 색상\r\n      main: '#446AA3',\r\n      background: '#124D84',\r\n      text: '#C0BEFF',\r\n    },\r\n    text: {\r\n      primary: '#384C68',\r\n      secondary: '#688ABD', // 로그인 아이디 인풋 전 색상. 왜인지 모름\r\n      disabled: '#4caf50',\r\n      hint: '#ffc107',\r\n      myTextColor : '#384C68'\r\n    }\r\n  },\r\n  overrides: {\r\n    MuiButton: {\r\n      label: {\r\n        color: \"#f1f1f1\",\r\n      },\r\n    },\r\n  },\r\n})\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n\r\n    <div className=\"web-container\">\r\n      <Router>\r\n        <div className=\"web-side-nav\">\r\n          <SideNav isAuthorized={isAuthorized}/>\r\n        </div>\r\n        <div className=\"web-content\">\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n\r\n              {!isAuthorized ? <Login /> : <Setting />}\r\n            </Route>\r\n            \r\n            <Route path=\"/serving\" exact>\r\n              {!isAuthorized ? < Authorized /> : <Serving />}\r\n            </Route>\r\n            <Route path=\"/monitoring\" exact>\r\n              {!isAuthorized ? < Authorized /> : <Monitoring />}\r\n            </Route>\r\n            <Route path=\"/call\" exact>\r\n              {!isAuthorized ? < Authorized /> : <Call />}\r\n            </Route>\r\n            <Route path=\"/pickup\" exact>\r\n              {!isAuthorized ? < Authorized /> : <Pickup />}\r\n            </Route>\r\n            <Route path=\"/history\" exact>\r\n              {!isAuthorized ? < Authorized /> : <History />}\r\n            </Route>\r\n            <Route path=\"/error\" exact>\r\n              {!isAuthorized ? < Authorized /> : <Error />}\r\n            </Route>\r\n            <Route path=\"/setting\" exact>\r\n              <Setting />\r\n            </Route>\r\n            <Route path=\"/login\" exact>\r\n              < Login />\r\n            </Route>\r\n            <Route path=\"/my-page\" exact>\r\n              {!isAuthorized ? < User /> : <Error />}\r\n            </Route>\r\n\r\n            <Redirect to=\"/\" />\r\n            {/* 주어지지 않은 url은 home으로 자동 이동 */}\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n    </ThemeProvider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}